// megafunction wizard: %ALTFP_DIV%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: altfp_div 

// ============================================================
// File Name: altfp_divider64.v
// Megafunction Name(s):
// 			altfp_div
//
// Simulation Library Files(s):
// 			
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 12.0 Build 178 05/31/2012 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2012 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//altfp_div CBX_AUTO_BLACKBOX="ALL" DENORMAL_SUPPORT="NO" DEVICE_FAMILY="Cyclone II" OPTIMIZE="SPEED" PIPELINE=61 REDUCED_FUNCTIONALITY="NO" WIDTH_EXP=11 WIDTH_MAN=52 clk_en clock dataa datab result
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//altfp_div_csa CARRY_SELECT="YES" CBX_AUTO_BLACKBOX="ALL" DATAB_IS_CONSTANT="YES" LPM_DIRECTION="ADD" LPM_WIDTH=53 cin cout dataa datab result
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END

//synthesis_resources = lpm_add_sub 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_altfp_div_csa_ivc
	( 
	cin,
	cout,
	dataa,
	datab,
	result) ;
	input   cin;
	output   cout;
	input   [52:0]  dataa;
	input   [52:0]  datab;
	output   [52:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   cin;
	tri0   [52:0]  dataa;
	tri0   [52:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_csa_lower_cout;
	wire  [26:0]   wire_csa_lower_result;
	wire  wire_csa_upper1_cout;
	wire  [25:0]   wire_csa_upper1_result;
	wire  [25:0]  adder_upper_w;
	wire  cout_w;
	wire  [52:0]  result_w;

	lpm_add_sub   csa_lower
	( 
	.cin(cin),
	.cout(wire_csa_lower_cout),
	.dataa(dataa[26:0]),
	.datab(datab[26:0]),
	.overflow(),
	.result(wire_csa_lower_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_lower.lpm_direction = "ADD",
		csa_lower.lpm_representation = "SIGNED",
		csa_lower.lpm_width = 27,
		csa_lower.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper1
	( 
	.cin(1'b1),
	.cout(wire_csa_upper1_cout),
	.dataa(dataa[52:27]),
	.datab(datab[52:27]),
	.overflow(),
	.result(wire_csa_upper1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper1.lpm_direction = "ADD",
		csa_upper1.lpm_representation = "SIGNED",
		csa_upper1.lpm_width = 26,
		csa_upper1.lpm_type = "lpm_add_sub";
	assign
		adder_upper_w = dataa[52:27],
		cout = cout_w,
		cout_w = (wire_csa_lower_cout & wire_csa_upper1_cout),
		result = result_w,
		result_w = {(({26{(~ wire_csa_lower_cout)}} & adder_upper_w) | ({26{wire_csa_lower_cout}} & wire_csa_upper1_result)), wire_csa_lower_result};
endmodule //altfp_divider64_altfp_div_csa_ivc


//altfp_div_srt_ext CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone II" ITERATION=28 OPTMIZE="SPEED" WIDTH_DIV=53 aclr clken clock denom divider numer quotient remain
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END


//altfp_div_csa CARRY_SELECT="YES" CBX_AUTO_BLACKBOX="ALL" DATAB_IS_CONSTANT="NO" LPM_DIRECTION="ADD" LPM_WIDTH=53 dataa datab result
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END

//synthesis_resources = lpm_add_sub 3 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_altfp_div_csa_92c
	( 
	dataa,
	datab,
	result) ;
	input   [52:0]  dataa;
	input   [52:0]  datab;
	output   [52:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [52:0]  dataa;
	tri0   [52:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_csa_lower_cout;
	wire  [26:0]   wire_csa_lower_result;
	wire  [25:0]   wire_csa_upper0_result;
	wire  [25:0]   wire_csa_upper1_result;
	wire  [52:0]  result_w;

	lpm_add_sub   csa_lower
	( 
	.cout(wire_csa_lower_cout),
	.dataa(dataa[26:0]),
	.datab(datab[26:0]),
	.overflow(),
	.result(wire_csa_lower_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_lower.lpm_direction = "ADD",
		csa_lower.lpm_representation = "SIGNED",
		csa_lower.lpm_width = 27,
		csa_lower.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper0
	( 
	.cin(1'b0),
	.cout(),
	.dataa(dataa[52:27]),
	.datab(datab[52:27]),
	.overflow(),
	.result(wire_csa_upper0_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper0.lpm_direction = "ADD",
		csa_upper0.lpm_representation = "SIGNED",
		csa_upper0.lpm_width = 26,
		csa_upper0.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper1
	( 
	.cin(1'b1),
	.cout(),
	.dataa(dataa[52:27]),
	.datab(datab[52:27]),
	.overflow(),
	.result(wire_csa_upper1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper1.lpm_direction = "ADD",
		csa_upper1.lpm_representation = "SIGNED",
		csa_upper1.lpm_width = 26,
		csa_upper1.lpm_type = "lpm_add_sub";
	assign
		result = result_w,
		result_w = {(({26{(~ wire_csa_lower_cout)}} & wire_csa_upper0_result) | ({26{wire_csa_lower_cout}} & wire_csa_upper1_result)), wire_csa_lower_result};
endmodule //altfp_divider64_altfp_div_csa_92c


//altfp_div_csa CARRY_SELECT="YES" CBX_AUTO_BLACKBOX="ALL" DATAB_IS_CONSTANT="NO" LPM_DIRECTION="SUB" LPM_PIPELINE=1 LPM_WIDTH=56 aclr clken clock dataa datab result
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END

//synthesis_resources = lpm_add_sub 3 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_altfp_div_csa_k0f
	( 
	aclr,
	clken,
	clock,
	dataa,
	datab,
	result) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [55:0]  dataa;
	input   [55:0]  datab;
	output   [55:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
	tri0   [55:0]  dataa;
	tri0   [55:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_csa_lower_cout;
	wire  [27:0]   wire_csa_lower_result;
	wire  [27:0]   wire_csa_upper0_result;
	wire  [27:0]   wire_csa_upper1_result;
	wire  [55:0]  result_w;

	lpm_add_sub   csa_lower
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.cout(wire_csa_lower_cout),
	.dataa(dataa[27:0]),
	.datab(datab[27:0]),
	.overflow(),
	.result(wire_csa_lower_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1),
	.cin()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_lower.lpm_direction = "SUB",
		csa_lower.lpm_pipeline = 1,
		csa_lower.lpm_representation = "SIGNED",
		csa_lower.lpm_width = 28,
		csa_lower.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper0
	( 
	.aclr(aclr),
	.cin(1'b0),
	.clken(clken),
	.clock(clock),
	.cout(),
	.dataa(dataa[55:28]),
	.datab(datab[55:28]),
	.overflow(),
	.result(wire_csa_upper0_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper0.lpm_direction = "SUB",
		csa_upper0.lpm_pipeline = 1,
		csa_upper0.lpm_representation = "SIGNED",
		csa_upper0.lpm_width = 28,
		csa_upper0.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper1
	( 
	.aclr(aclr),
	.cin(1'b1),
	.clken(clken),
	.clock(clock),
	.cout(),
	.dataa(dataa[55:28]),
	.datab(datab[55:28]),
	.overflow(),
	.result(wire_csa_upper1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper1.lpm_direction = "SUB",
		csa_upper1.lpm_pipeline = 1,
		csa_upper1.lpm_representation = "SIGNED",
		csa_upper1.lpm_width = 28,
		csa_upper1.lpm_type = "lpm_add_sub";
	assign
		result = result_w,
		result_w = {(({28{(~ wire_csa_lower_cout)}} & wire_csa_upper0_result) | ({28{wire_csa_lower_cout}} & wire_csa_upper1_result)), wire_csa_lower_result};
endmodule //altfp_divider64_altfp_div_csa_k0f


//altfp_div_csa CARRY_SELECT="YES" CBX_AUTO_BLACKBOX="ALL" DATAB_IS_CONSTANT="NO" LPM_DIRECTION="SUB" LPM_WIDTH=56 dataa datab result
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END

//synthesis_resources = lpm_add_sub 3 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_altfp_div_csa_d3c
	( 
	dataa,
	datab,
	result) ;
	input   [55:0]  dataa;
	input   [55:0]  datab;
	output   [55:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [55:0]  dataa;
	tri0   [55:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_csa_lower_cout;
	wire  [27:0]   wire_csa_lower_result;
	wire  [27:0]   wire_csa_upper0_result;
	wire  [27:0]   wire_csa_upper1_result;
	wire  [55:0]  result_w;

	lpm_add_sub   csa_lower
	( 
	.cout(wire_csa_lower_cout),
	.dataa(dataa[27:0]),
	.datab(datab[27:0]),
	.overflow(),
	.result(wire_csa_lower_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_lower.lpm_direction = "SUB",
		csa_lower.lpm_representation = "SIGNED",
		csa_lower.lpm_width = 28,
		csa_lower.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper0
	( 
	.cin(1'b0),
	.cout(),
	.dataa(dataa[55:28]),
	.datab(datab[55:28]),
	.overflow(),
	.result(wire_csa_upper0_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper0.lpm_direction = "SUB",
		csa_upper0.lpm_representation = "SIGNED",
		csa_upper0.lpm_width = 28,
		csa_upper0.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper1
	( 
	.cin(1'b1),
	.cout(),
	.dataa(dataa[55:28]),
	.datab(datab[55:28]),
	.overflow(),
	.result(wire_csa_upper1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper1.lpm_direction = "SUB",
		csa_upper1.lpm_representation = "SIGNED",
		csa_upper1.lpm_width = 28,
		csa_upper1.lpm_type = "lpm_add_sub";
	assign
		result = result_w,
		result_w = {(({28{(~ wire_csa_lower_cout)}} & wire_csa_upper0_result) | ({28{wire_csa_lower_cout}} & wire_csa_upper1_result)), wire_csa_lower_result};
endmodule //altfp_divider64_altfp_div_csa_d3c


//srt_block_int CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone II" OPTIMIZE="SPEED" POSITION="FIRST" WIDTH_DIV=53 WIDTH_RK_IN=53 WIDTH_RK_OUT=54 WIDTH_ROM=3 WIDTH_ROM_ADD=12 aclr clken clock divider divider_reg Rk Rk_next rom
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END


//altfp_div_csa CARRY_SELECT="YES" CBX_AUTO_BLACKBOX="ALL" DATAB_IS_CONSTANT="NO" LPM_DIRECTION="ADD" LPM_WIDTH=56 dataa datab result
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END

//synthesis_resources = lpm_add_sub 3 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_altfp_div_csa_c2c
	( 
	dataa,
	datab,
	result) ;
	input   [55:0]  dataa;
	input   [55:0]  datab;
	output   [55:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [55:0]  dataa;
	tri0   [55:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_csa_lower_cout;
	wire  [27:0]   wire_csa_lower_result;
	wire  [27:0]   wire_csa_upper0_result;
	wire  [27:0]   wire_csa_upper1_result;
	wire  [55:0]  result_w;

	lpm_add_sub   csa_lower
	( 
	.cout(wire_csa_lower_cout),
	.dataa(dataa[27:0]),
	.datab(datab[27:0]),
	.overflow(),
	.result(wire_csa_lower_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_lower.lpm_direction = "ADD",
		csa_lower.lpm_representation = "SIGNED",
		csa_lower.lpm_width = 28,
		csa_lower.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper0
	( 
	.cin(1'b0),
	.cout(),
	.dataa(dataa[55:28]),
	.datab(datab[55:28]),
	.overflow(),
	.result(wire_csa_upper0_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper0.lpm_direction = "ADD",
		csa_upper0.lpm_representation = "SIGNED",
		csa_upper0.lpm_width = 28,
		csa_upper0.lpm_type = "lpm_add_sub";
	lpm_add_sub   csa_upper1
	( 
	.cin(1'b1),
	.cout(),
	.dataa(dataa[55:28]),
	.datab(datab[55:28]),
	.overflow(),
	.result(wire_csa_upper1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		csa_upper1.lpm_direction = "ADD",
		csa_upper1.lpm_representation = "SIGNED",
		csa_upper1.lpm_width = 28,
		csa_upper1.lpm_type = "lpm_add_sub";
	assign
		result = result_w,
		result_w = {(({28{(~ wire_csa_lower_cout)}} & wire_csa_upper0_result) | ({28{wire_csa_lower_cout}} & wire_csa_upper1_result)), wire_csa_lower_result};
endmodule //altfp_divider64_altfp_div_csa_c2c


//qds_block CBX_AUTO_BLACKBOX="ALL" FIRST_QDS="YES" aclr clken clock decoder_bus decoder_output
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END

//synthesis_resources = lpm_compare 4 lpm_mux 1 reg 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_qds_block_7o8
	( 
	aclr,
	clken,
	clock,
	decoder_bus,
	decoder_output) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [11:0]  decoder_bus;
	output   [2:0]  decoder_output;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[1:0]	q_next_dffe;
	wire  wire_cmpr49_aleb;
	wire  wire_cmpr50_aleb;
	wire  wire_cmpr51_aleb;
	wire  wire_cmpr52_aleb;
	wire  [31:0]   wire_mux48_result;
	wire  [2:0]  decoder_output_w;
	wire  [3:0]  Div_w;
	wire  [3:0]  k_comp_w;
	wire  [511:0]  mk_bus_const_w;
	wire  [31:0]  mk_bus_w;
	wire  [8:0]  mk_neg1_w;
	wire  [8:0]  mk_pos0_w;
	wire  [8:0]  mk_pos1_w;
	wire  [8:0]  mk_pos2_w;
	wire  [2:0]  q_next_w;
	wire  [8:0]  Rk_in_w;
	wire  [8:0]  Rk_w;

	// synopsys translate_off
	initial
		q_next_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) q_next_dffe <= 2'b0;
		else if  (clken == 1'b1)   q_next_dffe <= q_next_w[1:0];
	lpm_compare   cmpr49
	( 
	.aeb(),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(wire_cmpr49_aleb),
	.aneb(),
	.dataa(Rk_w),
	.datab(mk_neg1_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr49.lpm_representation = "SIGNED",
		cmpr49.lpm_width = 9,
		cmpr49.lpm_type = "lpm_compare";
	lpm_compare   cmpr50
	( 
	.aeb(),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(wire_cmpr50_aleb),
	.aneb(),
	.dataa(Rk_w),
	.datab(mk_pos0_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr50.lpm_representation = "SIGNED",
		cmpr50.lpm_width = 9,
		cmpr50.lpm_type = "lpm_compare";
	lpm_compare   cmpr51
	( 
	.aeb(),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(wire_cmpr51_aleb),
	.aneb(),
	.dataa(Rk_w),
	.datab(mk_pos1_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr51.lpm_representation = "SIGNED",
		cmpr51.lpm_width = 9,
		cmpr51.lpm_type = "lpm_compare";
	lpm_compare   cmpr52
	( 
	.aeb(),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(wire_cmpr52_aleb),
	.aneb(),
	.dataa(Rk_w),
	.datab(mk_pos2_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr52.lpm_representation = "SIGNED",
		cmpr52.lpm_width = 9,
		cmpr52.lpm_type = "lpm_compare";
	lpm_mux   mux48
	( 
	.data(mk_bus_const_w),
	.result(wire_mux48_result),
	.sel(Div_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		mux48.lpm_size = 16,
		mux48.lpm_width = 32,
		mux48.lpm_widths = 4,
		mux48.lpm_type = "lpm_mux";
	assign
		decoder_output = decoder_output_w,
		decoder_output_w = {1'b0, q_next_dffe},
		Div_w = decoder_bus[3:0],
		k_comp_w = {wire_cmpr52_aleb, wire_cmpr51_aleb, wire_cmpr50_aleb, wire_cmpr49_aleb},
		mk_bus_const_w = {32'b01011101000111111110000110100011, 32'b01011010000111101110001010100110, 32'b01010111000111011110001110101001, 32'b01010100000111001110010010101100, 32'b01010001000110111110010110101111, 32'b01001110000110101110011010110010, 32'b01001011000110011110011110110101, 32'b01001000000110001110100010111000, 32'b01000101000101111110100110111011, 32'b01000010000101101110101010111110, 32'b00111111000101011110101111000001, 32'b00111100000101001110110011000100, 32'b00111001000100111110110111000111, 32'b00110110000100101110111011001010, 32'b00110011000100011110111111001101, 32'b00110000000100001111000011010000},
		mk_bus_w = wire_mux48_result,
		mk_neg1_w = {mk_bus_w[7], mk_bus_w[7:0]},
		mk_pos0_w = {mk_bus_w[15], mk_bus_w[15:8]},
		mk_pos1_w = {mk_bus_w[23], mk_bus_w[23:16]},
		mk_pos2_w = {mk_bus_w[31], mk_bus_w[31:24]},
		q_next_w = {k_comp_w[1], ((~ k_comp_w[3]) | k_comp_w[0]), ((k_comp_w[3] & (~ k_comp_w[2])) | (k_comp_w[1] & (~ k_comp_w[0])))},
		Rk_in_w = {decoder_bus[11:4], 1'b0},
		Rk_w = Rk_in_w;
endmodule //altfp_divider64_qds_block_7o8

//synthesis_resources = lpm_add_sub 12 lpm_compare 4 lpm_mux 2 reg 429 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_srt_block_int_8fk
	( 
	aclr,
	clken,
	clock,
	divider,
	divider_reg,
	Rk,
	Rk_next,
	rom) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [52:0]  divider;
	output   [52:0]  divider_reg;
	input   [52:0]  Rk;
	output   [53:0]  Rk_next;
	output   [2:0]  rom;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [55:0]   wire_altfp_div_csa43_result;
	wire  [55:0]   wire_altfp_div_csa44_result;
	wire  [55:0]   wire_altfp_div_csa45_result;
	wire  [55:0]   wire_altfp_div_csa46_result;
	reg	[51:0]	divider_dffe;
	reg	[51:0]	divider_dffe_1a;
	reg	[53:0]	neg_qk1d_dffe;
	reg	[53:0]	neg_qk2d_dffe;
	reg	[53:0]	pos_qk1d_dffe;
	reg	[53:0]	pos_qk2d_dffe;
	reg	[49:0]	Rk_adder_padded_dffe;
	reg	[53:0]	Rk_next_dffe;
	reg	[2:0]	rom_out_dffe;
	wire  [53:0]   wire_mux47_result;
	wire  [2:0]   wire_qds_block42_decoder_output;
	wire  [55:0]  divider_1D_w;
	wire  [55:0]  divider_2D_w;
	wire  [51:0]  divider_dffe_1a_w;
	wire  [52:0]  divider_dffe_w;
	wire  [52:0]  divider_in_w;
	wire  [53:0]  neg_qk1d_int_w;
	wire  [53:0]  neg_qk2d_int_w;
	wire  [1:0]  padded_2_zeros_w;
	wire  [2:0]  padded_3_zeros_w;
	wire  [53:0]  pos_qk0d_int_w;
	wire  [53:0]  pos_qk1d_int_w;
	wire  [53:0]  pos_qk2d_int_w;
	wire  [431:0]  qkd_mux_input_w;
	wire  [53:0]  qkd_mux_w;
	wire  [55:0]  Rk_adder_padded_w;
	wire  [52:0]  Rk_dffe_1a_w;
	wire  [52:0]  Rk_in_w;
	wire  [53:0]  Rk_next_dffe_w;
	wire  [11:0]  rom_add_w;
	wire  [2:0]  rom_mux_w;
	wire  [2:0]  rom_out_1a_w;
	wire  [2:0]  rom_out_dffe_w;

	altfp_divider64_altfp_div_csa_c2c   altfp_div_csa43
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_1D_w),
	.result(wire_altfp_div_csa43_result));
	altfp_divider64_altfp_div_csa_c2c   altfp_div_csa44
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_2D_w),
	.result(wire_altfp_div_csa44_result));
	altfp_divider64_altfp_div_csa_d3c   altfp_div_csa45
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_1D_w),
	.result(wire_altfp_div_csa45_result));
	altfp_divider64_altfp_div_csa_d3c   altfp_div_csa46
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_2D_w),
	.result(wire_altfp_div_csa46_result));
	// synopsys translate_off
	initial
		divider_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divider_dffe <= 52'b0;
		else if  (clken == 1'b1)   divider_dffe <= divider_dffe_1a_w;
	// synopsys translate_off
	initial
		divider_dffe_1a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divider_dffe_1a <= 52'b0;
		else if  (clken == 1'b1)   divider_dffe_1a <= divider_in_w[51:0];
	// synopsys translate_off
	initial
		neg_qk1d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) neg_qk1d_dffe <= 54'b0;
		else if  (clken == 1'b1)   neg_qk1d_dffe <= wire_altfp_div_csa45_result[53:0];
	// synopsys translate_off
	initial
		neg_qk2d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) neg_qk2d_dffe <= 54'b0;
		else if  (clken == 1'b1)   neg_qk2d_dffe <= wire_altfp_div_csa46_result[53:0];
	// synopsys translate_off
	initial
		pos_qk1d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pos_qk1d_dffe <= 54'b0;
		else if  (clken == 1'b1)   pos_qk1d_dffe <= wire_altfp_div_csa43_result[53:0];
	// synopsys translate_off
	initial
		pos_qk2d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pos_qk2d_dffe <= 54'b0;
		else if  (clken == 1'b1)   pos_qk2d_dffe <= wire_altfp_div_csa44_result[53:0];
	// synopsys translate_off
	initial
		Rk_adder_padded_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) Rk_adder_padded_dffe <= 50'b0;
		else if  (clken == 1'b1)   Rk_adder_padded_dffe <= Rk_adder_padded_w[49:0];
	// synopsys translate_off
	initial
		Rk_next_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) Rk_next_dffe <= 54'b0;
		else if  (clken == 1'b1)   Rk_next_dffe <= qkd_mux_w;
	// synopsys translate_off
	initial
		rom_out_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_out_dffe <= 3'b0;
		else if  (clken == 1'b1)   rom_out_dffe <= rom_out_1a_w;
	lpm_mux   mux47
	( 
	.data(qkd_mux_input_w),
	.result(wire_mux47_result),
	.sel(rom_mux_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		mux47.lpm_size = 8,
		mux47.lpm_width = 54,
		mux47.lpm_widths = 3,
		mux47.lpm_type = "lpm_mux";
	altfp_divider64_qds_block_7o8   qds_block42
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.decoder_bus(rom_add_w),
	.decoder_output(wire_qds_block42_decoder_output));
	assign
		divider_1D_w = {padded_3_zeros_w, divider_in_w},
		divider_2D_w = {padded_2_zeros_w, divider_in_w, 1'b0},
		divider_dffe_1a_w = divider_dffe_1a,
		divider_dffe_w = {1'b1, divider_dffe},
		divider_in_w = divider,
		divider_reg = divider_dffe_w,
		neg_qk1d_int_w = neg_qk1d_dffe,
		neg_qk2d_int_w = neg_qk2d_dffe,
		padded_2_zeros_w = {2{1'b0}},
		padded_3_zeros_w = {3{1'b0}},
		pos_qk0d_int_w = {padded_3_zeros_w, 1'b1, Rk_adder_padded_dffe[49:0]},
		pos_qk1d_int_w = pos_qk1d_dffe,
		pos_qk2d_int_w = pos_qk2d_dffe,
		qkd_mux_input_w = {{2{pos_qk2d_int_w}}, pos_qk1d_int_w, pos_qk0d_int_w, {2{neg_qk2d_int_w}}, neg_qk1d_int_w, pos_qk0d_int_w},
		qkd_mux_w = wire_mux47_result[53:0],
		Rk_adder_padded_w = {padded_3_zeros_w, Rk_dffe_1a_w},
		Rk_dffe_1a_w = Rk_in_w,
		Rk_in_w = Rk,
		Rk_next = Rk_next_dffe_w,
		Rk_next_dffe_w = Rk_next_dffe,
		rom = rom_out_dffe_w,
		rom_add_w = {padded_3_zeros_w, Rk_in_w[52:48], divider_in_w[51:48]},
		rom_mux_w = rom_out_1a_w,
		rom_out_1a_w = wire_qds_block42_decoder_output,
		rom_out_dffe_w = rom_out_dffe;
endmodule //altfp_divider64_srt_block_int_8fk


//srt_block_int CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone II" OPTIMIZE="SPEED" POSITION="MIDDLE" WIDTH_DIV=53 WIDTH_RK_IN=54 WIDTH_RK_OUT=54 WIDTH_ROM=3 WIDTH_ROM_ADD=12 aclr clken clock divider divider_reg Rk Rk_next rom
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END


//qds_block CBX_AUTO_BLACKBOX="ALL" aclr clken clock decoder_bus decoder_output
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END

//synthesis_resources = lpm_compare 4 lpm_mux 1 reg 3 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_qds_block_6a7
	( 
	aclr,
	clken,
	clock,
	decoder_bus,
	decoder_output) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [11:0]  decoder_bus;
	output   [2:0]  decoder_output;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[2:0]	q_next_dffe;
	wire  wire_cmpr60_aleb;
	wire  wire_cmpr61_aleb;
	wire  wire_cmpr62_aleb;
	wire  wire_cmpr63_aleb;
	wire  [31:0]   wire_mux59_result;
	wire  [2:0]  decoder_output_w;
	wire  [3:0]  Div_w;
	wire  [3:0]  k_comp_w;
	wire  [511:0]  mk_bus_const_w;
	wire  [31:0]  mk_bus_w;
	wire  [8:0]  mk_neg1_w;
	wire  [8:0]  mk_pos0_w;
	wire  [8:0]  mk_pos1_w;
	wire  [8:0]  mk_pos2_w;
	wire  [2:0]  q_next_w;
	wire  [8:0]  Rk_in_w;
	wire  [8:0]  Rk_w;

	// synopsys translate_off
	initial
		q_next_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) q_next_dffe <= 3'b0;
		else if  (clken == 1'b1)   q_next_dffe <= q_next_w;
	lpm_compare   cmpr60
	( 
	.aeb(),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(wire_cmpr60_aleb),
	.aneb(),
	.dataa(Rk_w),
	.datab(mk_neg1_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr60.lpm_representation = "SIGNED",
		cmpr60.lpm_width = 9,
		cmpr60.lpm_type = "lpm_compare";
	lpm_compare   cmpr61
	( 
	.aeb(),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(wire_cmpr61_aleb),
	.aneb(),
	.dataa(Rk_w),
	.datab(mk_pos0_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr61.lpm_representation = "SIGNED",
		cmpr61.lpm_width = 9,
		cmpr61.lpm_type = "lpm_compare";
	lpm_compare   cmpr62
	( 
	.aeb(),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(wire_cmpr62_aleb),
	.aneb(),
	.dataa(Rk_w),
	.datab(mk_pos1_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr62.lpm_representation = "SIGNED",
		cmpr62.lpm_width = 9,
		cmpr62.lpm_type = "lpm_compare";
	lpm_compare   cmpr63
	( 
	.aeb(),
	.agb(),
	.ageb(),
	.alb(),
	.aleb(wire_cmpr63_aleb),
	.aneb(),
	.dataa(Rk_w),
	.datab(mk_pos2_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr63.lpm_representation = "SIGNED",
		cmpr63.lpm_width = 9,
		cmpr63.lpm_type = "lpm_compare";
	lpm_mux   mux59
	( 
	.data(mk_bus_const_w),
	.result(wire_mux59_result),
	.sel(Div_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		mux59.lpm_size = 16,
		mux59.lpm_width = 32,
		mux59.lpm_widths = 4,
		mux59.lpm_type = "lpm_mux";
	assign
		decoder_output = decoder_output_w,
		decoder_output_w = q_next_dffe,
		Div_w = decoder_bus[3:0],
		k_comp_w = {wire_cmpr63_aleb, wire_cmpr62_aleb, wire_cmpr61_aleb, wire_cmpr60_aleb},
		mk_bus_const_w = {32'b01011101000111111110000110100011, 32'b01011010000111101110001010100110, 32'b01010111000111011110001110101001, 32'b01010100000111001110010010101100, 32'b01010001000110111110010110101111, 32'b01001110000110101110011010110010, 32'b01001011000110011110011110110101, 32'b01001000000110001110100010111000, 32'b01000101000101111110100110111011, 32'b01000010000101101110101010111110, 32'b00111111000101011110101111000001, 32'b00111100000101001110110011000100, 32'b00111001000100111110110111000111, 32'b00110110000100101110111011001010, 32'b00110011000100011110111111001101, 32'b00110000000100001111000011010000},
		mk_bus_w = wire_mux59_result,
		mk_neg1_w = {mk_bus_w[7], mk_bus_w[7:0]},
		mk_pos0_w = {mk_bus_w[15], mk_bus_w[15:8]},
		mk_pos1_w = {mk_bus_w[23], mk_bus_w[23:16]},
		mk_pos2_w = {mk_bus_w[31], mk_bus_w[31:24]},
		q_next_w = {k_comp_w[1], ((~ k_comp_w[3]) | k_comp_w[0]), ((k_comp_w[3] & (~ k_comp_w[2])) | (k_comp_w[1] & (~ k_comp_w[0])))},
		Rk_in_w = {decoder_bus[11:4], 1'b0},
		Rk_w = Rk_in_w;
endmodule //altfp_divider64_qds_block_6a7

//synthesis_resources = lpm_add_sub 12 lpm_compare 4 lpm_mux 2 reg 432 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_srt_block_int_ghk
	( 
	aclr,
	clken,
	clock,
	divider,
	divider_reg,
	Rk,
	Rk_next,
	rom) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [52:0]  divider;
	output   [52:0]  divider_reg;
	input   [53:0]  Rk;
	output   [53:0]  Rk_next;
	output   [2:0]  rom;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [55:0]   wire_altfp_div_csa54_result;
	wire  [55:0]   wire_altfp_div_csa55_result;
	wire  [55:0]   wire_altfp_div_csa56_result;
	wire  [55:0]   wire_altfp_div_csa57_result;
	reg	[51:0]	divider_dffe;
	reg	[51:0]	divider_dffe_1a;
	reg	[53:0]	neg_qk1d_dffe;
	reg	[52:0]	neg_qk2d_dffe;
	reg	[53:0]	pos_qk1d_dffe;
	reg	[52:0]	pos_qk2d_dffe;
	reg	[53:0]	Rk_adder_padded_dffe;
	reg	[53:0]	Rk_next_dffe;
	reg	[2:0]	rom_out_dffe;
	wire  [53:0]   wire_mux58_result;
	wire  [2:0]   wire_qds_block53_decoder_output;
	wire  [55:0]  divider_1D_w;
	wire  [55:0]  divider_2D_w;
	wire  [51:0]  divider_dffe_1a_w;
	wire  [52:0]  divider_dffe_w;
	wire  [52:0]  divider_in_w;
	wire  [53:0]  neg_qk1d_int_w;
	wire  [53:0]  neg_qk2d_int_w;
	wire  [1:0]  padded_2_zeros_w;
	wire  [2:0]  padded_3_zeros_w;
	wire  [53:0]  pos_qk0d_int_w;
	wire  [53:0]  pos_qk1d_int_w;
	wire  [53:0]  pos_qk2d_int_w;
	wire  [431:0]  qkd_mux_input_w;
	wire  [53:0]  qkd_mux_w;
	wire  [55:0]  Rk_adder_padded_w;
	wire  [53:0]  Rk_dffe_1a_w;
	wire  [53:0]  Rk_in_w;
	wire  [53:0]  Rk_next_dffe_w;
	wire  [11:0]  rom_add_w;
	wire  [2:0]  rom_mux_w;
	wire  [2:0]  rom_out_1a_w;
	wire  [2:0]  rom_out_dffe_w;

	altfp_divider64_altfp_div_csa_c2c   altfp_div_csa54
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_1D_w),
	.result(wire_altfp_div_csa54_result));
	altfp_divider64_altfp_div_csa_c2c   altfp_div_csa55
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_2D_w),
	.result(wire_altfp_div_csa55_result));
	altfp_divider64_altfp_div_csa_d3c   altfp_div_csa56
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_1D_w),
	.result(wire_altfp_div_csa56_result));
	altfp_divider64_altfp_div_csa_d3c   altfp_div_csa57
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_2D_w),
	.result(wire_altfp_div_csa57_result));
	// synopsys translate_off
	initial
		divider_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divider_dffe <= 52'b0;
		else if  (clken == 1'b1)   divider_dffe <= divider_dffe_1a_w;
	// synopsys translate_off
	initial
		divider_dffe_1a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divider_dffe_1a <= 52'b0;
		else if  (clken == 1'b1)   divider_dffe_1a <= divider_in_w[51:0];
	// synopsys translate_off
	initial
		neg_qk1d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) neg_qk1d_dffe <= 54'b0;
		else if  (clken == 1'b1)   neg_qk1d_dffe <= wire_altfp_div_csa56_result[53:0];
	// synopsys translate_off
	initial
		neg_qk2d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) neg_qk2d_dffe <= 53'b0;
		else if  (clken == 1'b1)   neg_qk2d_dffe <= wire_altfp_div_csa57_result[53:1];
	// synopsys translate_off
	initial
		pos_qk1d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pos_qk1d_dffe <= 54'b0;
		else if  (clken == 1'b1)   pos_qk1d_dffe <= wire_altfp_div_csa54_result[53:0];
	// synopsys translate_off
	initial
		pos_qk2d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pos_qk2d_dffe <= 53'b0;
		else if  (clken == 1'b1)   pos_qk2d_dffe <= wire_altfp_div_csa55_result[53:1];
	// synopsys translate_off
	initial
		Rk_adder_padded_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) Rk_adder_padded_dffe <= 54'b0;
		else if  (clken == 1'b1)   Rk_adder_padded_dffe <= Rk_adder_padded_w[55:2];
	// synopsys translate_off
	initial
		Rk_next_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) Rk_next_dffe <= 54'b0;
		else if  (clken == 1'b1)   Rk_next_dffe <= qkd_mux_w;
	// synopsys translate_off
	initial
		rom_out_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_out_dffe <= 3'b0;
		else if  (clken == 1'b1)   rom_out_dffe <= rom_out_1a_w;
	lpm_mux   mux58
	( 
	.data(qkd_mux_input_w),
	.result(wire_mux58_result),
	.sel(rom_mux_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		mux58.lpm_size = 8,
		mux58.lpm_width = 54,
		mux58.lpm_widths = 3,
		mux58.lpm_type = "lpm_mux";
	altfp_divider64_qds_block_6a7   qds_block53
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.decoder_bus(rom_add_w),
	.decoder_output(wire_qds_block53_decoder_output));
	assign
		divider_1D_w = {padded_3_zeros_w, divider_in_w},
		divider_2D_w = {padded_2_zeros_w, divider_in_w, 1'b0},
		divider_dffe_1a_w = divider_dffe_1a,
		divider_dffe_w = {1'b1, divider_dffe},
		divider_in_w = divider,
		divider_reg = divider_dffe_w,
		neg_qk1d_int_w = neg_qk1d_dffe,
		neg_qk2d_int_w = {neg_qk2d_dffe, 1'b0},
		padded_2_zeros_w = {2{1'b0}},
		padded_3_zeros_w = {3{1'b0}},
		pos_qk0d_int_w = {Rk_adder_padded_dffe[51:0], padded_2_zeros_w},
		pos_qk1d_int_w = pos_qk1d_dffe,
		pos_qk2d_int_w = {pos_qk2d_dffe, 1'b0},
		qkd_mux_input_w = {{2{pos_qk2d_int_w}}, pos_qk1d_int_w, pos_qk0d_int_w, {2{neg_qk2d_int_w}}, neg_qk1d_int_w, pos_qk0d_int_w},
		qkd_mux_w = wire_mux58_result[53:0],
		Rk_adder_padded_w = {Rk_dffe_1a_w, padded_2_zeros_w},
		Rk_dffe_1a_w = Rk_in_w,
		Rk_in_w = Rk,
		Rk_next = Rk_next_dffe_w,
		Rk_next_dffe_w = Rk_next_dffe,
		rom = rom_out_dffe_w,
		rom_add_w = {Rk_in_w[53:46], divider_in_w[51:48]},
		rom_mux_w = rom_out_1a_w,
		rom_out_1a_w = wire_qds_block53_decoder_output,
		rom_out_dffe_w = rom_out_dffe;
endmodule //altfp_divider64_srt_block_int_ghk


//srt_block_int CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone II" OPTIMIZE="SPEED" POSITION="LAST" WIDTH_DIV=53 WIDTH_RK_IN=54 WIDTH_RK_OUT=56 WIDTH_ROM=3 WIDTH_ROM_ADD=12 aclr clken clock divider divider_reg Rk Rk_next rom
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_div 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mult 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_padd 2012:05:31:20:23:38:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END

//synthesis_resources = lpm_add_sub 12 lpm_compare 4 lpm_mux 2 reg 333 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_srt_block_int_nbk
	( 
	aclr,
	clken,
	clock,
	divider,
	divider_reg,
	Rk,
	Rk_next,
	rom) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [52:0]  divider;
	output   [52:0]  divider_reg;
	input   [53:0]  Rk;
	output   [55:0]  Rk_next;
	output   [2:0]  rom;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [55:0]   wire_altfp_div_csa65_result;
	wire  [55:0]   wire_altfp_div_csa66_result;
	wire  [55:0]   wire_altfp_div_csa67_result;
	wire  [55:0]   wire_altfp_div_csa68_result;
	reg	[51:0]	divider_dffe_1a;
	reg	[55:0]	neg_qk1d_dffe;
	reg	[55:0]	neg_qk2d_dffe;
	reg	[55:0]	pos_qk1d_dffe;
	reg	[55:0]	pos_qk2d_dffe;
	reg	[53:0]	Rk_adder_padded_dffe;
	wire  [55:0]   wire_mux69_result;
	wire  [2:0]   wire_qds_block64_decoder_output;
	wire  [55:0]  divider_1D_w;
	wire  [55:0]  divider_2D_w;
	wire  [51:0]  divider_dffe_1a_w;
	wire  [52:0]  divider_dffe_w;
	wire  [52:0]  divider_in_w;
	wire  [55:0]  neg_qk1d_int_w;
	wire  [55:0]  neg_qk2d_int_w;
	wire  [1:0]  padded_2_zeros_w;
	wire  [2:0]  padded_3_zeros_w;
	wire  [55:0]  pos_qk0d_int_w;
	wire  [55:0]  pos_qk1d_int_w;
	wire  [55:0]  pos_qk2d_int_w;
	wire  [447:0]  qkd_mux_input_w;
	wire  [55:0]  qkd_mux_w;
	wire  [55:0]  Rk_adder_padded_w;
	wire  [53:0]  Rk_dffe_1a_w;
	wire  [53:0]  Rk_in_w;
	wire  [55:0]  Rk_next_dffe_w;
	wire  [11:0]  rom_add_w;
	wire  [2:0]  rom_mux_w;
	wire  [2:0]  rom_out_1a_w;
	wire  [2:0]  rom_out_dffe_w;

	altfp_divider64_altfp_div_csa_c2c   altfp_div_csa65
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_1D_w),
	.result(wire_altfp_div_csa65_result));
	altfp_divider64_altfp_div_csa_c2c   altfp_div_csa66
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_2D_w),
	.result(wire_altfp_div_csa66_result));
	altfp_divider64_altfp_div_csa_d3c   altfp_div_csa67
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_1D_w),
	.result(wire_altfp_div_csa67_result));
	altfp_divider64_altfp_div_csa_d3c   altfp_div_csa68
	( 
	.dataa(Rk_adder_padded_w),
	.datab(divider_2D_w),
	.result(wire_altfp_div_csa68_result));
	// synopsys translate_off
	initial
		divider_dffe_1a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divider_dffe_1a <= 52'b0;
		else if  (clken == 1'b1)   divider_dffe_1a <= divider_in_w[51:0];
	// synopsys translate_off
	initial
		neg_qk1d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) neg_qk1d_dffe <= 56'b0;
		else if  (clken == 1'b1)   neg_qk1d_dffe <= wire_altfp_div_csa67_result[55:0];
	// synopsys translate_off
	initial
		neg_qk2d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) neg_qk2d_dffe <= 56'b0;
		else if  (clken == 1'b1)   neg_qk2d_dffe <= wire_altfp_div_csa68_result[55:0];
	// synopsys translate_off
	initial
		pos_qk1d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pos_qk1d_dffe <= 56'b0;
		else if  (clken == 1'b1)   pos_qk1d_dffe <= wire_altfp_div_csa65_result[55:0];
	// synopsys translate_off
	initial
		pos_qk2d_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) pos_qk2d_dffe <= 56'b0;
		else if  (clken == 1'b1)   pos_qk2d_dffe <= wire_altfp_div_csa66_result[55:0];
	// synopsys translate_off
	initial
		Rk_adder_padded_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) Rk_adder_padded_dffe <= 54'b0;
		else if  (clken == 1'b1)   Rk_adder_padded_dffe <= Rk_adder_padded_w[55:2];
	lpm_mux   mux69
	( 
	.data(qkd_mux_input_w),
	.result(wire_mux69_result),
	.sel(rom_mux_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		mux69.lpm_size = 8,
		mux69.lpm_width = 56,
		mux69.lpm_widths = 3,
		mux69.lpm_type = "lpm_mux";
	altfp_divider64_qds_block_6a7   qds_block64
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.decoder_bus(rom_add_w),
	.decoder_output(wire_qds_block64_decoder_output));
	assign
		divider_1D_w = {padded_3_zeros_w, divider_in_w},
		divider_2D_w = {padded_2_zeros_w, divider_in_w, 1'b0},
		divider_dffe_1a_w = divider_dffe_1a,
		divider_dffe_w = {1'b1, divider_dffe_1a_w},
		divider_in_w = divider,
		divider_reg = divider_dffe_w,
		neg_qk1d_int_w = neg_qk1d_dffe,
		neg_qk2d_int_w = neg_qk2d_dffe,
		padded_2_zeros_w = {2{1'b0}},
		padded_3_zeros_w = {3{1'b0}},
		pos_qk0d_int_w = {Rk_adder_padded_dffe[53:0], padded_2_zeros_w},
		pos_qk1d_int_w = pos_qk1d_dffe,
		pos_qk2d_int_w = pos_qk2d_dffe,
		qkd_mux_input_w = {{2{pos_qk2d_int_w}}, pos_qk1d_int_w, pos_qk0d_int_w, {2{neg_qk2d_int_w}}, neg_qk1d_int_w, pos_qk0d_int_w},
		qkd_mux_w = wire_mux69_result[55:0],
		Rk_adder_padded_w = {Rk_dffe_1a_w, padded_2_zeros_w},
		Rk_dffe_1a_w = Rk_in_w,
		Rk_in_w = Rk,
		Rk_next = Rk_next_dffe_w,
		Rk_next_dffe_w = qkd_mux_w,
		rom = rom_out_dffe_w,
		rom_add_w = {Rk_in_w[53:46], divider_in_w[51:48]},
		rom_mux_w = rom_out_1a_w,
		rom_out_1a_w = wire_qds_block64_decoder_output,
		rom_out_dffe_w = rom_out_1a_w;
endmodule //altfp_divider64_srt_block_int_nbk

//synthesis_resources = lpm_add_sub 345 lpm_compare 112 lpm_mux 56 reg 14237 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_altfp_div_srt_ext_e3f
	( 
	aclr,
	clken,
	clock,
	denom,
	divider,
	numer,
	quotient,
	remain) ;
	input   aclr;
	input   clken;
	input   clock;
	input   [52:0]  denom;
	output   [52:0]  divider;
	input   [52:0]  numer;
	output   [55:0]  quotient;
	output   [52:0]  remain;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   clken;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [52:0]   wire_altfp_div_csa39_result;
	wire  [55:0]   wire_altfp_div_csa40_result;
	wire  [55:0]   wire_altfp_div_csa41_result;
	reg	[52:0]	divider_next_special_dffe;
	reg	[55:0]	Rk_remainder_special_dffe;
	reg	[105:0]	rom_reg_dffe0c;
	reg	[98:0]	rom_reg_dffe10c;
	reg	[92:0]	rom_reg_dffe11c;
	reg	[86:0]	rom_reg_dffe12c;
	reg	[80:0]	rom_reg_dffe13c;
	reg	[74:0]	rom_reg_dffe14c;
	reg	[68:0]	rom_reg_dffe15c;
	reg	[62:0]	rom_reg_dffe16c;
	reg	[56:0]	rom_reg_dffe17c;
	reg	[50:0]	rom_reg_dffe18c;
	reg	[44:0]	rom_reg_dffe19c;
	reg	[152:0]	rom_reg_dffe1c;
	reg	[38:0]	rom_reg_dffe20c;
	reg	[32:0]	rom_reg_dffe21c;
	reg	[26:0]	rom_reg_dffe22c;
	reg	[20:0]	rom_reg_dffe23c;
	reg	[14:0]	rom_reg_dffe24c;
	reg	[8:0]	rom_reg_dffe25c;
	reg	[2:0]	rom_reg_dffe26c;
	reg	[146:0]	rom_reg_dffe2c;
	reg	[140:0]	rom_reg_dffe3c;
	reg	[134:0]	rom_reg_dffe4c;
	reg	[128:0]	rom_reg_dffe5c;
	reg	[122:0]	rom_reg_dffe6c;
	reg	[116:0]	rom_reg_dffe7c;
	reg	[110:0]	rom_reg_dffe8c;
	reg	[104:0]	rom_reg_dffe9c;
	wire  [52:0]   wire_srt_block_int11_divider_reg;
	wire  [53:0]   wire_srt_block_int11_Rk_next;
	wire  [2:0]   wire_srt_block_int11_rom;
	wire  [52:0]   wire_srt_block_int12_divider_reg;
	wire  [53:0]   wire_srt_block_int12_Rk_next;
	wire  [2:0]   wire_srt_block_int12_rom;
	wire  [52:0]   wire_srt_block_int13_divider_reg;
	wire  [53:0]   wire_srt_block_int13_Rk_next;
	wire  [2:0]   wire_srt_block_int13_rom;
	wire  [52:0]   wire_srt_block_int14_divider_reg;
	wire  [53:0]   wire_srt_block_int14_Rk_next;
	wire  [2:0]   wire_srt_block_int14_rom;
	wire  [52:0]   wire_srt_block_int15_divider_reg;
	wire  [53:0]   wire_srt_block_int15_Rk_next;
	wire  [2:0]   wire_srt_block_int15_rom;
	wire  [52:0]   wire_srt_block_int16_divider_reg;
	wire  [53:0]   wire_srt_block_int16_Rk_next;
	wire  [2:0]   wire_srt_block_int16_rom;
	wire  [52:0]   wire_srt_block_int17_divider_reg;
	wire  [53:0]   wire_srt_block_int17_Rk_next;
	wire  [2:0]   wire_srt_block_int17_rom;
	wire  [52:0]   wire_srt_block_int18_divider_reg;
	wire  [53:0]   wire_srt_block_int18_Rk_next;
	wire  [2:0]   wire_srt_block_int18_rom;
	wire  [52:0]   wire_srt_block_int19_divider_reg;
	wire  [53:0]   wire_srt_block_int19_Rk_next;
	wire  [2:0]   wire_srt_block_int19_rom;
	wire  [52:0]   wire_srt_block_int20_divider_reg;
	wire  [53:0]   wire_srt_block_int20_Rk_next;
	wire  [2:0]   wire_srt_block_int20_rom;
	wire  [52:0]   wire_srt_block_int21_divider_reg;
	wire  [53:0]   wire_srt_block_int21_Rk_next;
	wire  [2:0]   wire_srt_block_int21_rom;
	wire  [52:0]   wire_srt_block_int22_divider_reg;
	wire  [53:0]   wire_srt_block_int22_Rk_next;
	wire  [2:0]   wire_srt_block_int22_rom;
	wire  [52:0]   wire_srt_block_int23_divider_reg;
	wire  [53:0]   wire_srt_block_int23_Rk_next;
	wire  [2:0]   wire_srt_block_int23_rom;
	wire  [52:0]   wire_srt_block_int24_divider_reg;
	wire  [53:0]   wire_srt_block_int24_Rk_next;
	wire  [2:0]   wire_srt_block_int24_rom;
	wire  [52:0]   wire_srt_block_int25_divider_reg;
	wire  [53:0]   wire_srt_block_int25_Rk_next;
	wire  [2:0]   wire_srt_block_int25_rom;
	wire  [52:0]   wire_srt_block_int26_divider_reg;
	wire  [53:0]   wire_srt_block_int26_Rk_next;
	wire  [2:0]   wire_srt_block_int26_rom;
	wire  [52:0]   wire_srt_block_int27_divider_reg;
	wire  [53:0]   wire_srt_block_int27_Rk_next;
	wire  [2:0]   wire_srt_block_int27_rom;
	wire  [52:0]   wire_srt_block_int28_divider_reg;
	wire  [53:0]   wire_srt_block_int28_Rk_next;
	wire  [2:0]   wire_srt_block_int28_rom;
	wire  [52:0]   wire_srt_block_int29_divider_reg;
	wire  [53:0]   wire_srt_block_int29_Rk_next;
	wire  [2:0]   wire_srt_block_int29_rom;
	wire  [52:0]   wire_srt_block_int30_divider_reg;
	wire  [53:0]   wire_srt_block_int30_Rk_next;
	wire  [2:0]   wire_srt_block_int30_rom;
	wire  [52:0]   wire_srt_block_int31_divider_reg;
	wire  [53:0]   wire_srt_block_int31_Rk_next;
	wire  [2:0]   wire_srt_block_int31_rom;
	wire  [52:0]   wire_srt_block_int32_divider_reg;
	wire  [53:0]   wire_srt_block_int32_Rk_next;
	wire  [2:0]   wire_srt_block_int32_rom;
	wire  [52:0]   wire_srt_block_int33_divider_reg;
	wire  [53:0]   wire_srt_block_int33_Rk_next;
	wire  [2:0]   wire_srt_block_int33_rom;
	wire  [52:0]   wire_srt_block_int34_divider_reg;
	wire  [53:0]   wire_srt_block_int34_Rk_next;
	wire  [2:0]   wire_srt_block_int34_rom;
	wire  [52:0]   wire_srt_block_int35_divider_reg;
	wire  [53:0]   wire_srt_block_int35_Rk_next;
	wire  [2:0]   wire_srt_block_int35_rom;
	wire  [52:0]   wire_srt_block_int36_divider_reg;
	wire  [53:0]   wire_srt_block_int36_Rk_next;
	wire  [2:0]   wire_srt_block_int36_rom;
	wire  [52:0]   wire_srt_block_int37_divider_reg;
	wire  [53:0]   wire_srt_block_int37_Rk_next;
	wire  [2:0]   wire_srt_block_int37_rom;
	wire  [52:0]   wire_srt_block_int38_divider_reg;
	wire  [55:0]   wire_srt_block_int38_Rk_next;
	wire  [2:0]   wire_srt_block_int38_rom;
	wire  [52:0]  added_remainder_w;
	wire  [52:0]  divider_dffe_w;
	wire  [52:0]  divider_next_special_w;
	wire  [52:0]  divider_next_w0c;
	wire  [52:0]  divider_next_w10c;
	wire  [52:0]  divider_next_w11c;
	wire  [52:0]  divider_next_w12c;
	wire  [52:0]  divider_next_w13c;
	wire  [52:0]  divider_next_w14c;
	wire  [52:0]  divider_next_w15c;
	wire  [52:0]  divider_next_w16c;
	wire  [52:0]  divider_next_w17c;
	wire  [52:0]  divider_next_w18c;
	wire  [52:0]  divider_next_w19c;
	wire  [52:0]  divider_next_w1c;
	wire  [52:0]  divider_next_w20c;
	wire  [52:0]  divider_next_w21c;
	wire  [52:0]  divider_next_w22c;
	wire  [52:0]  divider_next_w23c;
	wire  [52:0]  divider_next_w24c;
	wire  [52:0]  divider_next_w25c;
	wire  [52:0]  divider_next_w26c;
	wire  [52:0]  divider_next_w27c;
	wire  [52:0]  divider_next_w2c;
	wire  [52:0]  divider_next_w3c;
	wire  [52:0]  divider_next_w4c;
	wire  [52:0]  divider_next_w5c;
	wire  [52:0]  divider_next_w6c;
	wire  [52:0]  divider_next_w7c;
	wire  [52:0]  divider_next_w8c;
	wire  [52:0]  divider_next_w9c;
	wire  [52:0]  divider_w;
	wire  [55:0]  full_neg_rom_w;
	wire  [55:0]  full_pos_rom_w;
	wire  mux_remainder_w;
	wire  [1:0]  neg_rom_w0c;
	wire  [1:0]  neg_rom_w10c;
	wire  [1:0]  neg_rom_w11c;
	wire  [1:0]  neg_rom_w12c;
	wire  [1:0]  neg_rom_w13c;
	wire  [1:0]  neg_rom_w14c;
	wire  [1:0]  neg_rom_w15c;
	wire  [1:0]  neg_rom_w16c;
	wire  [1:0]  neg_rom_w17c;
	wire  [1:0]  neg_rom_w18c;
	wire  [1:0]  neg_rom_w19c;
	wire  [1:0]  neg_rom_w1c;
	wire  [1:0]  neg_rom_w20c;
	wire  [1:0]  neg_rom_w21c;
	wire  [1:0]  neg_rom_w22c;
	wire  [1:0]  neg_rom_w23c;
	wire  [1:0]  neg_rom_w24c;
	wire  [1:0]  neg_rom_w25c;
	wire  [1:0]  neg_rom_w26c;
	wire  [1:0]  neg_rom_w27c;
	wire  [1:0]  neg_rom_w2c;
	wire  [1:0]  neg_rom_w3c;
	wire  [1:0]  neg_rom_w4c;
	wire  [1:0]  neg_rom_w5c;
	wire  [1:0]  neg_rom_w6c;
	wire  [1:0]  neg_rom_w7c;
	wire  [1:0]  neg_rom_w8c;
	wire  [1:0]  neg_rom_w9c;
	wire  [1:0]  pos_rom_w0c;
	wire  [1:0]  pos_rom_w10c;
	wire  [1:0]  pos_rom_w11c;
	wire  [1:0]  pos_rom_w12c;
	wire  [1:0]  pos_rom_w13c;
	wire  [1:0]  pos_rom_w14c;
	wire  [1:0]  pos_rom_w15c;
	wire  [1:0]  pos_rom_w16c;
	wire  [1:0]  pos_rom_w17c;
	wire  [1:0]  pos_rom_w18c;
	wire  [1:0]  pos_rom_w19c;
	wire  [1:0]  pos_rom_w1c;
	wire  [1:0]  pos_rom_w20c;
	wire  [1:0]  pos_rom_w21c;
	wire  [1:0]  pos_rom_w22c;
	wire  [1:0]  pos_rom_w23c;
	wire  [1:0]  pos_rom_w24c;
	wire  [1:0]  pos_rom_w25c;
	wire  [1:0]  pos_rom_w26c;
	wire  [1:0]  pos_rom_w27c;
	wire  [1:0]  pos_rom_w2c;
	wire  [1:0]  pos_rom_w3c;
	wire  [1:0]  pos_rom_w4c;
	wire  [1:0]  pos_rom_w5c;
	wire  [1:0]  pos_rom_w6c;
	wire  [1:0]  pos_rom_w7c;
	wire  [1:0]  pos_rom_w8c;
	wire  [1:0]  pos_rom_w9c;
	wire  [53:0]  Rk_next0_w;
	wire  [53:0]  Rk_next_w0c;
	wire  [53:0]  Rk_next_w10c;
	wire  [53:0]  Rk_next_w11c;
	wire  [53:0]  Rk_next_w12c;
	wire  [53:0]  Rk_next_w13c;
	wire  [53:0]  Rk_next_w14c;
	wire  [53:0]  Rk_next_w15c;
	wire  [53:0]  Rk_next_w16c;
	wire  [53:0]  Rk_next_w17c;
	wire  [53:0]  Rk_next_w18c;
	wire  [53:0]  Rk_next_w19c;
	wire  [53:0]  Rk_next_w1c;
	wire  [53:0]  Rk_next_w20c;
	wire  [53:0]  Rk_next_w21c;
	wire  [53:0]  Rk_next_w22c;
	wire  [53:0]  Rk_next_w23c;
	wire  [53:0]  Rk_next_w24c;
	wire  [53:0]  Rk_next_w25c;
	wire  [53:0]  Rk_next_w26c;
	wire  [55:0]  Rk_next_w27c;
	wire  [53:0]  Rk_next_w2c;
	wire  [53:0]  Rk_next_w3c;
	wire  [53:0]  Rk_next_w4c;
	wire  [53:0]  Rk_next_w5c;
	wire  [53:0]  Rk_next_w6c;
	wire  [53:0]  Rk_next_w7c;
	wire  [53:0]  Rk_next_w8c;
	wire  [53:0]  Rk_next_w9c;
	wire  [55:0]  Rk_remainder_special_w;
	wire  [52:0]  Rk_remainder_w;
	wire  [52:0]  Rk_w;
	wire  [2:0]  rom_dffe_w0c;
	wire  [2:0]  rom_dffe_w10c;
	wire  [2:0]  rom_dffe_w11c;
	wire  [2:0]  rom_dffe_w12c;
	wire  [2:0]  rom_dffe_w13c;
	wire  [2:0]  rom_dffe_w14c;
	wire  [2:0]  rom_dffe_w15c;
	wire  [2:0]  rom_dffe_w16c;
	wire  [2:0]  rom_dffe_w17c;
	wire  [2:0]  rom_dffe_w18c;
	wire  [2:0]  rom_dffe_w19c;
	wire  [2:0]  rom_dffe_w1c;
	wire  [2:0]  rom_dffe_w20c;
	wire  [2:0]  rom_dffe_w21c;
	wire  [2:0]  rom_dffe_w22c;
	wire  [2:0]  rom_dffe_w23c;
	wire  [2:0]  rom_dffe_w24c;
	wire  [2:0]  rom_dffe_w25c;
	wire  [2:0]  rom_dffe_w26c;
	wire  [2:0]  rom_dffe_w27c;
	wire  [2:0]  rom_dffe_w2c;
	wire  [2:0]  rom_dffe_w3c;
	wire  [2:0]  rom_dffe_w4c;
	wire  [2:0]  rom_dffe_w5c;
	wire  [2:0]  rom_dffe_w6c;
	wire  [2:0]  rom_dffe_w7c;
	wire  [2:0]  rom_dffe_w8c;
	wire  [2:0]  rom_dffe_w9c;
	wire  [27:0]  rom_mux_w;
	wire  [2:0]  rom_out_1a_w;
	wire  [2:0]  rom_out_w0c;
	wire  [2:0]  rom_out_w10c;
	wire  [2:0]  rom_out_w11c;
	wire  [2:0]  rom_out_w12c;
	wire  [2:0]  rom_out_w13c;
	wire  [2:0]  rom_out_w14c;
	wire  [2:0]  rom_out_w15c;
	wire  [2:0]  rom_out_w16c;
	wire  [2:0]  rom_out_w17c;
	wire  [2:0]  rom_out_w18c;
	wire  [2:0]  rom_out_w19c;
	wire  [2:0]  rom_out_w1c;
	wire  [2:0]  rom_out_w20c;
	wire  [2:0]  rom_out_w21c;
	wire  [2:0]  rom_out_w22c;
	wire  [2:0]  rom_out_w23c;
	wire  [2:0]  rom_out_w24c;
	wire  [2:0]  rom_out_w25c;
	wire  [2:0]  rom_out_w26c;
	wire  [2:0]  rom_out_w27c;
	wire  [2:0]  rom_out_w2c;
	wire  [2:0]  rom_out_w3c;
	wire  [2:0]  rom_out_w4c;
	wire  [2:0]  rom_out_w5c;
	wire  [2:0]  rom_out_w6c;
	wire  [2:0]  rom_out_w7c;
	wire  [2:0]  rom_out_w8c;
	wire  [2:0]  rom_out_w9c;
	wire  [55:0]  srt_adjust_w;
	wire  [55:0]  srt_adjusted_w;
	wire  [55:0]  true_quotient_w;
	wire  [55:0]  value_one_w;
	wire  [1:0]  zero_quotient_w;

	altfp_divider64_altfp_div_csa_92c   altfp_div_csa39
	( 
	.dataa(Rk_remainder_special_w[52:0]),
	.datab(divider_next_special_w),
	.result(wire_altfp_div_csa39_result));
	altfp_divider64_altfp_div_csa_k0f   altfp_div_csa40
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.dataa(full_pos_rom_w),
	.datab(full_neg_rom_w),
	.result(wire_altfp_div_csa40_result));
	altfp_divider64_altfp_div_csa_d3c   altfp_div_csa41
	( 
	.dataa(srt_adjust_w),
	.datab(value_one_w),
	.result(wire_altfp_div_csa41_result));
	// synopsys translate_off
	initial
		divider_next_special_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) divider_next_special_dffe <= 53'b0;
		else if  (clken == 1'b1)   divider_next_special_dffe <= divider_next_w27c;
	// synopsys translate_off
	initial
		Rk_remainder_special_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) Rk_remainder_special_dffe <= 56'b0;
		else if  (clken == 1'b1)   Rk_remainder_special_dffe <= Rk_next_w27c;
	// synopsys translate_off
	initial
		rom_reg_dffe0c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe0c <= 106'b0;
		else if  (clken == 1'b1)   rom_reg_dffe0c <= {rom_reg_dffe0c[103:0], rom_out_w0c[1:0]};
	// synopsys translate_off
	initial
		rom_reg_dffe10c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe10c <= 99'b0;
		else if  (clken == 1'b1)   rom_reg_dffe10c <= {rom_reg_dffe10c[95:0], rom_out_w10c};
	// synopsys translate_off
	initial
		rom_reg_dffe11c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe11c <= 93'b0;
		else if  (clken == 1'b1)   rom_reg_dffe11c <= {rom_reg_dffe11c[89:0], rom_out_w11c};
	// synopsys translate_off
	initial
		rom_reg_dffe12c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe12c <= 87'b0;
		else if  (clken == 1'b1)   rom_reg_dffe12c <= {rom_reg_dffe12c[83:0], rom_out_w12c};
	// synopsys translate_off
	initial
		rom_reg_dffe13c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe13c <= 81'b0;
		else if  (clken == 1'b1)   rom_reg_dffe13c <= {rom_reg_dffe13c[77:0], rom_out_w13c};
	// synopsys translate_off
	initial
		rom_reg_dffe14c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe14c <= 75'b0;
		else if  (clken == 1'b1)   rom_reg_dffe14c <= {rom_reg_dffe14c[71:0], rom_out_w14c};
	// synopsys translate_off
	initial
		rom_reg_dffe15c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe15c <= 69'b0;
		else if  (clken == 1'b1)   rom_reg_dffe15c <= {rom_reg_dffe15c[65:0], rom_out_w15c};
	// synopsys translate_off
	initial
		rom_reg_dffe16c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe16c <= 63'b0;
		else if  (clken == 1'b1)   rom_reg_dffe16c <= {rom_reg_dffe16c[59:0], rom_out_w16c};
	// synopsys translate_off
	initial
		rom_reg_dffe17c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe17c <= 57'b0;
		else if  (clken == 1'b1)   rom_reg_dffe17c <= {rom_reg_dffe17c[53:0], rom_out_w17c};
	// synopsys translate_off
	initial
		rom_reg_dffe18c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe18c <= 51'b0;
		else if  (clken == 1'b1)   rom_reg_dffe18c <= {rom_reg_dffe18c[47:0], rom_out_w18c};
	// synopsys translate_off
	initial
		rom_reg_dffe19c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe19c <= 45'b0;
		else if  (clken == 1'b1)   rom_reg_dffe19c <= {rom_reg_dffe19c[41:0], rom_out_w19c};
	// synopsys translate_off
	initial
		rom_reg_dffe1c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe1c <= 153'b0;
		else if  (clken == 1'b1)   rom_reg_dffe1c <= {rom_reg_dffe1c[149:0], rom_out_w1c};
	// synopsys translate_off
	initial
		rom_reg_dffe20c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe20c <= 39'b0;
		else if  (clken == 1'b1)   rom_reg_dffe20c <= {rom_reg_dffe20c[35:0], rom_out_w20c};
	// synopsys translate_off
	initial
		rom_reg_dffe21c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe21c <= 33'b0;
		else if  (clken == 1'b1)   rom_reg_dffe21c <= {rom_reg_dffe21c[29:0], rom_out_w21c};
	// synopsys translate_off
	initial
		rom_reg_dffe22c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe22c <= 27'b0;
		else if  (clken == 1'b1)   rom_reg_dffe22c <= {rom_reg_dffe22c[23:0], rom_out_w22c};
	// synopsys translate_off
	initial
		rom_reg_dffe23c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe23c <= 21'b0;
		else if  (clken == 1'b1)   rom_reg_dffe23c <= {rom_reg_dffe23c[17:0], rom_out_w23c};
	// synopsys translate_off
	initial
		rom_reg_dffe24c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe24c <= 15'b0;
		else if  (clken == 1'b1)   rom_reg_dffe24c <= {rom_reg_dffe24c[11:0], rom_out_w24c};
	// synopsys translate_off
	initial
		rom_reg_dffe25c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe25c <= 9'b0;
		else if  (clken == 1'b1)   rom_reg_dffe25c <= {rom_reg_dffe25c[5:0], rom_out_w25c};
	// synopsys translate_off
	initial
		rom_reg_dffe26c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe26c <= 3'b0;
		else if  (clken == 1'b1)   rom_reg_dffe26c <= {rom_out_w26c};
	// synopsys translate_off
	initial
		rom_reg_dffe2c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe2c <= 147'b0;
		else if  (clken == 1'b1)   rom_reg_dffe2c <= {rom_reg_dffe2c[143:0], rom_out_w2c};
	// synopsys translate_off
	initial
		rom_reg_dffe3c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe3c <= 141'b0;
		else if  (clken == 1'b1)   rom_reg_dffe3c <= {rom_reg_dffe3c[137:0], rom_out_w3c};
	// synopsys translate_off
	initial
		rom_reg_dffe4c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe4c <= 135'b0;
		else if  (clken == 1'b1)   rom_reg_dffe4c <= {rom_reg_dffe4c[131:0], rom_out_w4c};
	// synopsys translate_off
	initial
		rom_reg_dffe5c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe5c <= 129'b0;
		else if  (clken == 1'b1)   rom_reg_dffe5c <= {rom_reg_dffe5c[125:0], rom_out_w5c};
	// synopsys translate_off
	initial
		rom_reg_dffe6c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe6c <= 123'b0;
		else if  (clken == 1'b1)   rom_reg_dffe6c <= {rom_reg_dffe6c[119:0], rom_out_w6c};
	// synopsys translate_off
	initial
		rom_reg_dffe7c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe7c <= 117'b0;
		else if  (clken == 1'b1)   rom_reg_dffe7c <= {rom_reg_dffe7c[113:0], rom_out_w7c};
	// synopsys translate_off
	initial
		rom_reg_dffe8c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe8c <= 111'b0;
		else if  (clken == 1'b1)   rom_reg_dffe8c <= {rom_reg_dffe8c[107:0], rom_out_w8c};
	// synopsys translate_off
	initial
		rom_reg_dffe9c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rom_reg_dffe9c <= 105'b0;
		else if  (clken == 1'b1)   rom_reg_dffe9c <= {rom_reg_dffe9c[101:0], rom_out_w9c};
	altfp_divider64_srt_block_int_8fk   srt_block_int11
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_w),
	.divider_reg(wire_srt_block_int11_divider_reg),
	.Rk(Rk_w),
	.Rk_next(wire_srt_block_int11_Rk_next),
	.rom(wire_srt_block_int11_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int12
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w0c),
	.divider_reg(wire_srt_block_int12_divider_reg),
	.Rk(Rk_next_w0c),
	.Rk_next(wire_srt_block_int12_Rk_next),
	.rom(wire_srt_block_int12_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int13
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w1c),
	.divider_reg(wire_srt_block_int13_divider_reg),
	.Rk(Rk_next_w1c),
	.Rk_next(wire_srt_block_int13_Rk_next),
	.rom(wire_srt_block_int13_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int14
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w2c),
	.divider_reg(wire_srt_block_int14_divider_reg),
	.Rk(Rk_next_w2c),
	.Rk_next(wire_srt_block_int14_Rk_next),
	.rom(wire_srt_block_int14_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int15
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w3c),
	.divider_reg(wire_srt_block_int15_divider_reg),
	.Rk(Rk_next_w3c),
	.Rk_next(wire_srt_block_int15_Rk_next),
	.rom(wire_srt_block_int15_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int16
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w4c),
	.divider_reg(wire_srt_block_int16_divider_reg),
	.Rk(Rk_next_w4c),
	.Rk_next(wire_srt_block_int16_Rk_next),
	.rom(wire_srt_block_int16_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int17
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w5c),
	.divider_reg(wire_srt_block_int17_divider_reg),
	.Rk(Rk_next_w5c),
	.Rk_next(wire_srt_block_int17_Rk_next),
	.rom(wire_srt_block_int17_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int18
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w6c),
	.divider_reg(wire_srt_block_int18_divider_reg),
	.Rk(Rk_next_w6c),
	.Rk_next(wire_srt_block_int18_Rk_next),
	.rom(wire_srt_block_int18_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int19
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w7c),
	.divider_reg(wire_srt_block_int19_divider_reg),
	.Rk(Rk_next_w7c),
	.Rk_next(wire_srt_block_int19_Rk_next),
	.rom(wire_srt_block_int19_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int20
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w8c),
	.divider_reg(wire_srt_block_int20_divider_reg),
	.Rk(Rk_next_w8c),
	.Rk_next(wire_srt_block_int20_Rk_next),
	.rom(wire_srt_block_int20_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int21
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w9c),
	.divider_reg(wire_srt_block_int21_divider_reg),
	.Rk(Rk_next_w9c),
	.Rk_next(wire_srt_block_int21_Rk_next),
	.rom(wire_srt_block_int21_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int22
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w10c),
	.divider_reg(wire_srt_block_int22_divider_reg),
	.Rk(Rk_next_w10c),
	.Rk_next(wire_srt_block_int22_Rk_next),
	.rom(wire_srt_block_int22_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int23
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w11c),
	.divider_reg(wire_srt_block_int23_divider_reg),
	.Rk(Rk_next_w11c),
	.Rk_next(wire_srt_block_int23_Rk_next),
	.rom(wire_srt_block_int23_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int24
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w12c),
	.divider_reg(wire_srt_block_int24_divider_reg),
	.Rk(Rk_next_w12c),
	.Rk_next(wire_srt_block_int24_Rk_next),
	.rom(wire_srt_block_int24_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int25
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w13c),
	.divider_reg(wire_srt_block_int25_divider_reg),
	.Rk(Rk_next_w13c),
	.Rk_next(wire_srt_block_int25_Rk_next),
	.rom(wire_srt_block_int25_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int26
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w14c),
	.divider_reg(wire_srt_block_int26_divider_reg),
	.Rk(Rk_next_w14c),
	.Rk_next(wire_srt_block_int26_Rk_next),
	.rom(wire_srt_block_int26_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int27
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w15c),
	.divider_reg(wire_srt_block_int27_divider_reg),
	.Rk(Rk_next_w15c),
	.Rk_next(wire_srt_block_int27_Rk_next),
	.rom(wire_srt_block_int27_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int28
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w16c),
	.divider_reg(wire_srt_block_int28_divider_reg),
	.Rk(Rk_next_w16c),
	.Rk_next(wire_srt_block_int28_Rk_next),
	.rom(wire_srt_block_int28_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int29
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w17c),
	.divider_reg(wire_srt_block_int29_divider_reg),
	.Rk(Rk_next_w17c),
	.Rk_next(wire_srt_block_int29_Rk_next),
	.rom(wire_srt_block_int29_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int30
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w18c),
	.divider_reg(wire_srt_block_int30_divider_reg),
	.Rk(Rk_next_w18c),
	.Rk_next(wire_srt_block_int30_Rk_next),
	.rom(wire_srt_block_int30_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int31
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w19c),
	.divider_reg(wire_srt_block_int31_divider_reg),
	.Rk(Rk_next_w19c),
	.Rk_next(wire_srt_block_int31_Rk_next),
	.rom(wire_srt_block_int31_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int32
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w20c),
	.divider_reg(wire_srt_block_int32_divider_reg),
	.Rk(Rk_next_w20c),
	.Rk_next(wire_srt_block_int32_Rk_next),
	.rom(wire_srt_block_int32_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int33
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w21c),
	.divider_reg(wire_srt_block_int33_divider_reg),
	.Rk(Rk_next_w21c),
	.Rk_next(wire_srt_block_int33_Rk_next),
	.rom(wire_srt_block_int33_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int34
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w22c),
	.divider_reg(wire_srt_block_int34_divider_reg),
	.Rk(Rk_next_w22c),
	.Rk_next(wire_srt_block_int34_Rk_next),
	.rom(wire_srt_block_int34_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int35
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w23c),
	.divider_reg(wire_srt_block_int35_divider_reg),
	.Rk(Rk_next_w23c),
	.Rk_next(wire_srt_block_int35_Rk_next),
	.rom(wire_srt_block_int35_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int36
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w24c),
	.divider_reg(wire_srt_block_int36_divider_reg),
	.Rk(Rk_next_w24c),
	.Rk_next(wire_srt_block_int36_Rk_next),
	.rom(wire_srt_block_int36_rom));
	altfp_divider64_srt_block_int_ghk   srt_block_int37
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w25c),
	.divider_reg(wire_srt_block_int37_divider_reg),
	.Rk(Rk_next_w25c),
	.Rk_next(wire_srt_block_int37_Rk_next),
	.rom(wire_srt_block_int37_rom));
	altfp_divider64_srt_block_int_nbk   srt_block_int38
	( 
	.aclr(aclr),
	.clken(clken),
	.clock(clock),
	.divider(divider_next_w26c),
	.divider_reg(wire_srt_block_int38_divider_reg),
	.Rk(Rk_next_w26c),
	.Rk_next(wire_srt_block_int38_Rk_next),
	.rom(wire_srt_block_int38_rom));
	assign
		added_remainder_w = wire_altfp_div_csa39_result,
		divider = divider_next_special_w,
		divider_dffe_w = wire_srt_block_int11_divider_reg,
		divider_next_special_w = divider_next_special_dffe,
		divider_next_w0c = divider_dffe_w,
		divider_next_w10c = wire_srt_block_int21_divider_reg,
		divider_next_w11c = wire_srt_block_int22_divider_reg,
		divider_next_w12c = wire_srt_block_int23_divider_reg,
		divider_next_w13c = wire_srt_block_int24_divider_reg,
		divider_next_w14c = wire_srt_block_int25_divider_reg,
		divider_next_w15c = wire_srt_block_int26_divider_reg,
		divider_next_w16c = wire_srt_block_int27_divider_reg,
		divider_next_w17c = wire_srt_block_int28_divider_reg,
		divider_next_w18c = wire_srt_block_int29_divider_reg,
		divider_next_w19c = wire_srt_block_int30_divider_reg,
		divider_next_w1c = wire_srt_block_int12_divider_reg,
		divider_next_w20c = wire_srt_block_int31_divider_reg,
		divider_next_w21c = wire_srt_block_int32_divider_reg,
		divider_next_w22c = wire_srt_block_int33_divider_reg,
		divider_next_w23c = wire_srt_block_int34_divider_reg,
		divider_next_w24c = wire_srt_block_int35_divider_reg,
		divider_next_w25c = wire_srt_block_int36_divider_reg,
		divider_next_w26c = wire_srt_block_int37_divider_reg,
		divider_next_w27c = wire_srt_block_int38_divider_reg,
		divider_next_w2c = wire_srt_block_int13_divider_reg,
		divider_next_w3c = wire_srt_block_int14_divider_reg,
		divider_next_w4c = wire_srt_block_int15_divider_reg,
		divider_next_w5c = wire_srt_block_int16_divider_reg,
		divider_next_w6c = wire_srt_block_int17_divider_reg,
		divider_next_w7c = wire_srt_block_int18_divider_reg,
		divider_next_w8c = wire_srt_block_int19_divider_reg,
		divider_next_w9c = wire_srt_block_int20_divider_reg,
		divider_w = denom,
		full_neg_rom_w = {neg_rom_w0c, neg_rom_w1c, neg_rom_w2c, neg_rom_w3c, neg_rom_w4c, neg_rom_w5c, neg_rom_w6c, neg_rom_w7c, neg_rom_w8c, neg_rom_w9c, neg_rom_w10c, neg_rom_w11c, neg_rom_w12c, neg_rom_w13c, neg_rom_w14c, neg_rom_w15c, neg_rom_w16c, neg_rom_w17c, neg_rom_w18c, neg_rom_w19c, neg_rom_w20c, neg_rom_w21c, neg_rom_w22c, neg_rom_w23c, neg_rom_w24c, neg_rom_w25c, neg_rom_w26c, neg_rom_w27c},
		full_pos_rom_w = {pos_rom_w0c, pos_rom_w1c, pos_rom_w2c, pos_rom_w3c, pos_rom_w4c, pos_rom_w5c, pos_rom_w6c, pos_rom_w7c, pos_rom_w8c, pos_rom_w9c, pos_rom_w10c, pos_rom_w11c, pos_rom_w12c, pos_rom_w13c, pos_rom_w14c, pos_rom_w15c, pos_rom_w16c, pos_rom_w17c, pos_rom_w18c, pos_rom_w19c, pos_rom_w20c, pos_rom_w21c, pos_rom_w22c, pos_rom_w23c, pos_rom_w24c, pos_rom_w25c, pos_rom_w26c, pos_rom_w27c},
		mux_remainder_w = ((Rk_remainder_special_w[55] | Rk_remainder_special_w[54]) | Rk_remainder_special_w[53]),
		neg_rom_w0c = (({2{(~ rom_mux_w[0])}} & zero_quotient_w) | ({2{rom_mux_w[0]}} & rom_dffe_w0c[1:0])),
		neg_rom_w10c = (({2{(~ rom_mux_w[10])}} & zero_quotient_w) | ({2{rom_mux_w[10]}} & rom_dffe_w10c[1:0])),
		neg_rom_w11c = (({2{(~ rom_mux_w[11])}} & zero_quotient_w) | ({2{rom_mux_w[11]}} & rom_dffe_w11c[1:0])),
		neg_rom_w12c = (({2{(~ rom_mux_w[12])}} & zero_quotient_w) | ({2{rom_mux_w[12]}} & rom_dffe_w12c[1:0])),
		neg_rom_w13c = (({2{(~ rom_mux_w[13])}} & zero_quotient_w) | ({2{rom_mux_w[13]}} & rom_dffe_w13c[1:0])),
		neg_rom_w14c = (({2{(~ rom_mux_w[14])}} & zero_quotient_w) | ({2{rom_mux_w[14]}} & rom_dffe_w14c[1:0])),
		neg_rom_w15c = (({2{(~ rom_mux_w[15])}} & zero_quotient_w) | ({2{rom_mux_w[15]}} & rom_dffe_w15c[1:0])),
		neg_rom_w16c = (({2{(~ rom_mux_w[16])}} & zero_quotient_w) | ({2{rom_mux_w[16]}} & rom_dffe_w16c[1:0])),
		neg_rom_w17c = (({2{(~ rom_mux_w[17])}} & zero_quotient_w) | ({2{rom_mux_w[17]}} & rom_dffe_w17c[1:0])),
		neg_rom_w18c = (({2{(~ rom_mux_w[18])}} & zero_quotient_w) | ({2{rom_mux_w[18]}} & rom_dffe_w18c[1:0])),
		neg_rom_w19c = (({2{(~ rom_mux_w[19])}} & zero_quotient_w) | ({2{rom_mux_w[19]}} & rom_dffe_w19c[1:0])),
		neg_rom_w1c = (({2{(~ rom_mux_w[1])}} & zero_quotient_w) | ({2{rom_mux_w[1]}} & rom_dffe_w1c[1:0])),
		neg_rom_w20c = (({2{(~ rom_mux_w[20])}} & zero_quotient_w) | ({2{rom_mux_w[20]}} & rom_dffe_w20c[1:0])),
		neg_rom_w21c = (({2{(~ rom_mux_w[21])}} & zero_quotient_w) | ({2{rom_mux_w[21]}} & rom_dffe_w21c[1:0])),
		neg_rom_w22c = (({2{(~ rom_mux_w[22])}} & zero_quotient_w) | ({2{rom_mux_w[22]}} & rom_dffe_w22c[1:0])),
		neg_rom_w23c = (({2{(~ rom_mux_w[23])}} & zero_quotient_w) | ({2{rom_mux_w[23]}} & rom_dffe_w23c[1:0])),
		neg_rom_w24c = (({2{(~ rom_mux_w[24])}} & zero_quotient_w) | ({2{rom_mux_w[24]}} & rom_dffe_w24c[1:0])),
		neg_rom_w25c = (({2{(~ rom_mux_w[25])}} & zero_quotient_w) | ({2{rom_mux_w[25]}} & rom_dffe_w25c[1:0])),
		neg_rom_w26c = (({2{(~ rom_mux_w[26])}} & zero_quotient_w) | ({2{rom_mux_w[26]}} & rom_dffe_w26c[1:0])),
		neg_rom_w27c = (({2{(~ rom_mux_w[27])}} & zero_quotient_w) | ({2{rom_mux_w[27]}} & rom_dffe_w27c[1:0])),
		neg_rom_w2c = (({2{(~ rom_mux_w[2])}} & zero_quotient_w) | ({2{rom_mux_w[2]}} & rom_dffe_w2c[1:0])),
		neg_rom_w3c = (({2{(~ rom_mux_w[3])}} & zero_quotient_w) | ({2{rom_mux_w[3]}} & rom_dffe_w3c[1:0])),
		neg_rom_w4c = (({2{(~ rom_mux_w[4])}} & zero_quotient_w) | ({2{rom_mux_w[4]}} & rom_dffe_w4c[1:0])),
		neg_rom_w5c = (({2{(~ rom_mux_w[5])}} & zero_quotient_w) | ({2{rom_mux_w[5]}} & rom_dffe_w5c[1:0])),
		neg_rom_w6c = (({2{(~ rom_mux_w[6])}} & zero_quotient_w) | ({2{rom_mux_w[6]}} & rom_dffe_w6c[1:0])),
		neg_rom_w7c = (({2{(~ rom_mux_w[7])}} & zero_quotient_w) | ({2{rom_mux_w[7]}} & rom_dffe_w7c[1:0])),
		neg_rom_w8c = (({2{(~ rom_mux_w[8])}} & zero_quotient_w) | ({2{rom_mux_w[8]}} & rom_dffe_w8c[1:0])),
		neg_rom_w9c = (({2{(~ rom_mux_w[9])}} & zero_quotient_w) | ({2{rom_mux_w[9]}} & rom_dffe_w9c[1:0])),
		pos_rom_w0c = (({2{rom_mux_w[0]}} & zero_quotient_w) | ({2{(~ rom_mux_w[0])}} & rom_dffe_w0c[1:0])),
		pos_rom_w10c = (({2{rom_mux_w[10]}} & zero_quotient_w) | ({2{(~ rom_mux_w[10])}} & rom_dffe_w10c[1:0])),
		pos_rom_w11c = (({2{rom_mux_w[11]}} & zero_quotient_w) | ({2{(~ rom_mux_w[11])}} & rom_dffe_w11c[1:0])),
		pos_rom_w12c = (({2{rom_mux_w[12]}} & zero_quotient_w) | ({2{(~ rom_mux_w[12])}} & rom_dffe_w12c[1:0])),
		pos_rom_w13c = (({2{rom_mux_w[13]}} & zero_quotient_w) | ({2{(~ rom_mux_w[13])}} & rom_dffe_w13c[1:0])),
		pos_rom_w14c = (({2{rom_mux_w[14]}} & zero_quotient_w) | ({2{(~ rom_mux_w[14])}} & rom_dffe_w14c[1:0])),
		pos_rom_w15c = (({2{rom_mux_w[15]}} & zero_quotient_w) | ({2{(~ rom_mux_w[15])}} & rom_dffe_w15c[1:0])),
		pos_rom_w16c = (({2{rom_mux_w[16]}} & zero_quotient_w) | ({2{(~ rom_mux_w[16])}} & rom_dffe_w16c[1:0])),
		pos_rom_w17c = (({2{rom_mux_w[17]}} & zero_quotient_w) | ({2{(~ rom_mux_w[17])}} & rom_dffe_w17c[1:0])),
		pos_rom_w18c = (({2{rom_mux_w[18]}} & zero_quotient_w) | ({2{(~ rom_mux_w[18])}} & rom_dffe_w18c[1:0])),
		pos_rom_w19c = (({2{rom_mux_w[19]}} & zero_quotient_w) | ({2{(~ rom_mux_w[19])}} & rom_dffe_w19c[1:0])),
		pos_rom_w1c = (({2{rom_mux_w[1]}} & zero_quotient_w) | ({2{(~ rom_mux_w[1])}} & rom_dffe_w1c[1:0])),
		pos_rom_w20c = (({2{rom_mux_w[20]}} & zero_quotient_w) | ({2{(~ rom_mux_w[20])}} & rom_dffe_w20c[1:0])),
		pos_rom_w21c = (({2{rom_mux_w[21]}} & zero_quotient_w) | ({2{(~ rom_mux_w[21])}} & rom_dffe_w21c[1:0])),
		pos_rom_w22c = (({2{rom_mux_w[22]}} & zero_quotient_w) | ({2{(~ rom_mux_w[22])}} & rom_dffe_w22c[1:0])),
		pos_rom_w23c = (({2{rom_mux_w[23]}} & zero_quotient_w) | ({2{(~ rom_mux_w[23])}} & rom_dffe_w23c[1:0])),
		pos_rom_w24c = (({2{rom_mux_w[24]}} & zero_quotient_w) | ({2{(~ rom_mux_w[24])}} & rom_dffe_w24c[1:0])),
		pos_rom_w25c = (({2{rom_mux_w[25]}} & zero_quotient_w) | ({2{(~ rom_mux_w[25])}} & rom_dffe_w25c[1:0])),
		pos_rom_w26c = (({2{rom_mux_w[26]}} & zero_quotient_w) | ({2{(~ rom_mux_w[26])}} & rom_dffe_w26c[1:0])),
		pos_rom_w27c = (({2{rom_mux_w[27]}} & zero_quotient_w) | ({2{(~ rom_mux_w[27])}} & rom_dffe_w27c[1:0])),
		pos_rom_w2c = (({2{rom_mux_w[2]}} & zero_quotient_w) | ({2{(~ rom_mux_w[2])}} & rom_dffe_w2c[1:0])),
		pos_rom_w3c = (({2{rom_mux_w[3]}} & zero_quotient_w) | ({2{(~ rom_mux_w[3])}} & rom_dffe_w3c[1:0])),
		pos_rom_w4c = (({2{rom_mux_w[4]}} & zero_quotient_w) | ({2{(~ rom_mux_w[4])}} & rom_dffe_w4c[1:0])),
		pos_rom_w5c = (({2{rom_mux_w[5]}} & zero_quotient_w) | ({2{(~ rom_mux_w[5])}} & rom_dffe_w5c[1:0])),
		pos_rom_w6c = (({2{rom_mux_w[6]}} & zero_quotient_w) | ({2{(~ rom_mux_w[6])}} & rom_dffe_w6c[1:0])),
		pos_rom_w7c = (({2{rom_mux_w[7]}} & zero_quotient_w) | ({2{(~ rom_mux_w[7])}} & rom_dffe_w7c[1:0])),
		pos_rom_w8c = (({2{rom_mux_w[8]}} & zero_quotient_w) | ({2{(~ rom_mux_w[8])}} & rom_dffe_w8c[1:0])),
		pos_rom_w9c = (({2{rom_mux_w[9]}} & zero_quotient_w) | ({2{(~ rom_mux_w[9])}} & rom_dffe_w9c[1:0])),
		quotient = true_quotient_w,
		remain = Rk_remainder_w,
		Rk_next0_w = wire_srt_block_int11_Rk_next,
		Rk_next_w0c = Rk_next0_w,
		Rk_next_w10c = wire_srt_block_int21_Rk_next,
		Rk_next_w11c = wire_srt_block_int22_Rk_next,
		Rk_next_w12c = wire_srt_block_int23_Rk_next,
		Rk_next_w13c = wire_srt_block_int24_Rk_next,
		Rk_next_w14c = wire_srt_block_int25_Rk_next,
		Rk_next_w15c = wire_srt_block_int26_Rk_next,
		Rk_next_w16c = wire_srt_block_int27_Rk_next,
		Rk_next_w17c = wire_srt_block_int28_Rk_next,
		Rk_next_w18c = wire_srt_block_int29_Rk_next,
		Rk_next_w19c = wire_srt_block_int30_Rk_next,
		Rk_next_w1c = wire_srt_block_int12_Rk_next,
		Rk_next_w20c = wire_srt_block_int31_Rk_next,
		Rk_next_w21c = wire_srt_block_int32_Rk_next,
		Rk_next_w22c = wire_srt_block_int33_Rk_next,
		Rk_next_w23c = wire_srt_block_int34_Rk_next,
		Rk_next_w24c = wire_srt_block_int35_Rk_next,
		Rk_next_w25c = wire_srt_block_int36_Rk_next,
		Rk_next_w26c = wire_srt_block_int37_Rk_next,
		Rk_next_w27c = wire_srt_block_int38_Rk_next,
		Rk_next_w2c = wire_srt_block_int13_Rk_next,
		Rk_next_w3c = wire_srt_block_int14_Rk_next,
		Rk_next_w4c = wire_srt_block_int15_Rk_next,
		Rk_next_w5c = wire_srt_block_int16_Rk_next,
		Rk_next_w6c = wire_srt_block_int17_Rk_next,
		Rk_next_w7c = wire_srt_block_int18_Rk_next,
		Rk_next_w8c = wire_srt_block_int19_Rk_next,
		Rk_next_w9c = wire_srt_block_int20_Rk_next,
		Rk_remainder_special_w = Rk_remainder_special_dffe,
		Rk_remainder_w = (({53{(~ mux_remainder_w)}} & Rk_remainder_special_w[52:0]) | ({53{mux_remainder_w}} & added_remainder_w)),
		Rk_w = numer,
		rom_dffe_w0c = {1'b0, rom_reg_dffe0c[105:104]},
		rom_dffe_w10c = rom_reg_dffe10c[98:96],
		rom_dffe_w11c = rom_reg_dffe11c[92:90],
		rom_dffe_w12c = rom_reg_dffe12c[86:84],
		rom_dffe_w13c = rom_reg_dffe13c[80:78],
		rom_dffe_w14c = rom_reg_dffe14c[74:72],
		rom_dffe_w15c = rom_reg_dffe15c[68:66],
		rom_dffe_w16c = rom_reg_dffe16c[62:60],
		rom_dffe_w17c = rom_reg_dffe17c[56:54],
		rom_dffe_w18c = rom_reg_dffe18c[50:48],
		rom_dffe_w19c = rom_reg_dffe19c[44:42],
		rom_dffe_w1c = rom_reg_dffe1c[152:150],
		rom_dffe_w20c = rom_reg_dffe20c[38:36],
		rom_dffe_w21c = rom_reg_dffe21c[32:30],
		rom_dffe_w22c = rom_reg_dffe22c[26:24],
		rom_dffe_w23c = rom_reg_dffe23c[20:18],
		rom_dffe_w24c = rom_reg_dffe24c[14:12],
		rom_dffe_w25c = rom_reg_dffe25c[8:6],
		rom_dffe_w26c = rom_reg_dffe26c[2:0],
		rom_dffe_w27c = rom_out_w27c,
		rom_dffe_w2c = rom_reg_dffe2c[146:144],
		rom_dffe_w3c = rom_reg_dffe3c[140:138],
		rom_dffe_w4c = rom_reg_dffe4c[134:132],
		rom_dffe_w5c = rom_reg_dffe5c[128:126],
		rom_dffe_w6c = rom_reg_dffe6c[122:120],
		rom_dffe_w7c = rom_reg_dffe7c[116:114],
		rom_dffe_w8c = rom_reg_dffe8c[110:108],
		rom_dffe_w9c = rom_reg_dffe9c[104:102],
		rom_mux_w = {rom_dffe_w27c[2], rom_dffe_w26c[2], rom_dffe_w25c[2], rom_dffe_w24c[2], rom_dffe_w23c[2], rom_dffe_w22c[2], rom_dffe_w21c[2], rom_dffe_w20c[2], rom_dffe_w19c[2], rom_dffe_w18c[2], rom_dffe_w17c[2], rom_dffe_w16c[2], rom_dffe_w15c[2], rom_dffe_w14c[2], rom_dffe_w13c[2], rom_dffe_w12c[2], rom_dffe_w11c[2], rom_dffe_w10c[2], rom_dffe_w9c[2], rom_dffe_w8c[2], rom_dffe_w7c[2], rom_dffe_w6c[2], rom_dffe_w5c[2], rom_dffe_w4c[2], rom_dffe_w3c[2], rom_dffe_w2c[2], rom_dffe_w1c[2], rom_dffe_w0c[2]},
		rom_out_1a_w = wire_srt_block_int11_rom,
		rom_out_w0c = rom_out_1a_w,
		rom_out_w10c = wire_srt_block_int21_rom,
		rom_out_w11c = wire_srt_block_int22_rom,
		rom_out_w12c = wire_srt_block_int23_rom,
		rom_out_w13c = wire_srt_block_int24_rom,
		rom_out_w14c = wire_srt_block_int25_rom,
		rom_out_w15c = wire_srt_block_int26_rom,
		rom_out_w16c = wire_srt_block_int27_rom,
		rom_out_w17c = wire_srt_block_int28_rom,
		rom_out_w18c = wire_srt_block_int29_rom,
		rom_out_w19c = wire_srt_block_int30_rom,
		rom_out_w1c = wire_srt_block_int12_rom,
		rom_out_w20c = wire_srt_block_int31_rom,
		rom_out_w21c = wire_srt_block_int32_rom,
		rom_out_w22c = wire_srt_block_int33_rom,
		rom_out_w23c = wire_srt_block_int34_rom,
		rom_out_w24c = wire_srt_block_int35_rom,
		rom_out_w25c = wire_srt_block_int36_rom,
		rom_out_w26c = wire_srt_block_int37_rom,
		rom_out_w27c = wire_srt_block_int38_rom,
		rom_out_w2c = wire_srt_block_int13_rom,
		rom_out_w3c = wire_srt_block_int14_rom,
		rom_out_w4c = wire_srt_block_int15_rom,
		rom_out_w5c = wire_srt_block_int16_rom,
		rom_out_w6c = wire_srt_block_int17_rom,
		rom_out_w7c = wire_srt_block_int18_rom,
		rom_out_w8c = wire_srt_block_int19_rom,
		rom_out_w9c = wire_srt_block_int20_rom,
		srt_adjust_w = wire_altfp_div_csa40_result,
		srt_adjusted_w = wire_altfp_div_csa41_result,
		true_quotient_w = (({56{(~ mux_remainder_w)}} & srt_adjust_w) | ({56{mux_remainder_w}} & srt_adjusted_w)),
		value_one_w = 56'b00000000000000000000000000000000000000000000000000000001,
		zero_quotient_w = {2{1'b0}};
endmodule //altfp_divider64_altfp_div_srt_ext_e3f

//synthesis_resources = lpm_add_sub 349 lpm_compare 118 lpm_mux 56 reg 15830 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_divider64_altfp_div_1vh
	( 
	clk_en,
	clock,
	dataa,
	datab,
	result) ;
	input   clk_en;
	input   clock;
	input   [63:0]  dataa;
	input   [63:0]  datab;
	output   [63:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clk_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_altfp_div_csa8_cout;
	wire  [52:0]   wire_altfp_div_csa8_result;
	wire  [52:0]   wire_altfp_div_srt_ext1_divider;
	wire  [55:0]   wire_altfp_div_srt_ext1_quotient;
	wire  [52:0]   wire_altfp_div_srt_ext1_remain;
	reg	[7:0]	and_or_dffe;
	reg	[7:0]	and_or_dffe1a;
	reg	[7:0]	and_or_dffe3a;
	reg	[7:0]	and_or_pipeline0c;
	reg	[7:0]	and_or_pipeline10c;
	reg	[7:0]	and_or_pipeline11c;
	reg	[7:0]	and_or_pipeline12c;
	reg	[7:0]	and_or_pipeline13c;
	reg	[7:0]	and_or_pipeline14c;
	reg	[7:0]	and_or_pipeline15c;
	reg	[7:0]	and_or_pipeline16c;
	reg	[7:0]	and_or_pipeline17c;
	reg	[7:0]	and_or_pipeline18c;
	reg	[7:0]	and_or_pipeline19c;
	reg	[7:0]	and_or_pipeline1c;
	reg	[7:0]	and_or_pipeline20c;
	reg	[7:0]	and_or_pipeline21c;
	reg	[7:0]	and_or_pipeline22c;
	reg	[7:0]	and_or_pipeline23c;
	reg	[7:0]	and_or_pipeline24c;
	reg	[7:0]	and_or_pipeline25c;
	reg	[7:0]	and_or_pipeline26c;
	reg	[7:0]	and_or_pipeline27c;
	reg	[7:0]	and_or_pipeline28c;
	reg	[7:0]	and_or_pipeline29c;
	reg	[7:0]	and_or_pipeline2c;
	reg	[7:0]	and_or_pipeline30c;
	reg	[7:0]	and_or_pipeline31c;
	reg	[7:0]	and_or_pipeline32c;
	reg	[7:0]	and_or_pipeline33c;
	reg	[7:0]	and_or_pipeline34c;
	reg	[7:0]	and_or_pipeline35c;
	reg	[7:0]	and_or_pipeline36c;
	reg	[7:0]	and_or_pipeline37c;
	reg	[7:0]	and_or_pipeline38c;
	reg	[7:0]	and_or_pipeline39c;
	reg	[7:0]	and_or_pipeline3c;
	reg	[7:0]	and_or_pipeline40c;
	reg	[7:0]	and_or_pipeline41c;
	reg	[7:0]	and_or_pipeline42c;
	reg	[7:0]	and_or_pipeline43c;
	reg	[7:0]	and_or_pipeline44c;
	reg	[7:0]	and_or_pipeline45c;
	reg	[7:0]	and_or_pipeline46c;
	reg	[7:0]	and_or_pipeline47c;
	reg	[7:0]	and_or_pipeline48c;
	reg	[7:0]	and_or_pipeline49c;
	reg	[7:0]	and_or_pipeline4c;
	reg	[7:0]	and_or_pipeline50c;
	reg	[7:0]	and_or_pipeline51c;
	reg	[7:0]	and_or_pipeline52c;
	reg	[7:0]	and_or_pipeline53c;
	reg	[7:0]	and_or_pipeline54c;
	reg	[7:0]	and_or_pipeline55c;
	reg	[7:0]	and_or_pipeline5c;
	reg	[7:0]	and_or_pipeline6c;
	reg	[7:0]	and_or_pipeline7c;
	reg	[7:0]	and_or_pipeline8c;
	reg	[7:0]	and_or_pipeline9c;
	reg	bias_addition_overf_dffe;
	reg	[52:0]	checked_quotient_dffe1a;
	reg	exp_a_and_dffe;
	reg	exp_a_b_dffe;
	reg	[10:0]	exp_a_dffe;
	reg	exp_a_or_dffe;
	reg	exp_b_and_dffe;
	reg	[10:0]	exp_b_dffe;
	reg	exp_b_or_dffe;
	reg	[11:0]	exp_dffe1a;
	reg	[11:0]	exp_dffe2a;
	reg	[11:0]	exp_pipeline0c;
	reg	[11:0]	exp_pipeline10c;
	reg	[11:0]	exp_pipeline11c;
	reg	[11:0]	exp_pipeline12c;
	reg	[11:0]	exp_pipeline13c;
	reg	[11:0]	exp_pipeline14c;
	reg	[11:0]	exp_pipeline15c;
	reg	[11:0]	exp_pipeline16c;
	reg	[11:0]	exp_pipeline17c;
	reg	[11:0]	exp_pipeline18c;
	reg	[11:0]	exp_pipeline19c;
	reg	[11:0]	exp_pipeline1c;
	reg	[11:0]	exp_pipeline20c;
	reg	[11:0]	exp_pipeline21c;
	reg	[11:0]	exp_pipeline22c;
	reg	[11:0]	exp_pipeline23c;
	reg	[11:0]	exp_pipeline24c;
	reg	[11:0]	exp_pipeline25c;
	reg	[11:0]	exp_pipeline26c;
	reg	[11:0]	exp_pipeline27c;
	reg	[11:0]	exp_pipeline28c;
	reg	[11:0]	exp_pipeline29c;
	reg	[11:0]	exp_pipeline2c;
	reg	[11:0]	exp_pipeline30c;
	reg	[11:0]	exp_pipeline31c;
	reg	[11:0]	exp_pipeline32c;
	reg	[11:0]	exp_pipeline33c;
	reg	[11:0]	exp_pipeline34c;
	reg	[11:0]	exp_pipeline35c;
	reg	[11:0]	exp_pipeline36c;
	reg	[11:0]	exp_pipeline37c;
	reg	[11:0]	exp_pipeline38c;
	reg	[11:0]	exp_pipeline39c;
	reg	[11:0]	exp_pipeline3c;
	reg	[11:0]	exp_pipeline40c;
	reg	[11:0]	exp_pipeline41c;
	reg	[11:0]	exp_pipeline42c;
	reg	[11:0]	exp_pipeline43c;
	reg	[11:0]	exp_pipeline44c;
	reg	[11:0]	exp_pipeline45c;
	reg	[11:0]	exp_pipeline46c;
	reg	[11:0]	exp_pipeline47c;
	reg	[11:0]	exp_pipeline48c;
	reg	[11:0]	exp_pipeline49c;
	reg	[11:0]	exp_pipeline4c;
	reg	[11:0]	exp_pipeline50c;
	reg	[11:0]	exp_pipeline51c;
	reg	[11:0]	exp_pipeline52c;
	reg	[11:0]	exp_pipeline53c;
	reg	[11:0]	exp_pipeline54c;
	reg	[11:0]	exp_pipeline5c;
	reg	[11:0]	exp_pipeline6c;
	reg	[11:0]	exp_pipeline7c;
	reg	[11:0]	exp_pipeline8c;
	reg	[11:0]	exp_pipeline9c;
	reg	[10:0]	exp_res_pipe3;
	reg	guard_bit_dffe1a;
	reg	implied_bit;
	reg	implied_bit2a;
	reg	man_a_and_dffe;
	reg	[51:0]	man_a_dffe;
	reg	man_a_or_dffe;
	reg	man_b_and_dffe;
	reg	[51:0]	man_b_dffe;
	reg	man_b_or_dffe;
	reg	[52:0]	man_res_pipe3;
	reg	[63:0]	result_output_dffe;
	reg	rnd_overflow_dffe;
	reg	[52:0]	rnded_man_pipe2a;
	reg	round_bit_dffe1a;
	reg	sign_a_dffe;
	reg	sign_b_dffe;
	reg	sign_div_pipeline0c;
	reg	sign_div_pipeline10c;
	reg	sign_div_pipeline11c;
	reg	sign_div_pipeline12c;
	reg	sign_div_pipeline13c;
	reg	sign_div_pipeline14c;
	reg	sign_div_pipeline15c;
	reg	sign_div_pipeline16c;
	reg	sign_div_pipeline17c;
	reg	sign_div_pipeline18c;
	reg	sign_div_pipeline19c;
	reg	sign_div_pipeline1c;
	reg	sign_div_pipeline20c;
	reg	sign_div_pipeline21c;
	reg	sign_div_pipeline22c;
	reg	sign_div_pipeline23c;
	reg	sign_div_pipeline24c;
	reg	sign_div_pipeline25c;
	reg	sign_div_pipeline26c;
	reg	sign_div_pipeline27c;
	reg	sign_div_pipeline28c;
	reg	sign_div_pipeline29c;
	reg	sign_div_pipeline2c;
	reg	sign_div_pipeline30c;
	reg	sign_div_pipeline31c;
	reg	sign_div_pipeline32c;
	reg	sign_div_pipeline33c;
	reg	sign_div_pipeline34c;
	reg	sign_div_pipeline35c;
	reg	sign_div_pipeline36c;
	reg	sign_div_pipeline37c;
	reg	sign_div_pipeline38c;
	reg	sign_div_pipeline39c;
	reg	sign_div_pipeline3c;
	reg	sign_div_pipeline40c;
	reg	sign_div_pipeline41c;
	reg	sign_div_pipeline42c;
	reg	sign_div_pipeline43c;
	reg	sign_div_pipeline44c;
	reg	sign_div_pipeline45c;
	reg	sign_div_pipeline46c;
	reg	sign_div_pipeline47c;
	reg	sign_div_pipeline48c;
	reg	sign_div_pipeline49c;
	reg	sign_div_pipeline4c;
	reg	sign_div_pipeline50c;
	reg	sign_div_pipeline51c;
	reg	sign_div_pipeline52c;
	reg	sign_div_pipeline53c;
	reg	sign_div_pipeline54c;
	reg	sign_div_pipeline55c;
	reg	sign_div_pipeline5c;
	reg	sign_div_pipeline6c;
	reg	sign_div_pipeline7c;
	reg	sign_div_pipeline8c;
	reg	sign_div_pipeline9c;
	reg	sign_pipe1a;
	reg	sign_pipe2a;
	reg	sign_pipe3a;
	reg	sticky_bit_dffe1a;
	wire  wire_add_sub10_overflow;
	wire  [11:0]   wire_add_sub10_result;
	wire  [11:0]   wire_add_sub9_result;
	wire  wire_cmpr2_aeb;
	wire  wire_cmpr2_agb;
	wire  wire_cmpr3_aeb;
	wire  wire_cmpr3_agb;
	wire  wire_cmpr4_aeb;
	wire  wire_cmpr4_agb;
	wire  wire_cmpr5_ageb;
	wire  wire_cmpr6_aeb;
	wire  wire_cmpr6_agb;
	wire  wire_cmpr7_ageb;
	wire aclr;
	wire  [52:0]  add_1_dataa_w;
	wire  [52:0]  add_1_datab_w;
	wire  add_1_w;
	wire  [52:0]  add_one_process_w;
	wire  [7:0]  and_or_dffe1a_w;
	wire  [7:0]  and_or_dffe3a_w;
	wire  [7:0]  and_or_dffe_w;
	wire  [7:0]  and_or_int_w;
	wire  [7:0]  and_or_pipeline_w;
	wire  [11:0]  bias_add_w;
	wire  bias_addition_overf_w;
	wire  [10:0]  bias_addition_w;
	wire  [11:0]  bias_value_w;
	wire  [52:0]  checked_quotient_dffe1a_w;
	wire  [52:0]  checked_quotient_w;
	wire  [10:0]  dataa_exp_bus_w;
	wire  [63:0]  dataa_int;
	wire  [51:0]  dataa_man_bus_w;
	wire  dataa_S0;
	wire  [10:0]  datab_exp_bus_w;
	wire  [63:0]  datab_int;
	wire  [51:0]  datab_man_bus_w;
	wire  datab_S0;
	wire  [52:0]  divider_srt_w;
	wire  exp_a_and_msb2_w;
	wire  exp_a_and_msb_w;
	wire  exp_a_and_mux_w;
	wire  [10:0]  exp_a_and_w;
	wire  exp_a_b_w;
	wire  [10:0]  exp_a_bus_w;
	wire  exp_a_non_zero_w;
	wire  exp_a_one_w;
	wire  exp_a_or_msb2_w;
	wire  exp_a_or_msb_w;
	wire  exp_a_or_mux_w;
	wire  [10:0]  exp_a_or_w;
	wire  [10:0]  exp_a_w;
	wire  exp_a_zero_w;
	wire  exp_b_and_msb2_w;
	wire  exp_b_and_msb_w;
	wire  exp_b_and_mux_w;
	wire  [10:0]  exp_b_and_w;
	wire  [10:0]  exp_b_bus_w;
	wire  exp_b_non_zero_w;
	wire  exp_b_one_w;
	wire  exp_b_or_msb2_w;
	wire  exp_b_or_msb_w;
	wire  exp_b_or_mux_w;
	wire  [10:0]  exp_b_or_w;
	wire  [10:0]  exp_b_w;
	wire  exp_b_zero_w;
	wire  exp_bias_and_res_w;
	wire  [10:0]  exp_bias_and_w;
	wire  [10:0]  exp_bias_bus_w;
	wire  [11:0]  exp_dffe1a_w;
	wire  [11:0]  exp_dffe2a_w;
	wire  [10:0]  exp_exc_ones_w;
	wire  [10:0]  exp_exc_zeros_w;
	wire  [4:0]  exp_higher_bit;
	wire  [4:0]  exp_higher_or;
	wire  exp_infi_bus_w;
	wire  [7:0]  exp_man_and_or_w;
	wire  exp_or_result_w;
	wire  [11:0]  exp_pipeline_w;
	wire  [10:0]  exp_res_and_w;
	wire  [10:0]  exp_res_bus_w;
	wire  [10:0]  exp_res_int2_bus_w;
	wire  [10:0]  exp_res_int2_or_w;
	wire  [10:0]  exp_res_int2_w;
	wire  [10:0]  exp_res_int_w;
	wire  [10:0]  exp_res_w;
	wire  exp_sign_w;
	wire  [11:0]  exp_sub_a_w;
	wire  [11:0]  exp_sub_b_w;
	wire  [11:0]  exp_sub_w;
	wire  exp_zero_bus_w;
	wire  guard_bit_dffe1a_w;
	wire  guard_bit_quo_msb_m1;
	wire  guard_bit_quo_msb_m2;
	wire  guard_bit_w;
	wire  infi_combi_w;
	wire  infi_dataa_w;
	wire  infi_datab_w;
	wire  [63:0]  infi_res_w;
	wire  infinite_int_w;
	wire  infinite_w;
	wire  [52:0]  man_24_zeros_w;
	wire  man_a_and_msb2_w;
	wire  man_a_and_msb_w;
	wire  man_a_and_mux_w;
	wire  [51:0]  man_a_and_w;
	wire  [51:0]  man_a_bus_w;
	wire  [51:0]  man_a_int_w;
	wire  man_a_non_zero_w;
	wire  man_a_one_w;
	wire  man_a_or_msb2_w;
	wire  man_a_or_msb_w;
	wire  man_a_or_mux_w;
	wire  [51:0]  man_a_or_w;
	wire  [52:0]  man_a_w;
	wire  man_a_zero_w;
	wire  man_b_and_msb2_w;
	wire  man_b_and_msb_w;
	wire  man_b_and_mux_w;
	wire  [51:0]  man_b_and_w;
	wire  [51:0]  man_b_bus_w;
	wire  [51:0]  man_b_int_w;
	wire  man_b_non_zero_w;
	wire  man_b_one_w;
	wire  man_b_or_msb2_w;
	wire  man_b_or_msb_w;
	wire  man_b_or_mux_w;
	wire  [51:0]  man_b_or_w;
	wire  [52:0]  man_b_w;
	wire  man_b_zero_w;
	wire  [51:0]  man_exc_nan_w;
	wire  [51:0]  man_exc_zeros_w;
	wire  [51:0]  man_res_bus_w;
	wire  [52:0]  man_res_int2_w;
	wire  [52:0]  man_res_int_w;
	wire  [51:0]  man_res_or_w;
	wire  [52:0]  man_res_w;
	wire  mux1_exp_s0a;
	wire  mux1_exp_s1a;
	wire  [63:0]  mux_1_res_w;
	wire  [63:0]  mux_2_res_w;
	wire  [63:0]  mux_3_res_w;
	wire  mux_zero_non_zero_S0;
	wire  [52:0]  mux_zero_non_zero_w;
	wire  nan_dataa_w;
	wire  nan_datab_w;
	wire  [63:0]  nan_res_w;
	wire  nan_w;
	wire  norm_dataa_w;
	wire  norm_datab_w;
	wire  [10:0]  norm_infi_and_w;
	wire  [10:0]  norm_infi_bus_w;
	wire  [63:0]  norm_res_int_w;
	wire  [10:0]  norm_zero_bus_w;
	wire  [10:0]  norm_zero_or_w;
	wire  [10:0]  not_bias_addition_w;
	wire  not_exp_res_int2_or_res_w;
	wire  overflow_int_w;
	wire  [52:0]  overflow_man_w;
	wire  [10:0]  overflow_ones_w;
	wire  [82:0]  quo_msb_m1_compare_dataa;
	wire  [82:0]  quo_msb_m1_compare_datab;
	wire  quo_msb_m1_compare_w;
	wire  quo_msb_m1_w;
	wire  [83:0]  quo_msb_m2_compare_dataa;
	wire  [83:0]  quo_msb_m2_compare_datab;
	wire  quo_msb_m2_compare_w;
	wire  [52:0]  quotient_msb_m1_w;
	wire  [52:0]  quotient_msb_m2_w;
	wire  [55:0]  quotient_w;
	wire  [52:0]  remainder_srt_w;
	wire  [52:0]  res_rnded_man_w;
	wire  rnd_add_overf_w;
	wire  rnd_overflow;
	wire  [52:0]  rnded_man_w;
	wire  round_bit_dffe1a_w;
	wire  round_bit_quo_msb_m1;
	wire  round_bit_quo_msb_m2;
	wire  round_bit_w;
	wire  sign_a_w;
	wire  sign_b_w;
	wire  sign_div;
	wire  sign_div_pipeline_w;
	wire  sign_exc_bit_w;
	wire  signed_N_exp_h_or;
	wire  sticky_bit_dffe1a_w;
	wire  sticky_bit_quo_msb_m1;
	wire  [0:0]  sticky_bit_quo_msb_m1_bit;
	wire  [0:0]  sticky_bit_quo_msb_m1_or;
	wire  [0:0]  sticky_bit_quo_msb_m1_tmp;
	wire  sticky_bit_quo_msb_m2;
	wire  sticky_bit_w;
	wire  sticky_quo_msb_m1_comparator_lower_lower_ageb_w;
	wire  sticky_quo_msb_m1_comparator_lower_upper_aeb_w;
	wire  sticky_quo_msb_m1_comparator_lower_upper_agb_w;
	wire  sticky_quo_msb_m1_comparator_upper_lower_aeb_w;
	wire  sticky_quo_msb_m1_comparator_upper_lower_agb_w;
	wire  sticky_quo_msb_m1_comparator_upper_upper_aeb_w;
	wire  sticky_quo_msb_m1_comparator_upper_upper_agb_w;
	wire  sticky_quo_msb_m2_comparator_lower_ageb_w;
	wire  sticky_quo_msb_m2_comparator_upper_aeb_w;
	wire  sticky_quo_msb_m2_comparator_upper_agb_w;
	wire  [10:0]  underflow_zeros_w;
	wire  [11:0]  value_add_1_w;
	wire  [11:0]  value_minus_1_w;
	wire  [11:0]  value_normal_w;
	wire  [11:0]  value_zero_w;
	wire  [52:0]  zero_bit_23_w;
	wire  [62:0]  zero_bit_31_w;
	wire  [10:0]  zero_bit_8_w;
	wire  zero_bit_w;
	wire  zero_dataa_w;
	wire  zero_datab_w;
	wire  [63:0]  zero_res_w;
	wire  zero_w;

	altfp_divider64_altfp_div_csa_ivc   altfp_div_csa8
	( 
	.cin(add_1_w),
	.cout(wire_altfp_div_csa8_cout),
	.dataa(add_1_dataa_w),
	.datab(add_1_datab_w),
	.result(wire_altfp_div_csa8_result));
	altfp_divider64_altfp_div_srt_ext_e3f   altfp_div_srt_ext1
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.denom(man_b_w),
	.divider(wire_altfp_div_srt_ext1_divider),
	.numer(man_a_w),
	.quotient(wire_altfp_div_srt_ext1_quotient),
	.remain(wire_altfp_div_srt_ext1_remain));
	// synopsys translate_off
	initial
		and_or_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_dffe <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_dffe <= exp_man_and_or_w;
	// synopsys translate_off
	initial
		and_or_dffe1a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_dffe1a <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_dffe1a <= and_or_pipeline_w;
	// synopsys translate_off
	initial
		and_or_dffe3a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_dffe3a <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_dffe3a <= and_or_int_w;
	// synopsys translate_off
	initial
		and_or_pipeline0c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline0c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline0c <= and_or_dffe_w;
	// synopsys translate_off
	initial
		and_or_pipeline10c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline10c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline10c <= and_or_pipeline9c;
	// synopsys translate_off
	initial
		and_or_pipeline11c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline11c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline11c <= and_or_pipeline10c;
	// synopsys translate_off
	initial
		and_or_pipeline12c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline12c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline12c <= and_or_pipeline11c;
	// synopsys translate_off
	initial
		and_or_pipeline13c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline13c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline13c <= and_or_pipeline12c;
	// synopsys translate_off
	initial
		and_or_pipeline14c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline14c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline14c <= and_or_pipeline13c;
	// synopsys translate_off
	initial
		and_or_pipeline15c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline15c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline15c <= and_or_pipeline14c;
	// synopsys translate_off
	initial
		and_or_pipeline16c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline16c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline16c <= and_or_pipeline15c;
	// synopsys translate_off
	initial
		and_or_pipeline17c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline17c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline17c <= and_or_pipeline16c;
	// synopsys translate_off
	initial
		and_or_pipeline18c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline18c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline18c <= and_or_pipeline17c;
	// synopsys translate_off
	initial
		and_or_pipeline19c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline19c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline19c <= and_or_pipeline18c;
	// synopsys translate_off
	initial
		and_or_pipeline1c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline1c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline1c <= and_or_pipeline0c;
	// synopsys translate_off
	initial
		and_or_pipeline20c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline20c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline20c <= and_or_pipeline19c;
	// synopsys translate_off
	initial
		and_or_pipeline21c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline21c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline21c <= and_or_pipeline20c;
	// synopsys translate_off
	initial
		and_or_pipeline22c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline22c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline22c <= and_or_pipeline21c;
	// synopsys translate_off
	initial
		and_or_pipeline23c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline23c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline23c <= and_or_pipeline22c;
	// synopsys translate_off
	initial
		and_or_pipeline24c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline24c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline24c <= and_or_pipeline23c;
	// synopsys translate_off
	initial
		and_or_pipeline25c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline25c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline25c <= and_or_pipeline24c;
	// synopsys translate_off
	initial
		and_or_pipeline26c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline26c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline26c <= and_or_pipeline25c;
	// synopsys translate_off
	initial
		and_or_pipeline27c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline27c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline27c <= and_or_pipeline26c;
	// synopsys translate_off
	initial
		and_or_pipeline28c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline28c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline28c <= and_or_pipeline27c;
	// synopsys translate_off
	initial
		and_or_pipeline29c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline29c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline29c <= and_or_pipeline28c;
	// synopsys translate_off
	initial
		and_or_pipeline2c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline2c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline2c <= and_or_pipeline1c;
	// synopsys translate_off
	initial
		and_or_pipeline30c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline30c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline30c <= and_or_pipeline29c;
	// synopsys translate_off
	initial
		and_or_pipeline31c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline31c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline31c <= and_or_pipeline30c;
	// synopsys translate_off
	initial
		and_or_pipeline32c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline32c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline32c <= and_or_pipeline31c;
	// synopsys translate_off
	initial
		and_or_pipeline33c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline33c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline33c <= and_or_pipeline32c;
	// synopsys translate_off
	initial
		and_or_pipeline34c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline34c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline34c <= and_or_pipeline33c;
	// synopsys translate_off
	initial
		and_or_pipeline35c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline35c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline35c <= and_or_pipeline34c;
	// synopsys translate_off
	initial
		and_or_pipeline36c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline36c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline36c <= and_or_pipeline35c;
	// synopsys translate_off
	initial
		and_or_pipeline37c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline37c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline37c <= and_or_pipeline36c;
	// synopsys translate_off
	initial
		and_or_pipeline38c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline38c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline38c <= and_or_pipeline37c;
	// synopsys translate_off
	initial
		and_or_pipeline39c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline39c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline39c <= and_or_pipeline38c;
	// synopsys translate_off
	initial
		and_or_pipeline3c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline3c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline3c <= and_or_pipeline2c;
	// synopsys translate_off
	initial
		and_or_pipeline40c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline40c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline40c <= and_or_pipeline39c;
	// synopsys translate_off
	initial
		and_or_pipeline41c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline41c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline41c <= and_or_pipeline40c;
	// synopsys translate_off
	initial
		and_or_pipeline42c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline42c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline42c <= and_or_pipeline41c;
	// synopsys translate_off
	initial
		and_or_pipeline43c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline43c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline43c <= and_or_pipeline42c;
	// synopsys translate_off
	initial
		and_or_pipeline44c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline44c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline44c <= and_or_pipeline43c;
	// synopsys translate_off
	initial
		and_or_pipeline45c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline45c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline45c <= and_or_pipeline44c;
	// synopsys translate_off
	initial
		and_or_pipeline46c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline46c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline46c <= and_or_pipeline45c;
	// synopsys translate_off
	initial
		and_or_pipeline47c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline47c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline47c <= and_or_pipeline46c;
	// synopsys translate_off
	initial
		and_or_pipeline48c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline48c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline48c <= and_or_pipeline47c;
	// synopsys translate_off
	initial
		and_or_pipeline49c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline49c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline49c <= and_or_pipeline48c;
	// synopsys translate_off
	initial
		and_or_pipeline4c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline4c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline4c <= and_or_pipeline3c;
	// synopsys translate_off
	initial
		and_or_pipeline50c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline50c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline50c <= and_or_pipeline49c;
	// synopsys translate_off
	initial
		and_or_pipeline51c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline51c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline51c <= and_or_pipeline50c;
	// synopsys translate_off
	initial
		and_or_pipeline52c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline52c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline52c <= and_or_pipeline51c;
	// synopsys translate_off
	initial
		and_or_pipeline53c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline53c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline53c <= and_or_pipeline52c;
	// synopsys translate_off
	initial
		and_or_pipeline54c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline54c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline54c <= and_or_pipeline53c;
	// synopsys translate_off
	initial
		and_or_pipeline55c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline55c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline55c <= and_or_pipeline54c;
	// synopsys translate_off
	initial
		and_or_pipeline5c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline5c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline5c <= and_or_pipeline4c;
	// synopsys translate_off
	initial
		and_or_pipeline6c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline6c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline6c <= and_or_pipeline5c;
	// synopsys translate_off
	initial
		and_or_pipeline7c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline7c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline7c <= and_or_pipeline6c;
	// synopsys translate_off
	initial
		and_or_pipeline8c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline8c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline8c <= and_or_pipeline7c;
	// synopsys translate_off
	initial
		and_or_pipeline9c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) and_or_pipeline9c <= 8'b0;
		else if  (clk_en == 1'b1)   and_or_pipeline9c <= and_or_pipeline8c;
	// synopsys translate_off
	initial
		bias_addition_overf_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) bias_addition_overf_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   bias_addition_overf_dffe <= bias_addition_overf_w;
	// synopsys translate_off
	initial
		checked_quotient_dffe1a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) checked_quotient_dffe1a <= 53'b0;
		else if  (clk_en == 1'b1)   checked_quotient_dffe1a <= checked_quotient_w;
	// synopsys translate_off
	initial
		exp_a_and_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_a_and_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   exp_a_and_dffe <= exp_a_and_msb2_w;
	// synopsys translate_off
	initial
		exp_a_b_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_a_b_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   exp_a_b_dffe <= exp_or_result_w;
	// synopsys translate_off
	initial
		exp_a_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_a_dffe <= 11'b0;
		else if  (clk_en == 1'b1)   exp_a_dffe <= dataa_int[62:52];
	// synopsys translate_off
	initial
		exp_a_or_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_a_or_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   exp_a_or_dffe <= exp_a_or_msb2_w;
	// synopsys translate_off
	initial
		exp_b_and_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_b_and_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   exp_b_and_dffe <= exp_b_and_msb2_w;
	// synopsys translate_off
	initial
		exp_b_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_b_dffe <= 11'b0;
		else if  (clk_en == 1'b1)   exp_b_dffe <= datab_int[62:52];
	// synopsys translate_off
	initial
		exp_b_or_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_b_or_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   exp_b_or_dffe <= exp_b_or_msb2_w;
	// synopsys translate_off
	initial
		exp_dffe1a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe1a <= 12'b0;
		else if  (clk_en == 1'b1)   exp_dffe1a <= exp_pipeline_w;
	// synopsys translate_off
	initial
		exp_dffe2a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_dffe2a <= 12'b0;
		else if  (clk_en == 1'b1)   exp_dffe2a <= exp_dffe1a_w;
	// synopsys translate_off
	initial
		exp_pipeline0c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline0c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline0c <= exp_sub_w;
	// synopsys translate_off
	initial
		exp_pipeline10c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline10c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline10c <= exp_pipeline9c;
	// synopsys translate_off
	initial
		exp_pipeline11c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline11c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline11c <= exp_pipeline10c;
	// synopsys translate_off
	initial
		exp_pipeline12c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline12c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline12c <= exp_pipeline11c;
	// synopsys translate_off
	initial
		exp_pipeline13c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline13c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline13c <= exp_pipeline12c;
	// synopsys translate_off
	initial
		exp_pipeline14c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline14c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline14c <= exp_pipeline13c;
	// synopsys translate_off
	initial
		exp_pipeline15c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline15c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline15c <= exp_pipeline14c;
	// synopsys translate_off
	initial
		exp_pipeline16c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline16c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline16c <= exp_pipeline15c;
	// synopsys translate_off
	initial
		exp_pipeline17c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline17c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline17c <= exp_pipeline16c;
	// synopsys translate_off
	initial
		exp_pipeline18c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline18c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline18c <= exp_pipeline17c;
	// synopsys translate_off
	initial
		exp_pipeline19c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline19c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline19c <= exp_pipeline18c;
	// synopsys translate_off
	initial
		exp_pipeline1c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline1c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline1c <= exp_pipeline0c;
	// synopsys translate_off
	initial
		exp_pipeline20c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline20c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline20c <= exp_pipeline19c;
	// synopsys translate_off
	initial
		exp_pipeline21c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline21c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline21c <= exp_pipeline20c;
	// synopsys translate_off
	initial
		exp_pipeline22c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline22c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline22c <= exp_pipeline21c;
	// synopsys translate_off
	initial
		exp_pipeline23c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline23c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline23c <= exp_pipeline22c;
	// synopsys translate_off
	initial
		exp_pipeline24c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline24c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline24c <= exp_pipeline23c;
	// synopsys translate_off
	initial
		exp_pipeline25c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline25c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline25c <= exp_pipeline24c;
	// synopsys translate_off
	initial
		exp_pipeline26c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline26c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline26c <= exp_pipeline25c;
	// synopsys translate_off
	initial
		exp_pipeline27c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline27c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline27c <= exp_pipeline26c;
	// synopsys translate_off
	initial
		exp_pipeline28c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline28c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline28c <= exp_pipeline27c;
	// synopsys translate_off
	initial
		exp_pipeline29c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline29c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline29c <= exp_pipeline28c;
	// synopsys translate_off
	initial
		exp_pipeline2c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline2c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline2c <= exp_pipeline1c;
	// synopsys translate_off
	initial
		exp_pipeline30c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline30c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline30c <= exp_pipeline29c;
	// synopsys translate_off
	initial
		exp_pipeline31c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline31c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline31c <= exp_pipeline30c;
	// synopsys translate_off
	initial
		exp_pipeline32c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline32c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline32c <= exp_pipeline31c;
	// synopsys translate_off
	initial
		exp_pipeline33c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline33c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline33c <= exp_pipeline32c;
	// synopsys translate_off
	initial
		exp_pipeline34c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline34c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline34c <= exp_pipeline33c;
	// synopsys translate_off
	initial
		exp_pipeline35c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline35c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline35c <= exp_pipeline34c;
	// synopsys translate_off
	initial
		exp_pipeline36c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline36c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline36c <= exp_pipeline35c;
	// synopsys translate_off
	initial
		exp_pipeline37c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline37c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline37c <= exp_pipeline36c;
	// synopsys translate_off
	initial
		exp_pipeline38c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline38c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline38c <= exp_pipeline37c;
	// synopsys translate_off
	initial
		exp_pipeline39c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline39c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline39c <= exp_pipeline38c;
	// synopsys translate_off
	initial
		exp_pipeline3c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline3c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline3c <= exp_pipeline2c;
	// synopsys translate_off
	initial
		exp_pipeline40c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline40c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline40c <= exp_pipeline39c;
	// synopsys translate_off
	initial
		exp_pipeline41c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline41c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline41c <= exp_pipeline40c;
	// synopsys translate_off
	initial
		exp_pipeline42c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline42c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline42c <= exp_pipeline41c;
	// synopsys translate_off
	initial
		exp_pipeline43c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline43c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline43c <= exp_pipeline42c;
	// synopsys translate_off
	initial
		exp_pipeline44c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline44c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline44c <= exp_pipeline43c;
	// synopsys translate_off
	initial
		exp_pipeline45c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline45c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline45c <= exp_pipeline44c;
	// synopsys translate_off
	initial
		exp_pipeline46c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline46c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline46c <= exp_pipeline45c;
	// synopsys translate_off
	initial
		exp_pipeline47c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline47c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline47c <= exp_pipeline46c;
	// synopsys translate_off
	initial
		exp_pipeline48c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline48c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline48c <= exp_pipeline47c;
	// synopsys translate_off
	initial
		exp_pipeline49c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline49c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline49c <= exp_pipeline48c;
	// synopsys translate_off
	initial
		exp_pipeline4c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline4c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline4c <= exp_pipeline3c;
	// synopsys translate_off
	initial
		exp_pipeline50c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline50c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline50c <= exp_pipeline49c;
	// synopsys translate_off
	initial
		exp_pipeline51c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline51c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline51c <= exp_pipeline50c;
	// synopsys translate_off
	initial
		exp_pipeline52c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline52c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline52c <= exp_pipeline51c;
	// synopsys translate_off
	initial
		exp_pipeline53c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline53c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline53c <= exp_pipeline52c;
	// synopsys translate_off
	initial
		exp_pipeline54c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline54c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline54c <= exp_pipeline53c;
	// synopsys translate_off
	initial
		exp_pipeline5c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline5c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline5c <= exp_pipeline4c;
	// synopsys translate_off
	initial
		exp_pipeline6c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline6c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline6c <= exp_pipeline5c;
	// synopsys translate_off
	initial
		exp_pipeline7c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline7c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline7c <= exp_pipeline6c;
	// synopsys translate_off
	initial
		exp_pipeline8c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline8c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline8c <= exp_pipeline7c;
	// synopsys translate_off
	initial
		exp_pipeline9c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_pipeline9c <= 12'b0;
		else if  (clk_en == 1'b1)   exp_pipeline9c <= exp_pipeline8c;
	// synopsys translate_off
	initial
		exp_res_pipe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_res_pipe3 <= 11'b0;
		else if  (clk_en == 1'b1)   exp_res_pipe3 <= exp_res_int_w;
	// synopsys translate_off
	initial
		guard_bit_dffe1a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) guard_bit_dffe1a <= 1'b0;
		else if  (clk_en == 1'b1)   guard_bit_dffe1a <= guard_bit_w;
	// synopsys translate_off
	initial
		implied_bit = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) implied_bit <= 1'b0;
		else if  (clk_en == 1'b1)   implied_bit <= wire_altfp_div_srt_ext1_quotient[54];
	// synopsys translate_off
	initial
		implied_bit2a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) implied_bit2a <= 1'b0;
		else if  (clk_en == 1'b1)   implied_bit2a <= implied_bit;
	// synopsys translate_off
	initial
		man_a_and_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_a_and_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   man_a_and_dffe <= man_a_and_msb2_w;
	// synopsys translate_off
	initial
		man_a_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_a_dffe <= 52'b0;
		else if  (clk_en == 1'b1)   man_a_dffe <= dataa_int[51:0];
	// synopsys translate_off
	initial
		man_a_or_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_a_or_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   man_a_or_dffe <= man_a_or_msb2_w;
	// synopsys translate_off
	initial
		man_b_and_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_b_and_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   man_b_and_dffe <= man_b_and_msb2_w;
	// synopsys translate_off
	initial
		man_b_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_b_dffe <= 52'b0;
		else if  (clk_en == 1'b1)   man_b_dffe <= datab_int[51:0];
	// synopsys translate_off
	initial
		man_b_or_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_b_or_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   man_b_or_dffe <= man_b_or_msb2_w;
	// synopsys translate_off
	initial
		man_res_pipe3 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_res_pipe3 <= 53'b0;
		else if  (clk_en == 1'b1)   man_res_pipe3 <= man_res_int_w;
	// synopsys translate_off
	initial
		result_output_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) result_output_dffe <= 64'b0;
		else if  (clk_en == 1'b1)   result_output_dffe <= mux_3_res_w;
	// synopsys translate_off
	initial
		rnd_overflow_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rnd_overflow_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   rnd_overflow_dffe <= rnd_overflow;
	// synopsys translate_off
	initial
		rnded_man_pipe2a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rnded_man_pipe2a <= 53'b0;
		else if  (clk_en == 1'b1)   rnded_man_pipe2a <= rnded_man_w;
	// synopsys translate_off
	initial
		round_bit_dffe1a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) round_bit_dffe1a <= 1'b0;
		else if  (clk_en == 1'b1)   round_bit_dffe1a <= round_bit_w;
	// synopsys translate_off
	initial
		sign_a_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_a_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   sign_a_dffe <= dataa_int[63];
	// synopsys translate_off
	initial
		sign_b_dffe = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_b_dffe <= 1'b0;
		else if  (clk_en == 1'b1)   sign_b_dffe <= datab_int[63];
	// synopsys translate_off
	initial
		sign_div_pipeline0c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline0c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline0c <= sign_div;
	// synopsys translate_off
	initial
		sign_div_pipeline10c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline10c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline10c <= sign_div_pipeline9c;
	// synopsys translate_off
	initial
		sign_div_pipeline11c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline11c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline11c <= sign_div_pipeline10c;
	// synopsys translate_off
	initial
		sign_div_pipeline12c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline12c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline12c <= sign_div_pipeline11c;
	// synopsys translate_off
	initial
		sign_div_pipeline13c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline13c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline13c <= sign_div_pipeline12c;
	// synopsys translate_off
	initial
		sign_div_pipeline14c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline14c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline14c <= sign_div_pipeline13c;
	// synopsys translate_off
	initial
		sign_div_pipeline15c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline15c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline15c <= sign_div_pipeline14c;
	// synopsys translate_off
	initial
		sign_div_pipeline16c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline16c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline16c <= sign_div_pipeline15c;
	// synopsys translate_off
	initial
		sign_div_pipeline17c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline17c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline17c <= sign_div_pipeline16c;
	// synopsys translate_off
	initial
		sign_div_pipeline18c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline18c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline18c <= sign_div_pipeline17c;
	// synopsys translate_off
	initial
		sign_div_pipeline19c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline19c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline19c <= sign_div_pipeline18c;
	// synopsys translate_off
	initial
		sign_div_pipeline1c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline1c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline1c <= sign_div_pipeline0c;
	// synopsys translate_off
	initial
		sign_div_pipeline20c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline20c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline20c <= sign_div_pipeline19c;
	// synopsys translate_off
	initial
		sign_div_pipeline21c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline21c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline21c <= sign_div_pipeline20c;
	// synopsys translate_off
	initial
		sign_div_pipeline22c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline22c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline22c <= sign_div_pipeline21c;
	// synopsys translate_off
	initial
		sign_div_pipeline23c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline23c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline23c <= sign_div_pipeline22c;
	// synopsys translate_off
	initial
		sign_div_pipeline24c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline24c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline24c <= sign_div_pipeline23c;
	// synopsys translate_off
	initial
		sign_div_pipeline25c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline25c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline25c <= sign_div_pipeline24c;
	// synopsys translate_off
	initial
		sign_div_pipeline26c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline26c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline26c <= sign_div_pipeline25c;
	// synopsys translate_off
	initial
		sign_div_pipeline27c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline27c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline27c <= sign_div_pipeline26c;
	// synopsys translate_off
	initial
		sign_div_pipeline28c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline28c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline28c <= sign_div_pipeline27c;
	// synopsys translate_off
	initial
		sign_div_pipeline29c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline29c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline29c <= sign_div_pipeline28c;
	// synopsys translate_off
	initial
		sign_div_pipeline2c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline2c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline2c <= sign_div_pipeline1c;
	// synopsys translate_off
	initial
		sign_div_pipeline30c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline30c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline30c <= sign_div_pipeline29c;
	// synopsys translate_off
	initial
		sign_div_pipeline31c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline31c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline31c <= sign_div_pipeline30c;
	// synopsys translate_off
	initial
		sign_div_pipeline32c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline32c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline32c <= sign_div_pipeline31c;
	// synopsys translate_off
	initial
		sign_div_pipeline33c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline33c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline33c <= sign_div_pipeline32c;
	// synopsys translate_off
	initial
		sign_div_pipeline34c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline34c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline34c <= sign_div_pipeline33c;
	// synopsys translate_off
	initial
		sign_div_pipeline35c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline35c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline35c <= sign_div_pipeline34c;
	// synopsys translate_off
	initial
		sign_div_pipeline36c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline36c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline36c <= sign_div_pipeline35c;
	// synopsys translate_off
	initial
		sign_div_pipeline37c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline37c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline37c <= sign_div_pipeline36c;
	// synopsys translate_off
	initial
		sign_div_pipeline38c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline38c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline38c <= sign_div_pipeline37c;
	// synopsys translate_off
	initial
		sign_div_pipeline39c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline39c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline39c <= sign_div_pipeline38c;
	// synopsys translate_off
	initial
		sign_div_pipeline3c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline3c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline3c <= sign_div_pipeline2c;
	// synopsys translate_off
	initial
		sign_div_pipeline40c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline40c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline40c <= sign_div_pipeline39c;
	// synopsys translate_off
	initial
		sign_div_pipeline41c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline41c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline41c <= sign_div_pipeline40c;
	// synopsys translate_off
	initial
		sign_div_pipeline42c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline42c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline42c <= sign_div_pipeline41c;
	// synopsys translate_off
	initial
		sign_div_pipeline43c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline43c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline43c <= sign_div_pipeline42c;
	// synopsys translate_off
	initial
		sign_div_pipeline44c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline44c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline44c <= sign_div_pipeline43c;
	// synopsys translate_off
	initial
		sign_div_pipeline45c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline45c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline45c <= sign_div_pipeline44c;
	// synopsys translate_off
	initial
		sign_div_pipeline46c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline46c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline46c <= sign_div_pipeline45c;
	// synopsys translate_off
	initial
		sign_div_pipeline47c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline47c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline47c <= sign_div_pipeline46c;
	// synopsys translate_off
	initial
		sign_div_pipeline48c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline48c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline48c <= sign_div_pipeline47c;
	// synopsys translate_off
	initial
		sign_div_pipeline49c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline49c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline49c <= sign_div_pipeline48c;
	// synopsys translate_off
	initial
		sign_div_pipeline4c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline4c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline4c <= sign_div_pipeline3c;
	// synopsys translate_off
	initial
		sign_div_pipeline50c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline50c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline50c <= sign_div_pipeline49c;
	// synopsys translate_off
	initial
		sign_div_pipeline51c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline51c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline51c <= sign_div_pipeline50c;
	// synopsys translate_off
	initial
		sign_div_pipeline52c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline52c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline52c <= sign_div_pipeline51c;
	// synopsys translate_off
	initial
		sign_div_pipeline53c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline53c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline53c <= sign_div_pipeline52c;
	// synopsys translate_off
	initial
		sign_div_pipeline54c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline54c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline54c <= sign_div_pipeline53c;
	// synopsys translate_off
	initial
		sign_div_pipeline55c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline55c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline55c <= sign_div_pipeline54c;
	// synopsys translate_off
	initial
		sign_div_pipeline5c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline5c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline5c <= sign_div_pipeline4c;
	// synopsys translate_off
	initial
		sign_div_pipeline6c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline6c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline6c <= sign_div_pipeline5c;
	// synopsys translate_off
	initial
		sign_div_pipeline7c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline7c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline7c <= sign_div_pipeline6c;
	// synopsys translate_off
	initial
		sign_div_pipeline8c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline8c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline8c <= sign_div_pipeline7c;
	// synopsys translate_off
	initial
		sign_div_pipeline9c = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_div_pipeline9c <= 1'b0;
		else if  (clk_en == 1'b1)   sign_div_pipeline9c <= sign_div_pipeline8c;
	// synopsys translate_off
	initial
		sign_pipe1a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe1a <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe1a <= sign_div_pipeline_w;
	// synopsys translate_off
	initial
		sign_pipe2a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe2a <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe2a <= sign_pipe1a;
	// synopsys translate_off
	initial
		sign_pipe3a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_pipe3a <= 1'b0;
		else if  (clk_en == 1'b1)   sign_pipe3a <= sign_pipe2a;
	// synopsys translate_off
	initial
		sticky_bit_dffe1a = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sticky_bit_dffe1a <= 1'b0;
		else if  (clk_en == 1'b1)   sticky_bit_dffe1a <= sticky_bit_w;
	lpm_add_sub   add_sub10
	( 
	.cout(),
	.dataa(exp_dffe2a_w),
	.datab(bias_add_w),
	.overflow(wire_add_sub10_overflow),
	.result(wire_add_sub10_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub10.lpm_direction = "ADD",
		add_sub10.lpm_representation = "SIGNED",
		add_sub10.lpm_width = 12,
		add_sub10.lpm_type = "lpm_add_sub";
	lpm_add_sub   add_sub9
	( 
	.aclr(aclr),
	.clken(clk_en),
	.clock(clock),
	.cout(),
	.dataa(exp_sub_a_w),
	.datab(exp_sub_b_w),
	.overflow(),
	.result(wire_add_sub9_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.add_sub(1'b1),
	.cin()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub9.lpm_direction = "SUB",
		add_sub9.lpm_pipeline = 1,
		add_sub9.lpm_representation = "SIGNED",
		add_sub9.lpm_width = 12,
		add_sub9.lpm_type = "lpm_add_sub";
	lpm_compare   cmpr2
	( 
	.aeb(wire_cmpr2_aeb),
	.agb(wire_cmpr2_agb),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(quo_msb_m1_compare_dataa[82:60]),
	.datab(quo_msb_m1_compare_datab[82:60])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr2.lpm_representation = "UNSIGNED",
		cmpr2.lpm_width = 23,
		cmpr2.lpm_type = "lpm_compare";
	lpm_compare   cmpr3
	( 
	.aeb(wire_cmpr3_aeb),
	.agb(wire_cmpr3_agb),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(quo_msb_m1_compare_dataa[59:40]),
	.datab(quo_msb_m1_compare_datab[59:40])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr3.lpm_representation = "UNSIGNED",
		cmpr3.lpm_width = 20,
		cmpr3.lpm_type = "lpm_compare";
	lpm_compare   cmpr4
	( 
	.aeb(wire_cmpr4_aeb),
	.agb(wire_cmpr4_agb),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(quo_msb_m1_compare_dataa[39:20]),
	.datab(quo_msb_m1_compare_datab[39:20])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr4.lpm_representation = "UNSIGNED",
		cmpr4.lpm_width = 20,
		cmpr4.lpm_type = "lpm_compare";
	lpm_compare   cmpr5
	( 
	.aeb(),
	.agb(),
	.ageb(wire_cmpr5_ageb),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(quo_msb_m1_compare_dataa[19:0]),
	.datab(quo_msb_m1_compare_datab[19:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr5.lpm_representation = "UNSIGNED",
		cmpr5.lpm_width = 20,
		cmpr5.lpm_type = "lpm_compare";
	lpm_compare   cmpr6
	( 
	.aeb(wire_cmpr6_aeb),
	.agb(wire_cmpr6_agb),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(quo_msb_m2_compare_dataa[83:42]),
	.datab(quo_msb_m2_compare_datab[83:42])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr6.lpm_representation = "UNSIGNED",
		cmpr6.lpm_width = 42,
		cmpr6.lpm_type = "lpm_compare";
	lpm_compare   cmpr7
	( 
	.aeb(),
	.agb(),
	.ageb(wire_cmpr7_ageb),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(quo_msb_m2_compare_dataa[41:0]),
	.datab(quo_msb_m2_compare_datab[41:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr7.lpm_representation = "UNSIGNED",
		cmpr7.lpm_width = 42,
		cmpr7.lpm_type = "lpm_compare";
	assign
		aclr = 1'b0,
		add_1_dataa_w = {checked_quotient_dffe1a_w},
		add_1_datab_w = {53{1'b0}},
		add_1_w = ((((~ guard_bit_dffe1a_w) & round_bit_dffe1a_w) & sticky_bit_dffe1a_w) | (guard_bit_dffe1a_w & round_bit_dffe1a_w)),
		add_one_process_w = wire_altfp_div_csa8_result,
		and_or_dffe1a_w = and_or_dffe1a,
		and_or_dffe3a_w = and_or_dffe3a,
		and_or_dffe_w = and_or_dffe,
		and_or_int_w = and_or_dffe1a,
		and_or_pipeline_w = and_or_pipeline55c,
		bias_add_w = (({12{(~ exp_a_b_w)}} & value_zero_w) | ({12{exp_a_b_w}} & bias_value_w)),
		bias_addition_overf_w = (wire_add_sub10_overflow | ((~ exp_sign_w) & exp_bias_and_res_w)),
		bias_addition_w = wire_add_sub10_result[10:0],
		bias_value_w = (((({12{((~ mux1_exp_s1a) & (~ mux1_exp_s0a))}} & value_minus_1_w) | ({12{((~ mux1_exp_s1a) & mux1_exp_s0a)}} & value_normal_w)) | ({12{(mux1_exp_s1a & (~ mux1_exp_s0a))}} & value_normal_w)) | ({12{(mux1_exp_s1a & mux1_exp_s0a)}} & value_add_1_w)),
		checked_quotient_dffe1a_w = checked_quotient_dffe1a,
		checked_quotient_w = (({53{quo_msb_m1_w}} & quotient_msb_m1_w) | ({53{(~ quo_msb_m1_w)}} & quotient_msb_m2_w)),
		dataa_exp_bus_w = dataa[62:52],
		dataa_int = {dataa[63], (({63{dataa_S0}} & zero_bit_31_w) | ({63{(~ dataa_S0)}} & dataa[62:0]))},
		dataa_man_bus_w = dataa[51:0],
		dataa_S0 = ((~ exp_a_or_msb_w) & man_a_or_msb_w),
		datab_exp_bus_w = datab[62:52],
		datab_int = {datab[63], (({63{datab_S0}} & zero_bit_31_w) | ({63{(~ datab_S0)}} & datab[62:0]))},
		datab_man_bus_w = datab[51:0],
		datab_S0 = ((~ exp_b_or_msb_w) & man_b_or_msb_w),
		divider_srt_w = wire_altfp_div_srt_ext1_divider,
		exp_a_and_msb2_w = and_or_dffe3a_w[6],
		exp_a_and_msb_w = exp_a_and_w[10],
		exp_a_and_mux_w = ((dataa_S0 & zero_bit_w) | ((~ dataa_S0) & exp_a_and_msb_w)),
		exp_a_and_w = {(exp_a_and_w[9] & exp_a_bus_w[10]), (exp_a_and_w[8] & exp_a_bus_w[9]), (exp_a_and_w[7] & exp_a_bus_w[8]), (exp_a_and_w[6] & exp_a_bus_w[7]), (exp_a_and_w[5] & exp_a_bus_w[6]), (exp_a_and_w[4] & exp_a_bus_w[5]), (exp_a_and_w[3] & exp_a_bus_w[4]), (exp_a_and_w[2] & exp_a_bus_w[3]), (exp_a_and_w[1] & exp_a_bus_w[2]), (exp_a_and_w[0] & exp_a_bus_w[1]), exp_a_bus_w[0]},
		exp_a_b_w = exp_a_b_dffe,
		exp_a_bus_w = dataa_exp_bus_w,
		exp_a_non_zero_w = exp_a_or_dffe,
		exp_a_one_w = exp_a_and_dffe,
		exp_a_or_msb2_w = and_or_dffe3a_w[7],
		exp_a_or_msb_w = exp_a_or_w[10],
		exp_a_or_mux_w = ((dataa_S0 & zero_bit_w) | ((~ dataa_S0) & exp_a_or_msb_w)),
		exp_a_or_w = {(exp_a_or_w[9] | exp_a_bus_w[10]), (exp_a_or_w[8] | exp_a_bus_w[9]), (exp_a_or_w[7] | exp_a_bus_w[8]), (exp_a_or_w[6] | exp_a_bus_w[7]), (exp_a_or_w[5] | exp_a_bus_w[6]), (exp_a_or_w[4] | exp_a_bus_w[5]), (exp_a_or_w[3] | exp_a_bus_w[4]), (exp_a_or_w[2] | exp_a_bus_w[3]), (exp_a_or_w[1] | exp_a_bus_w[2]), (exp_a_or_w[0] | exp_a_bus_w[1]), exp_a_bus_w[0]},
		exp_a_w = exp_a_dffe,
		exp_a_zero_w = (~ exp_a_or_dffe),
		exp_b_and_msb2_w = and_or_dffe3a_w[2],
		exp_b_and_msb_w = exp_b_and_w[10],
		exp_b_and_mux_w = ((datab_S0 & zero_bit_w) | ((~ datab_S0) & exp_b_and_msb_w)),
		exp_b_and_w = {(exp_b_and_w[9] & exp_b_bus_w[10]), (exp_b_and_w[8] & exp_b_bus_w[9]), (exp_b_and_w[7] & exp_b_bus_w[8]), (exp_b_and_w[6] & exp_b_bus_w[7]), (exp_b_and_w[5] & exp_b_bus_w[6]), (exp_b_and_w[4] & exp_b_bus_w[5]), (exp_b_and_w[3] & exp_b_bus_w[4]), (exp_b_and_w[2] & exp_b_bus_w[3]), (exp_b_and_w[1] & exp_b_bus_w[2]), (exp_b_and_w[0] & exp_b_bus_w[1]), exp_b_bus_w[0]},
		exp_b_bus_w = datab_exp_bus_w,
		exp_b_non_zero_w = exp_b_or_dffe,
		exp_b_one_w = exp_b_and_dffe,
		exp_b_or_msb2_w = and_or_dffe3a_w[3],
		exp_b_or_msb_w = exp_b_or_w[10],
		exp_b_or_mux_w = ((datab_S0 & zero_bit_w) | ((~ datab_S0) & exp_b_or_msb_w)),
		exp_b_or_w = {(exp_b_or_w[9] | exp_b_bus_w[10]), (exp_b_or_w[8] | exp_b_bus_w[9]), (exp_b_or_w[7] | exp_b_bus_w[8]), (exp_b_or_w[6] | exp_b_bus_w[7]), (exp_b_or_w[5] | exp_b_bus_w[6]), (exp_b_or_w[4] | exp_b_bus_w[5]), (exp_b_or_w[3] | exp_b_bus_w[4]), (exp_b_or_w[2] | exp_b_bus_w[3]), (exp_b_or_w[1] | exp_b_bus_w[2]), (exp_b_or_w[0] | exp_b_bus_w[1]), exp_b_bus_w[0]},
		exp_b_w = exp_b_dffe,
		exp_b_zero_w = (~ exp_b_or_dffe),
		exp_bias_and_res_w = exp_bias_and_w[10],
		exp_bias_and_w = {(exp_bias_and_w[9] & exp_bias_bus_w[10]), (exp_bias_and_w[8] & exp_bias_bus_w[9]), (exp_bias_and_w[7] & exp_bias_bus_w[8]), (exp_bias_and_w[6] & exp_bias_bus_w[7]), (exp_bias_and_w[5] & exp_bias_bus_w[6]), (exp_bias_and_w[4] & exp_bias_bus_w[5]), (exp_bias_and_w[3] & exp_bias_bus_w[4]), (exp_bias_and_w[2] & exp_bias_bus_w[3]), (exp_bias_and_w[1] & exp_bias_bus_w[2]), (exp_bias_and_w[0] & exp_bias_bus_w[1]), exp_bias_bus_w[0]},
		exp_bias_bus_w = wire_add_sub10_result[10:0],
		exp_dffe1a_w = exp_dffe1a,
		exp_dffe2a_w = exp_dffe2a,
		exp_exc_ones_w = {11{1'b1}},
		exp_exc_zeros_w = {11{1'b0}},
		exp_higher_bit = not_bias_addition_w[10:6],
		exp_higher_or = {(exp_higher_or[3] | exp_higher_bit[4]), (exp_higher_or[2] | exp_higher_bit[3]), (exp_higher_or[1] | exp_higher_bit[2]), (exp_higher_or[0] | exp_higher_bit[1]), exp_higher_bit[0]},
		exp_infi_bus_w = norm_infi_and_w[10],
		exp_man_and_or_w = {exp_a_or_mux_w, exp_a_and_mux_w, man_a_or_mux_w, man_a_and_mux_w, exp_b_or_mux_w, exp_b_and_mux_w, man_b_or_mux_w, man_b_and_mux_w},
		exp_or_result_w = (and_or_dffe1a_w[7] | and_or_dffe1a_w[3]),
		exp_pipeline_w = exp_pipeline54c,
		exp_res_and_w = {(exp_res_and_w[9] & exp_res_bus_w[10]), (exp_res_and_w[8] & exp_res_bus_w[9]), (exp_res_and_w[7] & exp_res_bus_w[8]), (exp_res_and_w[6] & exp_res_bus_w[7]), (exp_res_and_w[5] & exp_res_bus_w[6]), (exp_res_and_w[4] & exp_res_bus_w[5]), (exp_res_and_w[3] & exp_res_bus_w[4]), (exp_res_and_w[2] & exp_res_bus_w[3]), (exp_res_and_w[1] & exp_res_bus_w[2]), (exp_res_and_w[0] & exp_res_bus_w[1]), exp_res_bus_w[0]},
		exp_res_bus_w = exp_res_w,
		exp_res_int2_bus_w = exp_res_int2_w,
		exp_res_int2_or_w = {(exp_res_int2_or_w[9] | exp_res_int2_bus_w[10]), (exp_res_int2_or_w[8] | exp_res_int2_bus_w[9]), (exp_res_int2_or_w[7] | exp_res_int2_bus_w[8]), (exp_res_int2_or_w[6] | exp_res_int2_bus_w[7]), (exp_res_int2_or_w[5] | exp_res_int2_bus_w[6]), (exp_res_int2_or_w[4] | exp_res_int2_bus_w[5]), (exp_res_int2_or_w[3] | exp_res_int2_bus_w[4]), (exp_res_int2_or_w[2] | exp_res_int2_bus_w[3]), (exp_res_int2_or_w[1] | exp_res_int2_bus_w[2]), (exp_res_int2_or_w[0] | exp_res_int2_bus_w[1]), exp_res_int2_bus_w[0]},
		exp_res_int2_w = exp_res_pipe3,
		exp_res_int_w = ((({11{((~ bias_addition_overf_w) & (~ exp_sign_w))}} & bias_addition_w) | ({11{((~ bias_addition_overf_w) & exp_sign_w)}} & underflow_zeros_w)) | ({11{(bias_addition_overf_w & (~ exp_sign_w))}} & overflow_ones_w)),
		exp_res_w = (({11{not_exp_res_int2_or_res_w}} & zero_bit_8_w) | ({11{(~ not_exp_res_int2_or_res_w)}} & exp_res_int2_w)),
		exp_sign_w = wire_add_sub10_result[11],
		exp_sub_a_w = {1'b0, exp_a_w},
		exp_sub_b_w = {1'b0, exp_b_w},
		exp_sub_w = wire_add_sub9_result,
		exp_zero_bus_w = (~ norm_zero_or_w[10]),
		guard_bit_dffe1a_w = guard_bit_dffe1a,
		guard_bit_quo_msb_m1 = quotient_w[2],
		guard_bit_quo_msb_m2 = quotient_w[1],
		guard_bit_w = ((quo_msb_m1_w & guard_bit_quo_msb_m1) | ((~ quo_msb_m1_w) & guard_bit_quo_msb_m2)),
		infi_combi_w = (((infi_dataa_w & norm_datab_w) | (norm_dataa_w & zero_datab_w)) | (infi_dataa_w & zero_datab_w)),
		infi_dataa_w = (exp_a_one_w & man_a_zero_w),
		infi_datab_w = (exp_b_one_w & man_b_zero_w),
		infi_res_w = {sign_exc_bit_w, exp_exc_ones_w, man_exc_zeros_w},
		infinite_int_w = (infi_combi_w | overflow_int_w),
		infinite_w = infinite_int_w,
		man_24_zeros_w = {53{1'b0}},
		man_a_and_msb2_w = and_or_dffe3a_w[4],
		man_a_and_msb_w = man_a_and_w[51],
		man_a_and_mux_w = ((dataa_S0 & zero_bit_w) | ((~ dataa_S0) & man_a_and_msb_w)),
		man_a_and_w = {(man_a_and_w[50] & man_a_bus_w[51]), (man_a_and_w[49] & man_a_bus_w[50]), (man_a_and_w[48] & man_a_bus_w[49]), (man_a_and_w[47] & man_a_bus_w[48]), (man_a_and_w[46] & man_a_bus_w[47]), (man_a_and_w[45] & man_a_bus_w[46]), (man_a_and_w[44] & man_a_bus_w[45]), (man_a_and_w[43] & man_a_bus_w[44]), (man_a_and_w[42] & man_a_bus_w[43]), (man_a_and_w[41] & man_a_bus_w[42]), (man_a_and_w[40] & man_a_bus_w[41]), (man_a_and_w[39] & man_a_bus_w[40]), (man_a_and_w[38] & man_a_bus_w[39]), (man_a_and_w[37] & man_a_bus_w[38]), (man_a_and_w[36] & man_a_bus_w[37]), (man_a_and_w[35] & man_a_bus_w[36]), (man_a_and_w[34] & man_a_bus_w[35]), (man_a_and_w[33] & man_a_bus_w[34]), (man_a_and_w[32] & man_a_bus_w[33]), (man_a_and_w[31] & man_a_bus_w[32]), (man_a_and_w[30] & man_a_bus_w[31]), (man_a_and_w[29] & man_a_bus_w[30]), (man_a_and_w[28] & man_a_bus_w[29]), (man_a_and_w[27] & man_a_bus_w[28]), (man_a_and_w[26] & man_a_bus_w[27]), (man_a_and_w[25] & man_a_bus_w[26]), (man_a_and_w[24] & man_a_bus_w[25]), (man_a_and_w[23] & man_a_bus_w[24]), (man_a_and_w[22] & man_a_bus_w[23]), (man_a_and_w[21] & man_a_bus_w[22]), (man_a_and_w[20] & man_a_bus_w[21]), (man_a_and_w[19] & man_a_bus_w[20]), (man_a_and_w[18] & man_a_bus_w[19]), (man_a_and_w[17] & man_a_bus_w[18]), (man_a_and_w[16] & man_a_bus_w[17]), (man_a_and_w[15] & man_a_bus_w[16]), (man_a_and_w[14] & man_a_bus_w[15]), (man_a_and_w[13] & man_a_bus_w[14]), (man_a_and_w[12] & man_a_bus_w[13]), (man_a_and_w[11] & man_a_bus_w[12]), (man_a_and_w[10] & man_a_bus_w[11]), (man_a_and_w[9] & man_a_bus_w[10]), (man_a_and_w[8] & man_a_bus_w[9]), (man_a_and_w[7] & man_a_bus_w[8]), (man_a_and_w[6] & man_a_bus_w[7]), (man_a_and_w[5] & man_a_bus_w[6]), (man_a_and_w[4] & man_a_bus_w[5]), (man_a_and_w[3] & man_a_bus_w[4]), (man_a_and_w[2] & man_a_bus_w[3]), (man_a_and_w[1] & man_a_bus_w[2]), (man_a_and_w[0] & man_a_bus_w[1]), man_a_bus_w[0]},
		man_a_bus_w = dataa_man_bus_w,
		man_a_int_w = man_a_dffe,
		man_a_non_zero_w = man_a_or_dffe,
		man_a_one_w = man_a_and_dffe,
		man_a_or_msb2_w = and_or_dffe3a_w[5],
		man_a_or_msb_w = man_a_or_w[51],
		man_a_or_mux_w = ((dataa_S0 & zero_bit_w) | ((~ dataa_S0) & man_a_or_msb_w)),
		man_a_or_w = {(man_a_or_w[50] | man_a_bus_w[51]), (man_a_or_w[49] | man_a_bus_w[50]), (man_a_or_w[48] | man_a_bus_w[49]), (man_a_or_w[47] | man_a_bus_w[48]), (man_a_or_w[46] | man_a_bus_w[47]), (man_a_or_w[45] | man_a_bus_w[46]), (man_a_or_w[44] | man_a_bus_w[45]), (man_a_or_w[43] | man_a_bus_w[44]), (man_a_or_w[42] | man_a_bus_w[43]), (man_a_or_w[41] | man_a_bus_w[42]), (man_a_or_w[40] | man_a_bus_w[41]), (man_a_or_w[39] | man_a_bus_w[40]), (man_a_or_w[38] | man_a_bus_w[39]), (man_a_or_w[37] | man_a_bus_w[38]), (man_a_or_w[36] | man_a_bus_w[37]), (man_a_or_w[35] | man_a_bus_w[36]), (man_a_or_w[34] | man_a_bus_w[35]), (man_a_or_w[33] | man_a_bus_w[34]), (man_a_or_w[32] | man_a_bus_w[33]), (man_a_or_w[31] | man_a_bus_w[32]), (man_a_or_w[30] | man_a_bus_w[31]), (man_a_or_w[29] | man_a_bus_w[30]), (man_a_or_w[28] | man_a_bus_w[29]), (man_a_or_w[27] | man_a_bus_w[28]), (man_a_or_w[26] | man_a_bus_w[27]), (man_a_or_w[25] | man_a_bus_w[26]), (man_a_or_w[24] | man_a_bus_w[25]), (man_a_or_w[23] | man_a_bus_w[24]), (man_a_or_w[22] | man_a_bus_w[23]), (man_a_or_w[21] | man_a_bus_w[22]), (man_a_or_w[20] | man_a_bus_w[21]), (man_a_or_w[19] | man_a_bus_w[20]), (man_a_or_w[18] | man_a_bus_w[19]), (man_a_or_w[17] | man_a_bus_w[18]), (man_a_or_w[16] | man_a_bus_w[17]), (man_a_or_w[15] | man_a_bus_w[16]), (man_a_or_w[14] | man_a_bus_w[15]), (man_a_or_w[13] | man_a_bus_w[14]), (man_a_or_w[12] | man_a_bus_w[13]), (man_a_or_w[11] | man_a_bus_w[12]), (man_a_or_w[10] | man_a_bus_w[11]), (man_a_or_w[9] | man_a_bus_w[10]), (man_a_or_w[8] | man_a_bus_w[9]), (man_a_or_w[7] | man_a_bus_w[8]), (man_a_or_w[6] | man_a_bus_w[7]), (man_a_or_w[5] | man_a_bus_w[6]), (man_a_or_w[4] | man_a_bus_w[5]), (man_a_or_w[3] | man_a_bus_w[4]), (man_a_or_w[2] | man_a_bus_w[3]), (man_a_or_w[1] | man_a_bus_w[2]), (man_a_or_w[0] | man_a_bus_w[1]), man_a_bus_w[0]},
		man_a_w = {1'b1, man_a_int_w},
		man_a_zero_w = (~ man_a_or_dffe),
		man_b_and_msb2_w = and_or_dffe3a_w[0],
		man_b_and_msb_w = man_b_and_w[51],
		man_b_and_mux_w = ((datab_S0 & zero_bit_w) | ((~ datab_S0) & man_b_and_msb_w)),
		man_b_and_w = {(man_b_and_w[50] & man_b_bus_w[51]), (man_b_and_w[49] & man_b_bus_w[50]), (man_b_and_w[48] & man_b_bus_w[49]), (man_b_and_w[47] & man_b_bus_w[48]), (man_b_and_w[46] & man_b_bus_w[47]), (man_b_and_w[45] & man_b_bus_w[46]), (man_b_and_w[44] & man_b_bus_w[45]), (man_b_and_w[43] & man_b_bus_w[44]), (man_b_and_w[42] & man_b_bus_w[43]), (man_b_and_w[41] & man_b_bus_w[42]), (man_b_and_w[40] & man_b_bus_w[41]), (man_b_and_w[39] & man_b_bus_w[40]), (man_b_and_w[38] & man_b_bus_w[39]), (man_b_and_w[37] & man_b_bus_w[38]), (man_b_and_w[36] & man_b_bus_w[37]), (man_b_and_w[35] & man_b_bus_w[36]), (man_b_and_w[34] & man_b_bus_w[35]), (man_b_and_w[33] & man_b_bus_w[34]), (man_b_and_w[32] & man_b_bus_w[33]), (man_b_and_w[31] & man_b_bus_w[32]), (man_b_and_w[30] & man_b_bus_w[31]), (man_b_and_w[29] & man_b_bus_w[30]), (man_b_and_w[28] & man_b_bus_w[29]), (man_b_and_w[27] & man_b_bus_w[28]), (man_b_and_w[26] & man_b_bus_w[27]), (man_b_and_w[25] & man_b_bus_w[26]), (man_b_and_w[24] & man_b_bus_w[25]), (man_b_and_w[23] & man_b_bus_w[24]), (man_b_and_w[22] & man_b_bus_w[23]), (man_b_and_w[21] & man_b_bus_w[22]), (man_b_and_w[20] & man_b_bus_w[21]), (man_b_and_w[19] & man_b_bus_w[20]), (man_b_and_w[18] & man_b_bus_w[19]), (man_b_and_w[17] & man_b_bus_w[18]), (man_b_and_w[16] & man_b_bus_w[17]), (man_b_and_w[15] & man_b_bus_w[16]), (man_b_and_w[14] & man_b_bus_w[15]), (man_b_and_w[13] & man_b_bus_w[14]), (man_b_and_w[12] & man_b_bus_w[13]), (man_b_and_w[11] & man_b_bus_w[12]), (man_b_and_w[10] & man_b_bus_w[11]), (man_b_and_w[9] & man_b_bus_w[10]), (man_b_and_w[8] & man_b_bus_w[9]), (man_b_and_w[7] & man_b_bus_w[8]), (man_b_and_w[6] & man_b_bus_w[7]), (man_b_and_w[5] & man_b_bus_w[6]), (man_b_and_w[4] & man_b_bus_w[5]), (man_b_and_w[3] & man_b_bus_w[4]), (man_b_and_w[2] & man_b_bus_w[3]), (man_b_and_w[1] & man_b_bus_w[2]), (man_b_and_w[0] & man_b_bus_w[1]), man_b_bus_w[0]},
		man_b_bus_w = datab_man_bus_w,
		man_b_int_w = man_b_dffe,
		man_b_non_zero_w = man_b_or_dffe,
		man_b_one_w = man_b_and_dffe,
		man_b_or_msb2_w = and_or_dffe3a_w[1],
		man_b_or_msb_w = man_b_or_w[51],
		man_b_or_mux_w = ((datab_S0 & zero_bit_w) | ((~ datab_S0) & man_b_or_msb_w)),
		man_b_or_w = {(man_b_or_w[50] | man_b_bus_w[51]), (man_b_or_w[49] | man_b_bus_w[50]), (man_b_or_w[48] | man_b_bus_w[49]), (man_b_or_w[47] | man_b_bus_w[48]), (man_b_or_w[46] | man_b_bus_w[47]), (man_b_or_w[45] | man_b_bus_w[46]), (man_b_or_w[44] | man_b_bus_w[45]), (man_b_or_w[43] | man_b_bus_w[44]), (man_b_or_w[42] | man_b_bus_w[43]), (man_b_or_w[41] | man_b_bus_w[42]), (man_b_or_w[40] | man_b_bus_w[41]), (man_b_or_w[39] | man_b_bus_w[40]), (man_b_or_w[38] | man_b_bus_w[39]), (man_b_or_w[37] | man_b_bus_w[38]), (man_b_or_w[36] | man_b_bus_w[37]), (man_b_or_w[35] | man_b_bus_w[36]), (man_b_or_w[34] | man_b_bus_w[35]), (man_b_or_w[33] | man_b_bus_w[34]), (man_b_or_w[32] | man_b_bus_w[33]), (man_b_or_w[31] | man_b_bus_w[32]), (man_b_or_w[30] | man_b_bus_w[31]), (man_b_or_w[29] | man_b_bus_w[30]), (man_b_or_w[28] | man_b_bus_w[29]), (man_b_or_w[27] | man_b_bus_w[28]), (man_b_or_w[26] | man_b_bus_w[27]), (man_b_or_w[25] | man_b_bus_w[26]), (man_b_or_w[24] | man_b_bus_w[25]), (man_b_or_w[23] | man_b_bus_w[24]), (man_b_or_w[22] | man_b_bus_w[23]), (man_b_or_w[21] | man_b_bus_w[22]), (man_b_or_w[20] | man_b_bus_w[21]), (man_b_or_w[19] | man_b_bus_w[20]), (man_b_or_w[18] | man_b_bus_w[19]), (man_b_or_w[17] | man_b_bus_w[18]), (man_b_or_w[16] | man_b_bus_w[17]), (man_b_or_w[15] | man_b_bus_w[16]), (man_b_or_w[14] | man_b_bus_w[15]), (man_b_or_w[13] | man_b_bus_w[14]), (man_b_or_w[12] | man_b_bus_w[13]), (man_b_or_w[11] | man_b_bus_w[12]), (man_b_or_w[10] | man_b_bus_w[11]), (man_b_or_w[9] | man_b_bus_w[10]), (man_b_or_w[8] | man_b_bus_w[9]), (man_b_or_w[7] | man_b_bus_w[8]), (man_b_or_w[6] | man_b_bus_w[7]), (man_b_or_w[5] | man_b_bus_w[6]), (man_b_or_w[4] | man_b_bus_w[5]), (man_b_or_w[3] | man_b_bus_w[4]), (man_b_or_w[2] | man_b_bus_w[3]), (man_b_or_w[1] | man_b_bus_w[2]), (man_b_or_w[0] | man_b_bus_w[1]), man_b_bus_w[0]},
		man_b_w = {1'b1, man_b_int_w},
		man_b_zero_w = (~ man_b_or_dffe),
		man_exc_nan_w = {1'b1, man_exc_zeros_w[50:0]},
		man_exc_zeros_w = {52{1'b0}},
		man_res_bus_w = man_res_w[51:0],
		man_res_int2_w = man_res_pipe3,
		man_res_int_w = mux_zero_non_zero_w,
		man_res_or_w = {(man_res_or_w[50] | man_res_bus_w[51]), (man_res_or_w[49] | man_res_bus_w[50]), (man_res_or_w[48] | man_res_bus_w[49]), (man_res_or_w[47] | man_res_bus_w[48]), (man_res_or_w[46] | man_res_bus_w[47]), (man_res_or_w[45] | man_res_bus_w[46]), (man_res_or_w[44] | man_res_bus_w[45]), (man_res_or_w[43] | man_res_bus_w[44]), (man_res_or_w[42] | man_res_bus_w[43]), (man_res_or_w[41] | man_res_bus_w[42]), (man_res_or_w[40] | man_res_bus_w[41]), (man_res_or_w[39] | man_res_bus_w[40]), (man_res_or_w[38] | man_res_bus_w[39]), (man_res_or_w[37] | man_res_bus_w[38]), (man_res_or_w[36] | man_res_bus_w[37]), (man_res_or_w[35] | man_res_bus_w[36]), (man_res_or_w[34] | man_res_bus_w[35]), (man_res_or_w[33] | man_res_bus_w[34]), (man_res_or_w[32] | man_res_bus_w[33]), (man_res_or_w[31] | man_res_bus_w[32]), (man_res_or_w[30] | man_res_bus_w[31]), (man_res_or_w[29] | man_res_bus_w[30]), (man_res_or_w[28] | man_res_bus_w[29]), (man_res_or_w[27] | man_res_bus_w[28]), (man_res_or_w[26] | man_res_bus_w[27]), (man_res_or_w[25] | man_res_bus_w[26]), (man_res_or_w[24] | man_res_bus_w[25]), (man_res_or_w[23] | man_res_bus_w[24]), (man_res_or_w[22] | man_res_bus_w[23]), (man_res_or_w[21] | man_res_bus_w[22]), (man_res_or_w[20] | man_res_bus_w[21]), (man_res_or_w[19] | man_res_bus_w[20]), (man_res_or_w[18] | man_res_bus_w[19]), (man_res_or_w[17] | man_res_bus_w[18]), (man_res_or_w[16] | man_res_bus_w[17]), (man_res_or_w[15] | man_res_bus_w[16]), (man_res_or_w[14] | man_res_bus_w[15]), (man_res_or_w[13] | man_res_bus_w[14]), (man_res_or_w[12] | man_res_bus_w[13]), (man_res_or_w[11] | man_res_bus_w[12]), (man_res_or_w[10] | man_res_bus_w[11]), (man_res_or_w[9] | man_res_bus_w[10]), (man_res_or_w[8] | man_res_bus_w[9]), (man_res_or_w[7] | man_res_bus_w[8]), (man_res_or_w[6] | man_res_bus_w[7]), (man_res_or_w[5] | man_res_bus_w[6]), (man_res_or_w[4] | man_res_bus_w[5]), (man_res_or_w[3] | man_res_bus_w[4]), (man_res_or_w[2] | man_res_bus_w[3]), (man_res_or_w[1] | man_res_bus_w[2]), (man_res_or_w[0] | man_res_bus_w[1]), man_res_bus_w[0]}
,
		man_res_w = (({53{not_exp_res_int2_or_res_w}} & zero_bit_23_w) | ({53{(~ not_exp_res_int2_or_res_w)}} & man_res_int2_w)),
		mux1_exp_s0a = rnd_add_overf_w,
		mux1_exp_s1a = implied_bit2a,
		mux_1_res_w = (({64{infinite_w}} & infi_res_w) | ({64{(~ infinite_w)}} & norm_res_int_w)),
		mux_2_res_w = (({64{zero_w}} & zero_res_w) | ({64{(~ zero_w)}} & mux_1_res_w)),
		mux_3_res_w = (({64{nan_w}} & nan_res_w) | ({64{(~ nan_w)}} & mux_2_res_w)),
		mux_zero_non_zero_S0 = (((exp_zero_bus_w | signed_N_exp_h_or) | bias_addition_overf_w) | (exp_infi_bus_w & (~ exp_sign_w))),
		mux_zero_non_zero_w = (({53{mux_zero_non_zero_S0}} & man_24_zeros_w) | ({53{(~ mux_zero_non_zero_S0)}} & res_rnded_man_w)),
		nan_dataa_w = (exp_a_one_w & (man_a_non_zero_w | man_a_one_w)),
		nan_datab_w = (exp_b_one_w & (man_b_non_zero_w | man_b_one_w)),
		nan_res_w = {sign_exc_bit_w, exp_exc_ones_w, man_exc_nan_w},
		nan_w = (((nan_dataa_w | nan_datab_w) | (zero_dataa_w & zero_datab_w)) | (infi_dataa_w & infi_datab_w)),
		norm_dataa_w = ((exp_a_non_zero_w & ((man_a_zero_w | man_a_non_zero_w) | man_a_one_w)) & (~ exp_a_one_w)),
		norm_datab_w = ((exp_b_non_zero_w & ((man_b_zero_w | man_b_non_zero_w) | man_b_one_w)) & (~ exp_b_one_w)),
		norm_infi_and_w = {(norm_infi_and_w[9] & norm_infi_bus_w[10]), (norm_infi_and_w[8] & norm_infi_bus_w[9]), (norm_infi_and_w[7] & norm_infi_bus_w[8]), (norm_infi_and_w[6] & norm_infi_bus_w[7]), (norm_infi_and_w[5] & norm_infi_bus_w[6]), (norm_infi_and_w[4] & norm_infi_bus_w[5]), (norm_infi_and_w[3] & norm_infi_bus_w[4]), (norm_infi_and_w[2] & norm_infi_bus_w[3]), (norm_infi_and_w[1] & norm_infi_bus_w[2]), (norm_infi_and_w[0] & norm_infi_bus_w[1]), norm_infi_bus_w[0]},
		norm_infi_bus_w = bias_addition_w,
		norm_res_int_w = {sign_pipe3a, exp_res_w[10:0], man_res_w[51:0]},
		norm_zero_bus_w = bias_addition_w,
		norm_zero_or_w = {(norm_zero_or_w[9] | norm_zero_bus_w[10]), (norm_zero_or_w[8] | norm_zero_bus_w[9]), (norm_zero_or_w[7] | norm_zero_bus_w[8]), (norm_zero_or_w[6] | norm_zero_bus_w[7]), (norm_zero_or_w[5] | norm_zero_bus_w[6]), (norm_zero_or_w[4] | norm_zero_bus_w[5]), (norm_zero_or_w[3] | norm_zero_bus_w[4]), (norm_zero_or_w[2] | norm_zero_bus_w[3]), (norm_zero_or_w[1] | norm_zero_bus_w[2]), (norm_zero_or_w[0] | norm_zero_bus_w[1]), norm_zero_bus_w[0]},
		not_bias_addition_w = (~ bias_addition_w),
		not_exp_res_int2_or_res_w = (~ exp_res_int2_or_w[10]),
		overflow_int_w = (((bias_addition_overf_dffe & (~ nan_w)) & (~ infi_combi_w)) & (~ ((norm_dataa_w & (~ zero_dataa_w)) & zero_datab_w))),
		overflow_man_w = {1'b1, {52{1'b0}}},
		overflow_ones_w = {11{1'b1}},
		quo_msb_m1_compare_dataa = {remainder_srt_w, {30{1'b0}}},
		quo_msb_m1_compare_datab = {{30{1'b0}}, divider_srt_w},
		quo_msb_m1_compare_w = (((sticky_quo_msb_m1_comparator_upper_upper_agb_w | (sticky_quo_msb_m1_comparator_upper_upper_aeb_w & sticky_quo_msb_m1_comparator_upper_lower_agb_w)) | (sticky_quo_msb_m1_comparator_upper_lower_aeb_w & sticky_quo_msb_m1_comparator_lower_upper_agb_w)) | (sticky_quo_msb_m1_comparator_lower_upper_aeb_w & sticky_quo_msb_m1_comparator_lower_lower_ageb_w)),
		quo_msb_m1_w = quotient_w[54],
		quo_msb_m2_compare_dataa = {remainder_srt_w, {31{1'b0}}},
		quo_msb_m2_compare_datab = {{31{1'b0}}, divider_srt_w},
		quo_msb_m2_compare_w = (sticky_quo_msb_m2_comparator_upper_agb_w | (sticky_quo_msb_m2_comparator_upper_aeb_w & sticky_quo_msb_m2_comparator_lower_ageb_w)),
		quotient_msb_m1_w = quotient_w[54:2],
		quotient_msb_m2_w = quotient_w[53:1],
		quotient_w = wire_altfp_div_srt_ext1_quotient,
		remainder_srt_w = wire_altfp_div_srt_ext1_remain,
		res_rnded_man_w = rnded_man_pipe2a,
		result = result_output_dffe,
		rnd_add_overf_w = rnd_overflow_dffe,
		rnd_overflow = wire_altfp_div_csa8_cout,
		rnded_man_w = (({53{rnd_overflow}} & overflow_man_w) | ({53{(~ rnd_overflow)}} & add_one_process_w)),
		round_bit_dffe1a_w = round_bit_dffe1a,
		round_bit_quo_msb_m1 = quotient_w[1],
		round_bit_quo_msb_m2 = quotient_w[0],
		round_bit_w = ((quo_msb_m1_w & round_bit_quo_msb_m1) | ((~ quo_msb_m1_w) & round_bit_quo_msb_m2)),
		sign_a_w = sign_a_dffe,
		sign_b_w = sign_b_dffe,
		sign_div = (sign_a_w ^ sign_b_w),
		sign_div_pipeline_w = sign_div_pipeline55c,
		sign_exc_bit_w = sign_pipe3a,
		signed_N_exp_h_or = (exp_sign_w & exp_higher_or[4]),
		sticky_bit_dffe1a_w = sticky_bit_dffe1a,
		sticky_bit_quo_msb_m1 = (quo_msb_m1_compare_w | sticky_bit_quo_msb_m1_or[0]),
		sticky_bit_quo_msb_m1_bit = sticky_bit_quo_msb_m1_tmp,
		sticky_bit_quo_msb_m1_or = {sticky_bit_quo_msb_m1_bit[0]},
		sticky_bit_quo_msb_m1_tmp = quotient_w[0],
		sticky_bit_quo_msb_m2 = quo_msb_m2_compare_w,
		sticky_bit_w = ((quo_msb_m1_w & sticky_bit_quo_msb_m1) | ((~ quo_msb_m1_w) & sticky_bit_quo_msb_m2)),
		sticky_quo_msb_m1_comparator_lower_lower_ageb_w = wire_cmpr5_ageb,
		sticky_quo_msb_m1_comparator_lower_upper_aeb_w = wire_cmpr4_aeb,
		sticky_quo_msb_m1_comparator_lower_upper_agb_w = wire_cmpr4_agb,
		sticky_quo_msb_m1_comparator_upper_lower_aeb_w = wire_cmpr3_aeb,
		sticky_quo_msb_m1_comparator_upper_lower_agb_w = wire_cmpr3_agb,
		sticky_quo_msb_m1_comparator_upper_upper_aeb_w = wire_cmpr2_aeb,
		sticky_quo_msb_m1_comparator_upper_upper_agb_w = wire_cmpr2_agb,
		sticky_quo_msb_m2_comparator_lower_ageb_w = wire_cmpr7_ageb,
		sticky_quo_msb_m2_comparator_upper_aeb_w = wire_cmpr6_aeb,
		sticky_quo_msb_m2_comparator_upper_agb_w = wire_cmpr6_agb,
		underflow_zeros_w = {11{1'b0}},
		value_add_1_w = 12'b010000000000,
		value_minus_1_w = 12'b001111111110,
		value_normal_w = 12'b001111111111,
		value_zero_w = {12{1'b0}},
		zero_bit_23_w = {53{1'b0}},
		zero_bit_31_w = {63{1'b0}},
		zero_bit_8_w = {11{1'b0}},
		zero_bit_w = 1'b0,
		zero_dataa_w = (exp_a_zero_w & man_a_zero_w),
		zero_datab_w = (exp_b_zero_w & man_b_zero_w),
		zero_res_w = {sign_exc_bit_w, exp_exc_zeros_w, man_exc_zeros_w},
		zero_w = (((zero_dataa_w & norm_datab_w) | (norm_dataa_w & infi_datab_w)) | (zero_dataa_w & infi_datab_w));
endmodule //altfp_divider64_altfp_div_1vh
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module altfp_divider64_61 (
	clk_en,
	clock,
	dataa,
	datab,
	result);

	input	  clk_en;
	input	  clock;
	input	[63:0]  dataa;
	input	[63:0]  datab;
	output	[63:0]  result;

	wire [63:0] sub_wire0;
	wire [63:0] result = sub_wire0[63:0];

	altfp_divider64_altfp_div_1vh	altfp_divider64_altfp_div_1vh_component (
				.clk_en (clk_en),
				.clock (clock),
				.datab (datab),
				.dataa (dataa),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: DENORMAL_SUPPORT STRING "NO"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: CONSTANT: OPTIMIZE STRING "SPEED"
// Retrieval info: CONSTANT: PIPELINE NUMERIC "61"
// Retrieval info: CONSTANT: REDUCED_FUNCTIONALITY STRING "NO"
// Retrieval info: CONSTANT: WIDTH_EXP NUMERIC "11"
// Retrieval info: CONSTANT: WIDTH_MAN NUMERIC "52"
// Retrieval info: USED_PORT: clk_en 0 0 0 0 INPUT NODEFVAL "clk_en"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: dataa 0 0 64 0 INPUT NODEFVAL "dataa[63..0]"
// Retrieval info: USED_PORT: datab 0 0 64 0 INPUT NODEFVAL "datab[63..0]"
// Retrieval info: USED_PORT: result 0 0 64 0 OUTPUT NODEFVAL "result[63..0]"
// Retrieval info: CONNECT: @clk_en 0 0 0 0 clk_en 0 0 0 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @dataa 0 0 64 0 dataa 0 0 64 0
// Retrieval info: CONNECT: @datab 0 0 64 0 datab 0 0 64 0
// Retrieval info: CONNECT: result 0 0 64 0 @result 0 0 64 0
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider64.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider64.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider64.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider64.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider64_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_divider64_bb.v FALSE
