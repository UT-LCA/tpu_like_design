// megafunction wizard: %ALTFP_CONVERT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: ALTFP_CONVERT 

// ============================================================
// File Name: altfp_truncate.v
// Megafunction Name(s):
// 			ALTFP_CONVERT
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 12.0 Build 178 05/31/2012 SJ Full Version
// ************************************************************


//Copyright (C) 1991-2012 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//altfp_convert CBX_AUTO_BLACKBOX="ALL" DEVICE_FAMILY="Cyclone II" OPERATION="FLOAT2FLOAT" ROUNDING="TO_NEAREST" WIDTH_DATA=64 WIDTH_EXP_INPUT=11 WIDTH_EXP_OUTPUT=8 WIDTH_INT=32 WIDTH_MAN_INPUT=52 WIDTH_MAN_OUTPUT=23 WIDTH_RESULT=32 clk_en clock dataa result
//VERSION_BEGIN 12.0 cbx_altbarrel_shift 2012:05:31:20:23:38:SJ cbx_altfp_convert 2012:05:31:20:23:38:SJ cbx_altpriority_encoder 2012:05:31:20:23:38:SJ cbx_altsyncram 2012:05:31:20:23:38:SJ cbx_cycloneii 2012:05:31:20:23:38:SJ cbx_lpm_abs 2012:05:31:20:23:38:SJ cbx_lpm_add_sub 2012:05:31:20:23:38:SJ cbx_lpm_compare 2012:05:31:20:23:38:SJ cbx_lpm_decode 2012:05:31:20:23:38:SJ cbx_lpm_divide 2012:05:31:20:23:38:SJ cbx_lpm_mux 2012:05:31:20:23:38:SJ cbx_mgl 2012:05:31:20:24:43:SJ cbx_stratix 2012:05:31:20:23:38:SJ cbx_stratixii 2012:05:31:20:23:38:SJ cbx_stratixiii 2012:05:31:20:23:38:SJ cbx_stratixv 2012:05:31:20:23:38:SJ cbx_util_mgl 2012:05:31:20:23:38:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = lpm_add_sub 3 lpm_compare 1 reg 136 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  altfp_truncate_altfp_convert_bpn
	( 
	clk_en,
	clock,
	dataa,
	result) ;
	input   clk_en;
	input   clock;
	input   [63:0]  dataa;
	output   [31:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   clk_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	reg	[11:0]	bias_adjust_subtractor_reg;
	reg	exp_and_reg1;
	reg	exp_and_reg2;
	reg	exp_or_reg1;
	reg	exp_or_reg2;
	reg	exponent_dp_sign_reg;
	reg	man_or1_reg1;
	reg	man_or2_reg1;
	reg	man_or_reg2;
	reg	[22:0]	mantissa_sp_reg;
	reg	rnd_add_1_co_reg;
	reg	rnd_add_1_reg;
	reg	[22:0]	rnd_add_1_res_reg;
	reg	[10:0]	rnded_exponent_dp_reg;
	reg	[22:0]	rnded_mantissa_sp_reg;
	reg	sign_reg1;
	reg	sign_reg2;
	reg	[31:0]	sp_result_reg;
	wire  [11:0]   wire_add_sub1_result;
	wire  wire_add_sub2_cout;
	wire  [22:0]   wire_add_sub2_result;
	wire  [10:0]   wire_add_sub3_result;
	wire  wire_cmpr4_agb;
	wire aclr;
	wire  [22:0]  added_mantissa_sp_w;
	wire  [11:0]  bias_adjust_a;
	wire  [11:0]  bias_adjust_b;
	wire  denormal_input_w;
	wire  [10:0]  exp_and;
	wire  exp_and_w;
	wire  [10:0]  exp_bus;
	wire  [10:0]  exp_com_bus;
	wire  exp_com_nor_w;
	wire  [10:0]  exp_com_or;
	wire  [7:0]  exp_exc_ones_w;
	wire  [7:0]  exp_exc_zeros_w;
	wire  [10:0]  exp_or;
	wire  exp_or_w;
	wire  [10:0]  exponent_comparator_w;
	wire  exponent_dp_sign_w;
	wire  [10:0]  exponent_dp_w;
	wire  [10:0]  exponent_input;
	wire  guard_bit_w;
	wire  infinity_compare_w;
	wire  infinity_input_w;
	wire  [10:0]  infinity_less_1_value_w;
	wire  [30:0]  infinity_result_w;
	wire  infinity_selector_w;
	wire  [30:0]  infinity_value_w;
	wire  [25:0]  man_bus1;
	wire  [25:0]  man_bus2;
	wire  [21:0]  man_exc_nan_zeros_w;
	wire  [22:0]  man_exc_zeros_w;
	wire  [25:0]  man_or1;
	wire  man_or1_w;
	wire  [25:0]  man_or2;
	wire  man_or2_w;
	wire  man_or_w;
	wire  [51:0]  mantissa_dp_w;
	wire  [51:0]  mantissa_input;
	wire  [22:0]  mantissa_sp_w;
	wire  nan_input_w;
	wire  [30:0]  nan_result_w;
	wire  nan_selector_w;
	wire  [30:0]  nan_value_w;
	wire  [10:0]  pre_rounded_ex_w;
	wire  [10:0]  pre_rounded_exp_w;
	wire  rnd_add_1_w;
	wire  rnded_exp_selector;
	wire  [10:0]  rnded_exponent_dp_w;
	wire  [22:0]  rnded_mantissa_sp_w;
	wire  round_bit_w;
	wire  sign_input;
	wire  [30:0]  sp_int_w;
	wire  [31:0]  sp_result_w;
	wire  [27:0]  sticky_bit_bus;
	wire  [27:0]  sticky_bit_or_w;
	wire  sticky_bit_w;
	wire  zero_input_w;
	wire  [30:0]  zero_result_w;
	wire  zero_selector_w;
	wire  [30:0]  zero_value_w;

	// synopsys translate_off
	initial
		bias_adjust_subtractor_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) bias_adjust_subtractor_reg <= 12'b0;
		else if  (clk_en == 1'b1)   bias_adjust_subtractor_reg <= wire_add_sub1_result;
	// synopsys translate_off
	initial
		exp_and_reg1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_and_reg1 <= 1'b0;
		else if  (clk_en == 1'b1)   exp_and_reg1 <= exp_and_w;
	// synopsys translate_off
	initial
		exp_and_reg2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_and_reg2 <= 1'b0;
		else if  (clk_en == 1'b1)   exp_and_reg2 <= exp_and_reg1;
	// synopsys translate_off
	initial
		exp_or_reg1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_or_reg1 <= 1'b0;
		else if  (clk_en == 1'b1)   exp_or_reg1 <= exp_or_w;
	// synopsys translate_off
	initial
		exp_or_reg2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exp_or_reg2 <= 1'b0;
		else if  (clk_en == 1'b1)   exp_or_reg2 <= exp_or_reg1;
	// synopsys translate_off
	initial
		exponent_dp_sign_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) exponent_dp_sign_reg <= 1'b0;
		else if  (clk_en == 1'b1)   exponent_dp_sign_reg <= exponent_dp_sign_w;
	// synopsys translate_off
	initial
		man_or1_reg1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_or1_reg1 <= 1'b0;
		else if  (clk_en == 1'b1)   man_or1_reg1 <= man_or1_w;
	// synopsys translate_off
	initial
		man_or2_reg1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_or2_reg1 <= 1'b0;
		else if  (clk_en == 1'b1)   man_or2_reg1 <= man_or2_w;
	// synopsys translate_off
	initial
		man_or_reg2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) man_or_reg2 <= 1'b0;
		else if  (clk_en == 1'b1)   man_or_reg2 <= man_or_w;
	// synopsys translate_off
	initial
		mantissa_sp_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) mantissa_sp_reg <= 23'b0;
		else if  (clk_en == 1'b1)   mantissa_sp_reg <= mantissa_sp_w;
	// synopsys translate_off
	initial
		rnd_add_1_co_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rnd_add_1_co_reg <= 1'b0;
		else if  (clk_en == 1'b1)   rnd_add_1_co_reg <= wire_add_sub2_cout;
	// synopsys translate_off
	initial
		rnd_add_1_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rnd_add_1_reg <= 1'b0;
		else if  (clk_en == 1'b1)   rnd_add_1_reg <= rnd_add_1_w;
	// synopsys translate_off
	initial
		rnd_add_1_res_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rnd_add_1_res_reg <= 23'b0;
		else if  (clk_en == 1'b1)   rnd_add_1_res_reg <= wire_add_sub2_result;
	// synopsys translate_off
	initial
		rnded_exponent_dp_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rnded_exponent_dp_reg <= 11'b0;
		else if  (clk_en == 1'b1)   rnded_exponent_dp_reg <= rnded_exponent_dp_w;
	// synopsys translate_off
	initial
		rnded_mantissa_sp_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) rnded_mantissa_sp_reg <= 23'b0;
		else if  (clk_en == 1'b1)   rnded_mantissa_sp_reg <= rnded_mantissa_sp_w;
	// synopsys translate_off
	initial
		sign_reg1 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_reg1 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_reg1 <= sign_input;
	// synopsys translate_off
	initial
		sign_reg2 = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sign_reg2 <= 1'b0;
		else if  (clk_en == 1'b1)   sign_reg2 <= sign_reg1;
	// synopsys translate_off
	initial
		sp_result_reg = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) sp_result_reg <= 32'b0;
		else if  (clk_en == 1'b1)   sp_result_reg <= sp_result_w;
	lpm_add_sub   add_sub1
	( 
	.cout(),
	.dataa(bias_adjust_a),
	.datab(bias_adjust_b),
	.overflow(),
	.result(wire_add_sub1_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub1.lpm_direction = "SUB",
		add_sub1.lpm_representation = "SIGNED",
		add_sub1.lpm_width = 12,
		add_sub1.lpm_type = "lpm_add_sub",
		add_sub1.lpm_hint = "ONE_INPUT_IS_CONSTANT=YES";
	lpm_add_sub   add_sub2
	( 
	.cout(wire_add_sub2_cout),
	.dataa(mantissa_sp_w),
	.datab(23'b00000000000000000000001),
	.overflow(),
	.result(wire_add_sub2_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub2.lpm_direction = "ADD",
		add_sub2.lpm_width = 23,
		add_sub2.lpm_type = "lpm_add_sub",
		add_sub2.lpm_hint = "ONE_INPUT_IS_CONSTANT=YES";
	lpm_add_sub   add_sub3
	( 
	.cout(),
	.dataa(pre_rounded_exp_w),
	.datab(11'b00000000001),
	.overflow(),
	.result(wire_add_sub3_result)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.add_sub(1'b1),
	.cin(),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		add_sub3.lpm_direction = "ADD",
		add_sub3.lpm_width = 11,
		add_sub3.lpm_type = "lpm_add_sub",
		add_sub3.lpm_hint = "ONE_INPUT_IS_CONSTANT=YES";
	lpm_compare   cmpr4
	( 
	.aeb(),
	.agb(wire_cmpr4_agb),
	.ageb(),
	.alb(),
	.aleb(),
	.aneb(),
	.dataa(exponent_comparator_w),
	.datab(infinity_less_1_value_w)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.aclr(1'b0),
	.clken(1'b1),
	.clock(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	defparam
		cmpr4.lpm_representation = "UNSIGNED",
		cmpr4.lpm_width = 11,
		cmpr4.lpm_type = "lpm_compare";
	assign
		aclr = 1'b0,
		added_mantissa_sp_w = rnd_add_1_res_reg,
		bias_adjust_a = {1'b0, exponent_input},
		bias_adjust_b = 12'b001110000000,
		denormal_input_w = ((~ exp_or_reg2) & man_or_reg2),
		exp_and = {(exp_and[9] & exp_bus[10]), (exp_and[8] & exp_bus[9]), (exp_and[7] & exp_bus[8]), (exp_and[6] & exp_bus[7]), (exp_and[5] & exp_bus[6]), (exp_and[4] & exp_bus[5]), (exp_and[3] & exp_bus[4]), (exp_and[2] & exp_bus[3]), (exp_and[1] & exp_bus[2]), (exp_and[0] & exp_bus[1]), exp_bus[0]},
		exp_and_w = exp_and[10],
		exp_bus = exponent_input,
		exp_com_bus = exponent_comparator_w,
		exp_com_nor_w = ((~ exp_com_or[10]) & (~ (denormal_input_w | zero_input_w))),
		exp_com_or = {(exp_com_or[9] | exp_com_bus[10]), (exp_com_or[8] | exp_com_bus[9]), (exp_com_or[7] | exp_com_bus[8]), (exp_com_or[6] | exp_com_bus[7]), (exp_com_or[5] | exp_com_bus[6]), (exp_com_or[4] | exp_com_bus[5]), (exp_com_or[3] | exp_com_bus[4]), (exp_com_or[2] | exp_com_bus[3]), (exp_com_or[1] | exp_com_bus[2]), (exp_com_or[0] | exp_com_bus[1]), exp_com_bus[0]},
		exp_exc_ones_w = {8{1'b1}},
		exp_exc_zeros_w = {8{1'b0}},
		exp_or = {(exp_or[9] | exp_bus[10]), (exp_or[8] | exp_bus[9]), (exp_or[7] | exp_bus[8]), (exp_or[6] | exp_bus[7]), (exp_or[5] | exp_bus[6]), (exp_or[4] | exp_bus[5]), (exp_or[3] | exp_bus[4]), (exp_or[2] | exp_bus[3]), (exp_or[1] | exp_bus[2]), (exp_or[0] | exp_bus[1]), exp_bus[0]},
		exp_or_w = exp_or[10],
		exponent_comparator_w = rnded_exponent_dp_reg,
		exponent_dp_sign_w = bias_adjust_subtractor_reg[11],
		exponent_dp_w = bias_adjust_subtractor_reg[10:0],
		exponent_input = dataa[62:52],
		guard_bit_w = mantissa_dp_w[29],
		infinity_compare_w = (wire_cmpr4_agb & (~ exponent_dp_sign_reg)),
		infinity_input_w = (exp_and_reg2 & (~ man_or_reg2)),
		infinity_less_1_value_w = 11'b00011111110,
		infinity_result_w = (({31{(~ infinity_selector_w)}} & sp_int_w) | ({31{infinity_selector_w}} & infinity_value_w)),
		infinity_selector_w = (infinity_input_w | infinity_compare_w),
		infinity_value_w = {exp_exc_ones_w, man_exc_zeros_w},
		man_bus1 = mantissa_input[25:0],
		man_bus2 = mantissa_input[51:26],
		man_exc_nan_zeros_w = {22{1'b0}},
		man_exc_zeros_w = {23{1'b0}},
		man_or1 = {(man_or1[24] | man_bus1[25]), (man_or1[23] | man_bus1[24]), (man_or1[22] | man_bus1[23]), (man_or1[21] | man_bus1[22]), (man_or1[20] | man_bus1[21]), (man_or1[19] | man_bus1[20]), (man_or1[18] | man_bus1[19]), (man_or1[17] | man_bus1[18]), (man_or1[16] | man_bus1[17]), (man_or1[15] | man_bus1[16]), (man_or1[14] | man_bus1[15]), (man_or1[13] | man_bus1[14]), (man_or1[12] | man_bus1[13]), (man_or1[11] | man_bus1[12]), (man_or1[10] | man_bus1[11]), (man_or1[9] | man_bus1[10]), (man_or1[8] | man_bus1[9]), (man_or1[7] | man_bus1[8]), (man_or1[6] | man_bus1[7]), (man_or1[5] | man_bus1[6]), (man_or1[4] | man_bus1[5]), (man_or1[3] | man_bus1[4]), (man_or1[2] | man_bus1[3]), (man_or1[1] | man_bus1[2]), (man_or1[0] | man_bus1[1]), man_bus1[0]},
		man_or1_w = man_or1[25],
		man_or2 = {(man_or2[24] | man_bus2[25]), (man_or2[23] | man_bus2[24]), (man_or2[22] | man_bus2[23]), (man_or2[21] | man_bus2[22]), (man_or2[20] | man_bus2[21]), (man_or2[19] | man_bus2[20]), (man_or2[18] | man_bus2[19]), (man_or2[17] | man_bus2[18]), (man_or2[16] | man_bus2[17]), (man_or2[15] | man_bus2[16]), (man_or2[14] | man_bus2[15]), (man_or2[13] | man_bus2[14]), (man_or2[12] | man_bus2[13]), (man_or2[11] | man_bus2[12]), (man_or2[10] | man_bus2[11]), (man_or2[9] | man_bus2[10]), (man_or2[8] | man_bus2[9]), (man_or2[7] | man_bus2[8]), (man_or2[6] | man_bus2[7]), (man_or2[5] | man_bus2[6]), (man_or2[4] | man_bus2[5]), (man_or2[3] | man_bus2[4]), (man_or2[2] | man_bus2[3]), (man_or2[1] | man_bus2[2]), (man_or2[0] | man_bus2[1]), man_bus2[0]},
		man_or2_w = man_or2[25],
		man_or_w = (man_or1_reg1 | man_or2_reg1),
		mantissa_dp_w = mantissa_input,
		mantissa_input = dataa[51:0],
		mantissa_sp_w = mantissa_dp_w[51:29],
		nan_input_w = (exp_and_reg2 & man_or_reg2),
		nan_result_w = (({31{(~ nan_selector_w)}} & zero_result_w) | ({31{nan_selector_w}} & nan_value_w)),
		nan_selector_w = nan_input_w,
		nan_value_w = {exp_exc_ones_w, 1'b1, man_exc_nan_zeros_w},
		pre_rounded_ex_w = wire_add_sub3_result,
		pre_rounded_exp_w = exponent_dp_w,
		result = sp_result_reg,
		rnd_add_1_w = ((((~ guard_bit_w) & round_bit_w) & sticky_bit_w) | (guard_bit_w & round_bit_w)),
		rnded_exp_selector = (rnd_add_1_co_reg & rnd_add_1_reg),
		rnded_exponent_dp_w = (({11{(~ rnded_exp_selector)}} & pre_rounded_exp_w) | ({11{rnded_exp_selector}} & pre_rounded_ex_w)),
		rnded_mantissa_sp_w = (({23{(~ rnd_add_1_reg)}} & mantissa_sp_reg) | ({23{rnd_add_1_reg}} & added_mantissa_sp_w)),
		round_bit_w = mantissa_dp_w[28],
		sign_input = dataa[63],
		sp_int_w = {rnded_exponent_dp_reg[7:0], rnded_mantissa_sp_reg},
		sp_result_w = {sign_reg2, nan_result_w},
		sticky_bit_bus = mantissa_dp_w[27:0],
		sticky_bit_or_w = {(sticky_bit_or_w[26] | sticky_bit_bus[27]), (sticky_bit_or_w[25] | sticky_bit_bus[26]), (sticky_bit_or_w[24] | sticky_bit_bus[25]), (sticky_bit_or_w[23] | sticky_bit_bus[24]), (sticky_bit_or_w[22] | sticky_bit_bus[23]), (sticky_bit_or_w[21] | sticky_bit_bus[22]), (sticky_bit_or_w[20] | sticky_bit_bus[21]), (sticky_bit_or_w[19] | sticky_bit_bus[20]), (sticky_bit_or_w[18] | sticky_bit_bus[19]), (sticky_bit_or_w[17] | sticky_bit_bus[18]), (sticky_bit_or_w[16] | sticky_bit_bus[17]), (sticky_bit_or_w[15] | sticky_bit_bus[16]), (sticky_bit_or_w[14] | sticky_bit_bus[15]), (sticky_bit_or_w[13] | sticky_bit_bus[14]), (sticky_bit_or_w[12] | sticky_bit_bus[13]), (sticky_bit_or_w[11] | sticky_bit_bus[12]), (sticky_bit_or_w[10] | sticky_bit_bus[11]), (sticky_bit_or_w[9] | sticky_bit_bus[10]), (sticky_bit_or_w[8] | sticky_bit_bus[9]), (sticky_bit_or_w[7] | sticky_bit_bus[8]), (sticky_bit_or_w[6] | sticky_bit_bus[7]), (sticky_bit_or_w[5] | sticky_bit_bus[6]), (sticky_bit_or_w[4] | sticky_bit_bus[5]), (sticky_bit_or_w[3] | sticky_bit_bus[4]), (sticky_bit_or_w[2] | sticky_bit_bus[3]), (sticky_bit_or_w[1] | sticky_bit_bus[2]), (sticky_bit_or_w[0] | sticky_bit_bus[1]), sticky_bit_bus[0]},
		sticky_bit_w = sticky_bit_or_w[27],
		zero_input_w = ((~ exp_or_reg2) & (~ man_or_reg2)),
		zero_result_w = (({31{(~ zero_selector_w)}} & infinity_result_w) | ({31{zero_selector_w}} & zero_value_w)),
		zero_selector_w = (((denormal_input_w | zero_input_w) | exp_com_nor_w) | exponent_dp_sign_reg),
		zero_value_w = {exp_exc_zeros_w, man_exc_zeros_w};
endmodule //altfp_truncate_altfp_convert_bpn
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module altfp_truncate_3 (
	clk_en,
	clock,
	dataa,
	result);

	input	  clk_en;
	input	  clock;
	input	[63:0]  dataa;
	output	[31:0]  result;

	wire [31:0] sub_wire0;
	wire [31:0] result = sub_wire0[31:0];

	altfp_truncate_altfp_convert_bpn	altfp_truncate_altfp_convert_bpn_component (
				.clk_en (clk_en),
				.clock (clock),
				.dataa (dataa),
				.result (sub_wire0));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone II"
// Retrieval info: CONSTANT: LPM_HINT STRING "UNUSED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "altfp_convert"
// Retrieval info: CONSTANT: OPERATION STRING "FLOAT2FLOAT"
// Retrieval info: CONSTANT: ROUNDING STRING "TO_NEAREST"
// Retrieval info: CONSTANT: WIDTH_DATA NUMERIC "64"
// Retrieval info: CONSTANT: WIDTH_EXP_INPUT NUMERIC "11"
// Retrieval info: CONSTANT: WIDTH_EXP_OUTPUT NUMERIC "8"
// Retrieval info: CONSTANT: WIDTH_INT NUMERIC "32"
// Retrieval info: CONSTANT: WIDTH_MAN_INPUT NUMERIC "52"
// Retrieval info: CONSTANT: WIDTH_MAN_OUTPUT NUMERIC "23"
// Retrieval info: CONSTANT: WIDTH_RESULT NUMERIC "32"
// Retrieval info: USED_PORT: clk_en 0 0 0 0 INPUT NODEFVAL "clk_en"
// Retrieval info: CONNECT: @clk_en 0 0 0 0 clk_en 0 0 0 0
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: USED_PORT: dataa 0 0 64 0 INPUT NODEFVAL "dataa[63..0]"
// Retrieval info: CONNECT: @dataa 0 0 64 0 dataa 0 0 64 0
// Retrieval info: USED_PORT: result 0 0 32 0 OUTPUT NODEFVAL "result[31..0]"
// Retrieval info: CONNECT: result 0 0 32 0 @result 0 0 32 0
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_truncate.v TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_truncate.qip TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_truncate.bsf FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_truncate_inst.v FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_truncate_bb.v FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_truncate.inc FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL altfp_truncate.cmp FALSE TRUE
// Retrieval info: LIB_FILE: lpm
