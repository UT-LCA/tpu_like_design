//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Aug 11 21:17:11 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 64
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @param0 = internal global [64 x float] zeroinitializer, align 8
`define TAG_g_param0 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_param0_a {`TAG_g_param0, 55'd0}
// @param1 = internal global [64 x float] zeroinitializer, align 8
`define TAG_g_param1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_param1_a {`TAG_g_param1, 55'd0}
// @temp0 = internal global [64 x float] zeroinitializer, align 8
`define TAG_g_temp0 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_temp0_a {`TAG_g_temp0, 55'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [5:0] temp0_address_a;
reg [5:0] temp0_address_b;
reg temp0_write_enable_a;
reg temp0_write_enable_b;
reg [31:0] temp0_in_a;
reg [31:0] temp0_in_b;
wire [31:0] temp0_out_a;
wire [31:0] temp0_out_b;

// @temp0 = internal global [64 x float] zeroinitializer, align 8
ram_dual_port temp0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( temp0_address_a ),
	.address_b( temp0_address_b ),
	.wren_a( temp0_write_enable_a ),
	.wren_b( temp0_write_enable_b ),
	.data_a( temp0_in_a ),
	.data_b( temp0_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( temp0_out_a ),
	.q_b( temp0_out_b)
);
defparam temp0.width_a = 32;
defparam temp0.width_b = 32;
defparam temp0.widthad_a = 6;
defparam temp0.widthad_b = 6;
defparam temp0.width_be_a = 1;
defparam temp0.width_be_b = 1;
defparam temp0.numwords_a = 64;
defparam temp0.numwords_b = 64;
defparam temp0.latency = ram_latency;
defparam temp0.init_file = "temp0.mif";

reg [5:0] param1_address_a;
reg [5:0] param1_address_b;
reg param1_write_enable_a;
reg param1_write_enable_b;
reg [31:0] param1_in_a;
reg [31:0] param1_in_b;
wire [31:0] param1_out_a;
wire [31:0] param1_out_b;

// @param1 = internal global [64 x float] zeroinitializer, align 8
ram_dual_port param1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( param1_address_a ),
	.address_b( param1_address_b ),
	.wren_a( param1_write_enable_a ),
	.wren_b( param1_write_enable_b ),
	.data_a( param1_in_a ),
	.data_b( param1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( param1_out_a ),
	.q_b( param1_out_b)
);
defparam param1.width_a = 32;
defparam param1.width_b = 32;
defparam param1.widthad_a = 6;
defparam param1.widthad_b = 6;
defparam param1.width_be_a = 1;
defparam param1.width_be_b = 1;
defparam param1.numwords_a = 64;
defparam param1.numwords_b = 64;
defparam param1.latency = ram_latency;
defparam param1.init_file = "param1.mif";

reg [5:0] param0_address_a;
reg [5:0] param0_address_b;
reg param0_write_enable_a;
reg param0_write_enable_b;
reg [31:0] param0_in_a;
reg [31:0] param0_in_b;
wire [31:0] param0_out_a;
wire [31:0] param0_out_b;

// @param0 = internal global [64 x float] zeroinitializer, align 8
ram_dual_port param0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( param0_address_a ),
	.address_b( param0_address_b ),
	.wren_a( param0_write_enable_a ),
	.wren_b( param0_write_enable_b ),
	.data_a( param0_in_a ),
	.data_b( param0_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( param0_out_a ),
	.q_b( param0_out_b)
);
defparam param0.width_a = 32;
defparam param0.width_b = 32;
defparam param0.widthad_a = 6;
defparam param0.widthad_b = 6;
defparam param0.width_be_a = 1;
defparam param0.width_be_b = 1;
defparam param0.numwords_a = 64;
defparam param0.numwords_b = 64;
defparam param0.latency = ram_latency;
defparam param0.init_file = "param0.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_temp0_a;
assign select_temp0_a = (tag_a == `TAG_g_temp0);
reg [ram_latency:0] select_temp0_reg_a;
wire [31:0] memory_controller_temp0_out_a;
assign memory_controller_temp0_out_a = {32{ select_temp0_reg_a[ram_latency]}} & temp0_out_a;

wire select_param1_a;
assign select_param1_a = (tag_a == `TAG_g_param1);
reg [ram_latency:0] select_param1_reg_a;
wire [31:0] memory_controller_param1_out_a;
assign memory_controller_param1_out_a = {32{ select_param1_reg_a[ram_latency]}} & param1_out_a;

wire select_param0_a;
assign select_param0_a = (tag_a == `TAG_g_param0);
reg [ram_latency:0] select_param0_reg_a;
wire [31:0] memory_controller_param0_out_a;
assign memory_controller_param0_out_a = {32{ select_param0_reg_a[ram_latency]}} & param0_out_a;

always @(*)
begin
	temp0_address_a = memory_controller_address_a [6-1+2:2] & {6{select_temp0_a}};
	temp0_write_enable_a = memory_controller_write_enable_a & select_temp0_a;
	temp0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	param1_address_a = memory_controller_address_a [6-1+2:2] & {6{select_param1_a}};
	param1_write_enable_a = memory_controller_write_enable_a & select_param1_a;
	param1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	param0_address_a = memory_controller_address_a [6-1+2:2] & {6{select_param0_a}};
	param0_write_enable_a = memory_controller_write_enable_a & select_param0_a;
	param0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_temp0_reg_a[ram_latency]}} | {2{select_param1_reg_a[ram_latency]}} | {2{select_param0_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_temp0_out_a | memory_controller_param1_out_a | memory_controller_param0_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_temp0_reg_a[j+1] <= select_temp0_reg_a[j];
select_param1_reg_a[j+1] <= select_param1_reg_a[j];
select_param0_reg_a[j+1] <= select_param0_reg_a[j];
end
always @(*)
begin
select_temp0_reg_a[0] <= select_temp0_a;
select_param1_reg_a[0] <= select_param1_a;
select_param0_reg_a[0] <= select_param0_a;
end

reg [2:0] select_not_struct_b;

wire select_temp0_b;
assign select_temp0_b = (tag_b == `TAG_g_temp0);
reg [ram_latency:0] select_temp0_reg_b;
wire [31:0] memory_controller_temp0_out_b;
assign memory_controller_temp0_out_b = {32{ select_temp0_reg_b[ram_latency]}} & temp0_out_b;

wire select_param1_b;
assign select_param1_b = (tag_b == `TAG_g_param1);
reg [ram_latency:0] select_param1_reg_b;
wire [31:0] memory_controller_param1_out_b;
assign memory_controller_param1_out_b = {32{ select_param1_reg_b[ram_latency]}} & param1_out_b;

wire select_param0_b;
assign select_param0_b = (tag_b == `TAG_g_param0);
reg [ram_latency:0] select_param0_reg_b;
wire [31:0] memory_controller_param0_out_b;
assign memory_controller_param0_out_b = {32{ select_param0_reg_b[ram_latency]}} & param0_out_b;

always @(*)
begin
	temp0_address_b = memory_controller_address_b [6-1+2:2] & {6{select_temp0_b}};
	temp0_write_enable_b = memory_controller_write_enable_b & select_temp0_b;
	temp0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	param1_address_b = memory_controller_address_b [6-1+2:2] & {6{select_param1_b}};
	param1_write_enable_b = memory_controller_write_enable_b & select_param1_b;
	param1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	param0_address_b = memory_controller_address_b [6-1+2:2] & {6{select_param0_b}};
	param0_write_enable_b = memory_controller_write_enable_b & select_param0_b;
	param0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_temp0_reg_b[ram_latency]}} | {2{select_param1_reg_b[ram_latency]}} | {2{select_param0_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_temp0_out_b | memory_controller_param1_out_b | memory_controller_param0_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_temp0_reg_b[j+1] <= select_temp0_reg_b[j];
select_param1_reg_b[j+1] <= select_param1_reg_b[j];
select_param0_reg_b[j+1] <= select_param0_reg_b[j];
end
always @(*)
begin
select_temp0_reg_b[0] <= select_temp0_b;
select_param1_reg_b[0] <= select_param1_b;
select_param0_reg_b[0] <= select_param0_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75 = 7'd75;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79 = 7'd79;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80 = 7'd80;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81 = 7'd81;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82 = 7'd82;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83 = 7'd83;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84 = 7'd84;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85 = 7'd85;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86 = 7'd86;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87 = 7'd87;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88 = 7'd88;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89 = 7'd89;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90 = 7'd90;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91 = 7'd91;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92 = 7'd92;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93 = 7'd93;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94 = 7'd94;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95 = 7'd95;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96 = 7'd96;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97 = 7'd97;
parameter [6:0] LEGUP_F_main_BB_multiplyloop_bodydim0lrph_98 = 7'd98;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 55'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] main_multiplyloop_bodydim0lrph_0;
reg [31:0] main_multiplyloop_bodydim0lrph_1;
reg [31:0] main_multiplyloop_bodydim0lrph_2;
reg [31:0] main_multiplyloop_bodydim0lrph_2_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_3;
reg [31:0] main_multiplyloop_bodydim0lrph_4;
reg [31:0] main_multiplyloop_bodydim0lrph_5;
reg [31:0] main_multiplyloop_bodydim0lrph_5_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_6;
reg [31:0] main_multiplyloop_bodydim0lrph_7;
reg [31:0] main_multiplyloop_bodydim0lrph_8;
reg [31:0] main_multiplyloop_bodydim0lrph_8_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_9;
reg [31:0] main_multiplyloop_bodydim0lrph_10;
reg [31:0] main_multiplyloop_bodydim0lrph_11;
reg [31:0] main_multiplyloop_bodydim0lrph_11_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_12;
reg [31:0] main_multiplyloop_bodydim0lrph_13;
reg [31:0] main_multiplyloop_bodydim0lrph_14;
reg [31:0] main_multiplyloop_bodydim0lrph_14_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_15;
reg [31:0] main_multiplyloop_bodydim0lrph_16;
reg [31:0] main_multiplyloop_bodydim0lrph_17;
reg [31:0] main_multiplyloop_bodydim0lrph_17_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_18;
reg [31:0] main_multiplyloop_bodydim0lrph_19;
reg [31:0] main_multiplyloop_bodydim0lrph_20;
reg [31:0] main_multiplyloop_bodydim0lrph_20_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_21;
reg [31:0] main_multiplyloop_bodydim0lrph_22;
reg [31:0] main_multiplyloop_bodydim0lrph_23;
reg [31:0] main_multiplyloop_bodydim0lrph_23_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_24;
reg [31:0] main_multiplyloop_bodydim0lrph_25;
reg [31:0] main_multiplyloop_bodydim0lrph_26;
reg [31:0] main_multiplyloop_bodydim0lrph_26_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_27;
reg [31:0] main_multiplyloop_bodydim0lrph_28;
reg [31:0] main_multiplyloop_bodydim0lrph_29;
reg [31:0] main_multiplyloop_bodydim0lrph_29_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_30;
reg [31:0] main_multiplyloop_bodydim0lrph_31;
reg [31:0] main_multiplyloop_bodydim0lrph_32;
reg [31:0] main_multiplyloop_bodydim0lrph_32_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_33;
reg [31:0] main_multiplyloop_bodydim0lrph_34;
reg [31:0] main_multiplyloop_bodydim0lrph_35;
reg [31:0] main_multiplyloop_bodydim0lrph_35_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_36;
reg [31:0] main_multiplyloop_bodydim0lrph_37;
reg [31:0] main_multiplyloop_bodydim0lrph_38;
reg [31:0] main_multiplyloop_bodydim0lrph_38_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_39;
reg [31:0] main_multiplyloop_bodydim0lrph_40;
reg [31:0] main_multiplyloop_bodydim0lrph_41;
reg [31:0] main_multiplyloop_bodydim0lrph_41_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_42;
reg [31:0] main_multiplyloop_bodydim0lrph_43;
reg [31:0] main_multiplyloop_bodydim0lrph_44;
reg [31:0] main_multiplyloop_bodydim0lrph_44_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_45;
reg [31:0] main_multiplyloop_bodydim0lrph_46;
reg [31:0] main_multiplyloop_bodydim0lrph_47;
reg [31:0] main_multiplyloop_bodydim0lrph_47_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_48;
reg [31:0] main_multiplyloop_bodydim0lrph_49;
reg [31:0] main_multiplyloop_bodydim0lrph_50;
reg [31:0] main_multiplyloop_bodydim0lrph_50_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_51;
reg [31:0] main_multiplyloop_bodydim0lrph_52;
reg [31:0] main_multiplyloop_bodydim0lrph_53;
reg [31:0] main_multiplyloop_bodydim0lrph_53_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_54;
reg [31:0] main_multiplyloop_bodydim0lrph_55;
reg [31:0] main_multiplyloop_bodydim0lrph_56;
reg [31:0] main_multiplyloop_bodydim0lrph_56_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_57;
reg [31:0] main_multiplyloop_bodydim0lrph_58;
reg [31:0] main_multiplyloop_bodydim0lrph_59;
reg [31:0] main_multiplyloop_bodydim0lrph_59_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_60;
reg [31:0] main_multiplyloop_bodydim0lrph_61;
reg [31:0] main_multiplyloop_bodydim0lrph_62;
reg [31:0] main_multiplyloop_bodydim0lrph_62_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_63;
reg [31:0] main_multiplyloop_bodydim0lrph_64;
reg [31:0] main_multiplyloop_bodydim0lrph_65;
reg [31:0] main_multiplyloop_bodydim0lrph_65_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_66;
reg [31:0] main_multiplyloop_bodydim0lrph_67;
reg [31:0] main_multiplyloop_bodydim0lrph_68;
reg [31:0] main_multiplyloop_bodydim0lrph_68_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_69;
reg [31:0] main_multiplyloop_bodydim0lrph_70;
reg [31:0] main_multiplyloop_bodydim0lrph_71;
reg [31:0] main_multiplyloop_bodydim0lrph_71_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_72;
reg [31:0] main_multiplyloop_bodydim0lrph_73;
reg [31:0] main_multiplyloop_bodydim0lrph_74;
reg [31:0] main_multiplyloop_bodydim0lrph_74_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_75;
reg [31:0] main_multiplyloop_bodydim0lrph_76;
reg [31:0] main_multiplyloop_bodydim0lrph_77;
reg [31:0] main_multiplyloop_bodydim0lrph_77_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_78;
reg [31:0] main_multiplyloop_bodydim0lrph_79;
reg [31:0] main_multiplyloop_bodydim0lrph_80;
reg [31:0] main_multiplyloop_bodydim0lrph_80_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_81;
reg [31:0] main_multiplyloop_bodydim0lrph_82;
reg [31:0] main_multiplyloop_bodydim0lrph_83;
reg [31:0] main_multiplyloop_bodydim0lrph_83_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_84;
reg [31:0] main_multiplyloop_bodydim0lrph_85;
reg [31:0] main_multiplyloop_bodydim0lrph_86;
reg [31:0] main_multiplyloop_bodydim0lrph_86_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_87;
reg [31:0] main_multiplyloop_bodydim0lrph_88;
reg [31:0] main_multiplyloop_bodydim0lrph_89;
reg [31:0] main_multiplyloop_bodydim0lrph_89_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_90;
reg [31:0] main_multiplyloop_bodydim0lrph_91;
reg [31:0] main_multiplyloop_bodydim0lrph_92;
reg [31:0] main_multiplyloop_bodydim0lrph_92_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_93;
reg [31:0] main_multiplyloop_bodydim0lrph_94;
reg [31:0] main_multiplyloop_bodydim0lrph_95;
reg [31:0] main_multiplyloop_bodydim0lrph_95_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_96;
reg [31:0] main_multiplyloop_bodydim0lrph_97;
reg [31:0] main_multiplyloop_bodydim0lrph_98;
reg [31:0] main_multiplyloop_bodydim0lrph_98_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_99;
reg [31:0] main_multiplyloop_bodydim0lrph_100;
reg [31:0] main_multiplyloop_bodydim0lrph_101;
reg [31:0] main_multiplyloop_bodydim0lrph_101_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_102;
reg [31:0] main_multiplyloop_bodydim0lrph_103;
reg [31:0] main_multiplyloop_bodydim0lrph_104;
reg [31:0] main_multiplyloop_bodydim0lrph_104_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_105;
reg [31:0] main_multiplyloop_bodydim0lrph_106;
reg [31:0] main_multiplyloop_bodydim0lrph_107;
reg [31:0] main_multiplyloop_bodydim0lrph_107_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_108;
reg [31:0] main_multiplyloop_bodydim0lrph_109;
reg [31:0] main_multiplyloop_bodydim0lrph_110;
reg [31:0] main_multiplyloop_bodydim0lrph_110_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_111;
reg [31:0] main_multiplyloop_bodydim0lrph_112;
reg [31:0] main_multiplyloop_bodydim0lrph_113;
reg [31:0] main_multiplyloop_bodydim0lrph_113_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_114;
reg [31:0] main_multiplyloop_bodydim0lrph_115;
reg [31:0] main_multiplyloop_bodydim0lrph_116;
reg [31:0] main_multiplyloop_bodydim0lrph_116_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_117;
reg [31:0] main_multiplyloop_bodydim0lrph_118;
reg [31:0] main_multiplyloop_bodydim0lrph_119;
reg [31:0] main_multiplyloop_bodydim0lrph_119_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_120;
reg [31:0] main_multiplyloop_bodydim0lrph_121;
reg [31:0] main_multiplyloop_bodydim0lrph_122;
reg [31:0] main_multiplyloop_bodydim0lrph_122_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_123;
reg [31:0] main_multiplyloop_bodydim0lrph_124;
reg [31:0] main_multiplyloop_bodydim0lrph_125;
reg [31:0] main_multiplyloop_bodydim0lrph_125_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_126;
reg [31:0] main_multiplyloop_bodydim0lrph_127;
reg [31:0] main_multiplyloop_bodydim0lrph_128;
reg [31:0] main_multiplyloop_bodydim0lrph_128_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_129;
reg [31:0] main_multiplyloop_bodydim0lrph_130;
reg [31:0] main_multiplyloop_bodydim0lrph_131;
reg [31:0] main_multiplyloop_bodydim0lrph_131_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_132;
reg [31:0] main_multiplyloop_bodydim0lrph_133;
reg [31:0] main_multiplyloop_bodydim0lrph_134;
reg [31:0] main_multiplyloop_bodydim0lrph_134_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_135;
reg [31:0] main_multiplyloop_bodydim0lrph_136;
reg [31:0] main_multiplyloop_bodydim0lrph_137;
reg [31:0] main_multiplyloop_bodydim0lrph_137_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_138;
reg [31:0] main_multiplyloop_bodydim0lrph_139;
reg [31:0] main_multiplyloop_bodydim0lrph_140;
reg [31:0] main_multiplyloop_bodydim0lrph_140_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_141;
reg [31:0] main_multiplyloop_bodydim0lrph_142;
reg [31:0] main_multiplyloop_bodydim0lrph_143;
reg [31:0] main_multiplyloop_bodydim0lrph_143_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_144;
reg [31:0] main_multiplyloop_bodydim0lrph_145;
reg [31:0] main_multiplyloop_bodydim0lrph_146;
reg [31:0] main_multiplyloop_bodydim0lrph_146_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_147;
reg [31:0] main_multiplyloop_bodydim0lrph_148;
reg [31:0] main_multiplyloop_bodydim0lrph_149;
reg [31:0] main_multiplyloop_bodydim0lrph_149_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_150;
reg [31:0] main_multiplyloop_bodydim0lrph_151;
reg [31:0] main_multiplyloop_bodydim0lrph_152;
reg [31:0] main_multiplyloop_bodydim0lrph_152_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_153;
reg [31:0] main_multiplyloop_bodydim0lrph_154;
reg [31:0] main_multiplyloop_bodydim0lrph_155;
reg [31:0] main_multiplyloop_bodydim0lrph_155_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_156;
reg [31:0] main_multiplyloop_bodydim0lrph_157;
reg [31:0] main_multiplyloop_bodydim0lrph_158;
reg [31:0] main_multiplyloop_bodydim0lrph_158_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_159;
reg [31:0] main_multiplyloop_bodydim0lrph_160;
reg [31:0] main_multiplyloop_bodydim0lrph_161;
reg [31:0] main_multiplyloop_bodydim0lrph_161_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_162;
reg [31:0] main_multiplyloop_bodydim0lrph_163;
reg [31:0] main_multiplyloop_bodydim0lrph_164;
reg [31:0] main_multiplyloop_bodydim0lrph_164_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_165;
reg [31:0] main_multiplyloop_bodydim0lrph_166;
reg [31:0] main_multiplyloop_bodydim0lrph_167;
reg [31:0] main_multiplyloop_bodydim0lrph_167_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_168;
reg [31:0] main_multiplyloop_bodydim0lrph_169;
reg [31:0] main_multiplyloop_bodydim0lrph_170;
reg [31:0] main_multiplyloop_bodydim0lrph_170_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_171;
reg [31:0] main_multiplyloop_bodydim0lrph_172;
reg [31:0] main_multiplyloop_bodydim0lrph_173;
reg [31:0] main_multiplyloop_bodydim0lrph_173_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_174;
reg [31:0] main_multiplyloop_bodydim0lrph_175;
reg [31:0] main_multiplyloop_bodydim0lrph_176;
reg [31:0] main_multiplyloop_bodydim0lrph_176_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_177;
reg [31:0] main_multiplyloop_bodydim0lrph_178;
reg [31:0] main_multiplyloop_bodydim0lrph_179;
reg [31:0] main_multiplyloop_bodydim0lrph_179_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_180;
reg [31:0] main_multiplyloop_bodydim0lrph_181;
reg [31:0] main_multiplyloop_bodydim0lrph_182;
reg [31:0] main_multiplyloop_bodydim0lrph_182_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_183;
reg [31:0] main_multiplyloop_bodydim0lrph_184;
reg [31:0] main_multiplyloop_bodydim0lrph_185;
reg [31:0] main_multiplyloop_bodydim0lrph_185_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_186;
reg [31:0] main_multiplyloop_bodydim0lrph_187;
reg [31:0] main_multiplyloop_bodydim0lrph_188;
reg [31:0] main_multiplyloop_bodydim0lrph_188_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_189;
reg [31:0] main_multiplyloop_bodydim0lrph_190;
reg [31:0] main_multiplyloop_bodydim0lrph_191;
reg [31:0] main_multiplyloop_bodydim0lrph_191_reg;
reg [31:0] main_multiplyloop_bodydim0lrph_leflow_retval;
reg [31:0] main_multiplyloop_bodydim0lrph_leflow_retval_reg;
reg [31:0] main_altfp_multiply_32_0_op0;
reg [31:0] main_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_main_multiplyloop_bodydim0lrph_2_out;
reg  altfp_main_multiplyloop_bodydim0lrph_2_en;
reg [31:0] main_altfp_multiply_32_0;

/*   %2 = fmul float %0, %1*/
altfp_multiplier_11 altfp_multiplier_11_main_multiplyloop_bodydim0lrph_2 (
	.result (altfp_multiplier_main_multiplyloop_bodydim0lrph_2_out),
	.dataa (main_altfp_multiply_32_0_op0),
	.datab (main_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_multiplyloop_bodydim0lrph_2_en)
);



always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0lrph_98;
LEGUP_F_main_BB_multiplyloop_bodydim0lrph_98:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %0 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 0), align 8*/
		main_multiplyloop_bodydim0lrph_0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %1 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 0), align 8*/
		main_multiplyloop_bodydim0lrph_1 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_2 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %2 = fmul float %0, %1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		main_multiplyloop_bodydim0lrph_2_reg <= main_multiplyloop_bodydim0lrph_2;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_2_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %2 = fmul float %0, %1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		main_multiplyloop_bodydim0lrph_2_reg <= main_multiplyloop_bodydim0lrph_2;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_2_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %161 = fmul float %159, %160*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		main_multiplyloop_bodydim0lrph_2_reg <= main_multiplyloop_bodydim0lrph_161;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %3 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 1), align 4*/
		main_multiplyloop_bodydim0lrph_3 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %4 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 1), align 4*/
		main_multiplyloop_bodydim0lrph_4 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_5 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %5 = fmul float %3, %4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		main_multiplyloop_bodydim0lrph_5_reg <= main_multiplyloop_bodydim0lrph_5;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_5_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %5 = fmul float %3, %4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		main_multiplyloop_bodydim0lrph_5_reg <= main_multiplyloop_bodydim0lrph_5;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_5_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %164 = fmul float %162, %163*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		main_multiplyloop_bodydim0lrph_5_reg <= main_multiplyloop_bodydim0lrph_164;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %6 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 2), align 8*/
		main_multiplyloop_bodydim0lrph_6 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %7 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 2), align 8*/
		main_multiplyloop_bodydim0lrph_7 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_8 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %8 = fmul float %6, %7*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		main_multiplyloop_bodydim0lrph_8_reg <= main_multiplyloop_bodydim0lrph_8;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_8_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %8 = fmul float %6, %7*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		main_multiplyloop_bodydim0lrph_8_reg <= main_multiplyloop_bodydim0lrph_8;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_8_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %167 = fmul float %165, %166*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		main_multiplyloop_bodydim0lrph_8_reg <= main_multiplyloop_bodydim0lrph_167;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %9 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 3), align 4*/
		main_multiplyloop_bodydim0lrph_9 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %10 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 3), align 4*/
		main_multiplyloop_bodydim0lrph_10 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_11 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %11 = fmul float %9, %10*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		main_multiplyloop_bodydim0lrph_11_reg <= main_multiplyloop_bodydim0lrph_11;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_11_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %11 = fmul float %9, %10*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		main_multiplyloop_bodydim0lrph_11_reg <= main_multiplyloop_bodydim0lrph_11;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_11_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %170 = fmul float %168, %169*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		main_multiplyloop_bodydim0lrph_11_reg <= main_multiplyloop_bodydim0lrph_170;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %12 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 4), align 8*/
		main_multiplyloop_bodydim0lrph_12 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %13 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 4), align 8*/
		main_multiplyloop_bodydim0lrph_13 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_14 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %14 = fmul float %12, %13*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		main_multiplyloop_bodydim0lrph_14_reg <= main_multiplyloop_bodydim0lrph_14;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_14_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %14 = fmul float %12, %13*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		main_multiplyloop_bodydim0lrph_14_reg <= main_multiplyloop_bodydim0lrph_14;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_14_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %173 = fmul float %171, %172*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		main_multiplyloop_bodydim0lrph_14_reg <= main_multiplyloop_bodydim0lrph_173;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %15 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 5), align 4*/
		main_multiplyloop_bodydim0lrph_15 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %16 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 5), align 4*/
		main_multiplyloop_bodydim0lrph_16 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_17 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %17 = fmul float %15, %16*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		main_multiplyloop_bodydim0lrph_17_reg <= main_multiplyloop_bodydim0lrph_17;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_17_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %17 = fmul float %15, %16*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		main_multiplyloop_bodydim0lrph_17_reg <= main_multiplyloop_bodydim0lrph_17;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_17_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %176 = fmul float %174, %175*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		main_multiplyloop_bodydim0lrph_17_reg <= main_multiplyloop_bodydim0lrph_176;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %18 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 6), align 8*/
		main_multiplyloop_bodydim0lrph_18 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %19 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 6), align 8*/
		main_multiplyloop_bodydim0lrph_19 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_20 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %20 = fmul float %18, %19*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		main_multiplyloop_bodydim0lrph_20_reg <= main_multiplyloop_bodydim0lrph_20;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_20_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %20 = fmul float %18, %19*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		main_multiplyloop_bodydim0lrph_20_reg <= main_multiplyloop_bodydim0lrph_20;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_20_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %179 = fmul float %177, %178*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		main_multiplyloop_bodydim0lrph_20_reg <= main_multiplyloop_bodydim0lrph_179;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %21 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 7), align 4*/
		main_multiplyloop_bodydim0lrph_21 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %22 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 7), align 4*/
		main_multiplyloop_bodydim0lrph_22 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_23 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %23 = fmul float %21, %22*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		main_multiplyloop_bodydim0lrph_23_reg <= main_multiplyloop_bodydim0lrph_23;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_23_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %23 = fmul float %21, %22*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		main_multiplyloop_bodydim0lrph_23_reg <= main_multiplyloop_bodydim0lrph_23;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_23_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %182 = fmul float %180, %181*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		main_multiplyloop_bodydim0lrph_23_reg <= main_multiplyloop_bodydim0lrph_182;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %24 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 8), align 8*/
		main_multiplyloop_bodydim0lrph_24 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %25 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 8), align 8*/
		main_multiplyloop_bodydim0lrph_25 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_26 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %26 = fmul float %24, %25*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		main_multiplyloop_bodydim0lrph_26_reg <= main_multiplyloop_bodydim0lrph_26;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_26_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %26 = fmul float %24, %25*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		main_multiplyloop_bodydim0lrph_26_reg <= main_multiplyloop_bodydim0lrph_26;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_26_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %185 = fmul float %183, %184*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		main_multiplyloop_bodydim0lrph_26_reg <= main_multiplyloop_bodydim0lrph_185;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %27 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 9), align 4*/
		main_multiplyloop_bodydim0lrph_27 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %28 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 9), align 4*/
		main_multiplyloop_bodydim0lrph_28 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_29 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %29 = fmul float %27, %28*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		main_multiplyloop_bodydim0lrph_29_reg <= main_multiplyloop_bodydim0lrph_29;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_29_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %29 = fmul float %27, %28*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		main_multiplyloop_bodydim0lrph_29_reg <= main_multiplyloop_bodydim0lrph_29;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_29_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %188 = fmul float %186, %187*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		main_multiplyloop_bodydim0lrph_29_reg <= main_multiplyloop_bodydim0lrph_188;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %30 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 10), align 8*/
		main_multiplyloop_bodydim0lrph_30 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %31 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 10), align 8*/
		main_multiplyloop_bodydim0lrph_31 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_32 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %32 = fmul float %30, %31*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		main_multiplyloop_bodydim0lrph_32_reg <= main_multiplyloop_bodydim0lrph_32;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_32_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %32 = fmul float %30, %31*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		main_multiplyloop_bodydim0lrph_32_reg <= main_multiplyloop_bodydim0lrph_32;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_32_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %191 = fmul float %189, %190*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		main_multiplyloop_bodydim0lrph_32_reg <= main_multiplyloop_bodydim0lrph_191;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %33 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 11), align 4*/
		main_multiplyloop_bodydim0lrph_33 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %34 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 11), align 4*/
		main_multiplyloop_bodydim0lrph_34 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_35 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %35 = fmul float %33, %34*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		main_multiplyloop_bodydim0lrph_35_reg <= main_multiplyloop_bodydim0lrph_35;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_35_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %35 = fmul float %33, %34*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		main_multiplyloop_bodydim0lrph_35_reg <= main_multiplyloop_bodydim0lrph_35;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %36 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 12), align 8*/
		main_multiplyloop_bodydim0lrph_36 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %37 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 12), align 8*/
		main_multiplyloop_bodydim0lrph_37 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_38 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %38 = fmul float %36, %37*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		main_multiplyloop_bodydim0lrph_38_reg <= main_multiplyloop_bodydim0lrph_38;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_38_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %38 = fmul float %36, %37*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		main_multiplyloop_bodydim0lrph_38_reg <= main_multiplyloop_bodydim0lrph_38;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %39 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 13), align 4*/
		main_multiplyloop_bodydim0lrph_39 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %40 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 13), align 4*/
		main_multiplyloop_bodydim0lrph_40 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_41 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %41 = fmul float %39, %40*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		main_multiplyloop_bodydim0lrph_41_reg <= main_multiplyloop_bodydim0lrph_41;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_41_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %41 = fmul float %39, %40*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		main_multiplyloop_bodydim0lrph_41_reg <= main_multiplyloop_bodydim0lrph_41;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %42 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 14), align 8*/
		main_multiplyloop_bodydim0lrph_42 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %43 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 14), align 8*/
		main_multiplyloop_bodydim0lrph_43 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_44 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %44 = fmul float %42, %43*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		main_multiplyloop_bodydim0lrph_44_reg <= main_multiplyloop_bodydim0lrph_44;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_44_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %44 = fmul float %42, %43*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		main_multiplyloop_bodydim0lrph_44_reg <= main_multiplyloop_bodydim0lrph_44;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %45 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 15), align 4*/
		main_multiplyloop_bodydim0lrph_45 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %46 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 15), align 4*/
		main_multiplyloop_bodydim0lrph_46 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_47 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %47 = fmul float %45, %46*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		main_multiplyloop_bodydim0lrph_47_reg <= main_multiplyloop_bodydim0lrph_47;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_47_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %47 = fmul float %45, %46*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		main_multiplyloop_bodydim0lrph_47_reg <= main_multiplyloop_bodydim0lrph_47;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %48 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 16), align 8*/
		main_multiplyloop_bodydim0lrph_48 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %49 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 16), align 8*/
		main_multiplyloop_bodydim0lrph_49 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_50 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %50 = fmul float %48, %49*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		main_multiplyloop_bodydim0lrph_50_reg <= main_multiplyloop_bodydim0lrph_50;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_50_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %50 = fmul float %48, %49*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		main_multiplyloop_bodydim0lrph_50_reg <= main_multiplyloop_bodydim0lrph_50;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %51 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 17), align 4*/
		main_multiplyloop_bodydim0lrph_51 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %52 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 17), align 4*/
		main_multiplyloop_bodydim0lrph_52 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_53 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %53 = fmul float %51, %52*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		main_multiplyloop_bodydim0lrph_53_reg <= main_multiplyloop_bodydim0lrph_53;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_53_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %53 = fmul float %51, %52*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		main_multiplyloop_bodydim0lrph_53_reg <= main_multiplyloop_bodydim0lrph_53;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %54 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 18), align 8*/
		main_multiplyloop_bodydim0lrph_54 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %55 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 18), align 8*/
		main_multiplyloop_bodydim0lrph_55 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_56 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %56 = fmul float %54, %55*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		main_multiplyloop_bodydim0lrph_56_reg <= main_multiplyloop_bodydim0lrph_56;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_56_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %56 = fmul float %54, %55*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		main_multiplyloop_bodydim0lrph_56_reg <= main_multiplyloop_bodydim0lrph_56;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %57 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 19), align 4*/
		main_multiplyloop_bodydim0lrph_57 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %58 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 19), align 4*/
		main_multiplyloop_bodydim0lrph_58 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_59 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %59 = fmul float %57, %58*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		main_multiplyloop_bodydim0lrph_59_reg <= main_multiplyloop_bodydim0lrph_59;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_59_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %59 = fmul float %57, %58*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		main_multiplyloop_bodydim0lrph_59_reg <= main_multiplyloop_bodydim0lrph_59;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %60 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 20), align 8*/
		main_multiplyloop_bodydim0lrph_60 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %61 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 20), align 8*/
		main_multiplyloop_bodydim0lrph_61 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_62 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %62 = fmul float %60, %61*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		main_multiplyloop_bodydim0lrph_62_reg <= main_multiplyloop_bodydim0lrph_62;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_62_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %62 = fmul float %60, %61*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		main_multiplyloop_bodydim0lrph_62_reg <= main_multiplyloop_bodydim0lrph_62;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %63 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 21), align 4*/
		main_multiplyloop_bodydim0lrph_63 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %64 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 21), align 4*/
		main_multiplyloop_bodydim0lrph_64 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_65 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %65 = fmul float %63, %64*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		main_multiplyloop_bodydim0lrph_65_reg <= main_multiplyloop_bodydim0lrph_65;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_65_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %65 = fmul float %63, %64*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		main_multiplyloop_bodydim0lrph_65_reg <= main_multiplyloop_bodydim0lrph_65;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %66 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 22), align 8*/
		main_multiplyloop_bodydim0lrph_66 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %67 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 22), align 8*/
		main_multiplyloop_bodydim0lrph_67 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_68 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %68 = fmul float %66, %67*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		main_multiplyloop_bodydim0lrph_68_reg <= main_multiplyloop_bodydim0lrph_68;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_68_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %68 = fmul float %66, %67*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		main_multiplyloop_bodydim0lrph_68_reg <= main_multiplyloop_bodydim0lrph_68;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %69 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 23), align 4*/
		main_multiplyloop_bodydim0lrph_69 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %70 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 23), align 4*/
		main_multiplyloop_bodydim0lrph_70 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_71 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %71 = fmul float %69, %70*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		main_multiplyloop_bodydim0lrph_71_reg <= main_multiplyloop_bodydim0lrph_71;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_71_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %71 = fmul float %69, %70*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		main_multiplyloop_bodydim0lrph_71_reg <= main_multiplyloop_bodydim0lrph_71;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %72 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 24), align 8*/
		main_multiplyloop_bodydim0lrph_72 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %73 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 24), align 8*/
		main_multiplyloop_bodydim0lrph_73 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_74 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %74 = fmul float %72, %73*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		main_multiplyloop_bodydim0lrph_74_reg <= main_multiplyloop_bodydim0lrph_74;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_74_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %74 = fmul float %72, %73*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		main_multiplyloop_bodydim0lrph_74_reg <= main_multiplyloop_bodydim0lrph_74;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %75 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 25), align 4*/
		main_multiplyloop_bodydim0lrph_75 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %76 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 25), align 4*/
		main_multiplyloop_bodydim0lrph_76 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_77 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %77 = fmul float %75, %76*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		main_multiplyloop_bodydim0lrph_77_reg <= main_multiplyloop_bodydim0lrph_77;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_77_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %77 = fmul float %75, %76*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		main_multiplyloop_bodydim0lrph_77_reg <= main_multiplyloop_bodydim0lrph_77;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %78 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 26), align 8*/
		main_multiplyloop_bodydim0lrph_78 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %79 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 26), align 8*/
		main_multiplyloop_bodydim0lrph_79 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_80 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %80 = fmul float %78, %79*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		main_multiplyloop_bodydim0lrph_80_reg <= main_multiplyloop_bodydim0lrph_80;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_80_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %80 = fmul float %78, %79*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		main_multiplyloop_bodydim0lrph_80_reg <= main_multiplyloop_bodydim0lrph_80;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %81 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 27), align 4*/
		main_multiplyloop_bodydim0lrph_81 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %82 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 27), align 4*/
		main_multiplyloop_bodydim0lrph_82 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_83 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %83 = fmul float %81, %82*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		main_multiplyloop_bodydim0lrph_83_reg <= main_multiplyloop_bodydim0lrph_83;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_83_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %83 = fmul float %81, %82*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		main_multiplyloop_bodydim0lrph_83_reg <= main_multiplyloop_bodydim0lrph_83;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %84 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 28), align 8*/
		main_multiplyloop_bodydim0lrph_84 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %85 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 28), align 8*/
		main_multiplyloop_bodydim0lrph_85 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_86 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %86 = fmul float %84, %85*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		main_multiplyloop_bodydim0lrph_86_reg <= main_multiplyloop_bodydim0lrph_86;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_86_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %86 = fmul float %84, %85*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		main_multiplyloop_bodydim0lrph_86_reg <= main_multiplyloop_bodydim0lrph_86;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %87 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 29), align 4*/
		main_multiplyloop_bodydim0lrph_87 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %88 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 29), align 4*/
		main_multiplyloop_bodydim0lrph_88 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_89 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %89 = fmul float %87, %88*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		main_multiplyloop_bodydim0lrph_89_reg <= main_multiplyloop_bodydim0lrph_89;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_89_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %89 = fmul float %87, %88*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		main_multiplyloop_bodydim0lrph_89_reg <= main_multiplyloop_bodydim0lrph_89;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %90 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 30), align 8*/
		main_multiplyloop_bodydim0lrph_90 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %91 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 30), align 8*/
		main_multiplyloop_bodydim0lrph_91 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_92 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %92 = fmul float %90, %91*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		main_multiplyloop_bodydim0lrph_92_reg <= main_multiplyloop_bodydim0lrph_92;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_92_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %92 = fmul float %90, %91*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		main_multiplyloop_bodydim0lrph_92_reg <= main_multiplyloop_bodydim0lrph_92;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %93 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 31), align 4*/
		main_multiplyloop_bodydim0lrph_93 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %94 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 31), align 4*/
		main_multiplyloop_bodydim0lrph_94 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_95 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %95 = fmul float %93, %94*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		main_multiplyloop_bodydim0lrph_95_reg <= main_multiplyloop_bodydim0lrph_95;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_95_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %95 = fmul float %93, %94*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		main_multiplyloop_bodydim0lrph_95_reg <= main_multiplyloop_bodydim0lrph_95;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %96 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 32), align 8*/
		main_multiplyloop_bodydim0lrph_96 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %97 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 32), align 8*/
		main_multiplyloop_bodydim0lrph_97 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_98 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %98 = fmul float %96, %97*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		main_multiplyloop_bodydim0lrph_98_reg <= main_multiplyloop_bodydim0lrph_98;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_98_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %98 = fmul float %96, %97*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		main_multiplyloop_bodydim0lrph_98_reg <= main_multiplyloop_bodydim0lrph_98;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %99 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 33), align 4*/
		main_multiplyloop_bodydim0lrph_99 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %100 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 33), align 4*/
		main_multiplyloop_bodydim0lrph_100 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_101 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %101 = fmul float %99, %100*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		main_multiplyloop_bodydim0lrph_101_reg <= main_multiplyloop_bodydim0lrph_101;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_101_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %101 = fmul float %99, %100*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		main_multiplyloop_bodydim0lrph_101_reg <= main_multiplyloop_bodydim0lrph_101;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %102 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 34), align 8*/
		main_multiplyloop_bodydim0lrph_102 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %103 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 34), align 8*/
		main_multiplyloop_bodydim0lrph_103 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_104 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %104 = fmul float %102, %103*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		main_multiplyloop_bodydim0lrph_104_reg <= main_multiplyloop_bodydim0lrph_104;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_104_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %104 = fmul float %102, %103*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		main_multiplyloop_bodydim0lrph_104_reg <= main_multiplyloop_bodydim0lrph_104;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %105 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 35), align 4*/
		main_multiplyloop_bodydim0lrph_105 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %106 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 35), align 4*/
		main_multiplyloop_bodydim0lrph_106 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_107 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %107 = fmul float %105, %106*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		main_multiplyloop_bodydim0lrph_107_reg <= main_multiplyloop_bodydim0lrph_107;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_107_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %107 = fmul float %105, %106*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		main_multiplyloop_bodydim0lrph_107_reg <= main_multiplyloop_bodydim0lrph_107;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %108 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 36), align 8*/
		main_multiplyloop_bodydim0lrph_108 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %109 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 36), align 8*/
		main_multiplyloop_bodydim0lrph_109 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_110 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %110 = fmul float %108, %109*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		main_multiplyloop_bodydim0lrph_110_reg <= main_multiplyloop_bodydim0lrph_110;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_110_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %110 = fmul float %108, %109*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		main_multiplyloop_bodydim0lrph_110_reg <= main_multiplyloop_bodydim0lrph_110;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %111 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 37), align 4*/
		main_multiplyloop_bodydim0lrph_111 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %112 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 37), align 4*/
		main_multiplyloop_bodydim0lrph_112 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_113 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %113 = fmul float %111, %112*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		main_multiplyloop_bodydim0lrph_113_reg <= main_multiplyloop_bodydim0lrph_113;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_113_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %113 = fmul float %111, %112*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		main_multiplyloop_bodydim0lrph_113_reg <= main_multiplyloop_bodydim0lrph_113;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %114 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 38), align 8*/
		main_multiplyloop_bodydim0lrph_114 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %115 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 38), align 8*/
		main_multiplyloop_bodydim0lrph_115 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_116 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %116 = fmul float %114, %115*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		main_multiplyloop_bodydim0lrph_116_reg <= main_multiplyloop_bodydim0lrph_116;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_116_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %116 = fmul float %114, %115*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		main_multiplyloop_bodydim0lrph_116_reg <= main_multiplyloop_bodydim0lrph_116;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %117 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 39), align 4*/
		main_multiplyloop_bodydim0lrph_117 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %118 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 39), align 4*/
		main_multiplyloop_bodydim0lrph_118 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_119 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %119 = fmul float %117, %118*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		main_multiplyloop_bodydim0lrph_119_reg <= main_multiplyloop_bodydim0lrph_119;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_119_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %119 = fmul float %117, %118*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		main_multiplyloop_bodydim0lrph_119_reg <= main_multiplyloop_bodydim0lrph_119;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %120 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 40), align 8*/
		main_multiplyloop_bodydim0lrph_120 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %121 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 40), align 8*/
		main_multiplyloop_bodydim0lrph_121 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_122 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %122 = fmul float %120, %121*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		main_multiplyloop_bodydim0lrph_122_reg <= main_multiplyloop_bodydim0lrph_122;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_122_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %122 = fmul float %120, %121*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		main_multiplyloop_bodydim0lrph_122_reg <= main_multiplyloop_bodydim0lrph_122;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %123 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 41), align 4*/
		main_multiplyloop_bodydim0lrph_123 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %124 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 41), align 4*/
		main_multiplyloop_bodydim0lrph_124 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_125 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %125 = fmul float %123, %124*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		main_multiplyloop_bodydim0lrph_125_reg <= main_multiplyloop_bodydim0lrph_125;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_125_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %125 = fmul float %123, %124*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		main_multiplyloop_bodydim0lrph_125_reg <= main_multiplyloop_bodydim0lrph_125;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %126 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 42), align 8*/
		main_multiplyloop_bodydim0lrph_126 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %127 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 42), align 8*/
		main_multiplyloop_bodydim0lrph_127 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_128 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %128 = fmul float %126, %127*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		main_multiplyloop_bodydim0lrph_128_reg <= main_multiplyloop_bodydim0lrph_128;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_128_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %128 = fmul float %126, %127*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		main_multiplyloop_bodydim0lrph_128_reg <= main_multiplyloop_bodydim0lrph_128;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %129 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 43), align 4*/
		main_multiplyloop_bodydim0lrph_129 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %130 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 43), align 4*/
		main_multiplyloop_bodydim0lrph_130 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_131 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %131 = fmul float %129, %130*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		main_multiplyloop_bodydim0lrph_131_reg <= main_multiplyloop_bodydim0lrph_131;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_131_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %131 = fmul float %129, %130*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		main_multiplyloop_bodydim0lrph_131_reg <= main_multiplyloop_bodydim0lrph_131;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %132 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 44), align 8*/
		main_multiplyloop_bodydim0lrph_132 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %133 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 44), align 8*/
		main_multiplyloop_bodydim0lrph_133 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_134 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %134 = fmul float %132, %133*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		main_multiplyloop_bodydim0lrph_134_reg <= main_multiplyloop_bodydim0lrph_134;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_134_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %134 = fmul float %132, %133*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		main_multiplyloop_bodydim0lrph_134_reg <= main_multiplyloop_bodydim0lrph_134;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %135 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 45), align 4*/
		main_multiplyloop_bodydim0lrph_135 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %136 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 45), align 4*/
		main_multiplyloop_bodydim0lrph_136 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_137 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %137 = fmul float %135, %136*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		main_multiplyloop_bodydim0lrph_137_reg <= main_multiplyloop_bodydim0lrph_137;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_137_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %137 = fmul float %135, %136*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		main_multiplyloop_bodydim0lrph_137_reg <= main_multiplyloop_bodydim0lrph_137;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %138 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 46), align 8*/
		main_multiplyloop_bodydim0lrph_138 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %139 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 46), align 8*/
		main_multiplyloop_bodydim0lrph_139 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_140 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %140 = fmul float %138, %139*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		main_multiplyloop_bodydim0lrph_140_reg <= main_multiplyloop_bodydim0lrph_140;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_140_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %140 = fmul float %138, %139*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		main_multiplyloop_bodydim0lrph_140_reg <= main_multiplyloop_bodydim0lrph_140;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_140_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %141 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 47), align 4*/
		main_multiplyloop_bodydim0lrph_141 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %142 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 47), align 4*/
		main_multiplyloop_bodydim0lrph_142 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_143 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %143 = fmul float %141, %142*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		main_multiplyloop_bodydim0lrph_143_reg <= main_multiplyloop_bodydim0lrph_143;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_143_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %143 = fmul float %141, %142*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		main_multiplyloop_bodydim0lrph_143_reg <= main_multiplyloop_bodydim0lrph_143;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %144 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 48), align 8*/
		main_multiplyloop_bodydim0lrph_144 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %145 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 48), align 8*/
		main_multiplyloop_bodydim0lrph_145 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_146 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %146 = fmul float %144, %145*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		main_multiplyloop_bodydim0lrph_146_reg <= main_multiplyloop_bodydim0lrph_146;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_146_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %146 = fmul float %144, %145*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		main_multiplyloop_bodydim0lrph_146_reg <= main_multiplyloop_bodydim0lrph_146;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %147 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 49), align 4*/
		main_multiplyloop_bodydim0lrph_147 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %148 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 49), align 4*/
		main_multiplyloop_bodydim0lrph_148 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_149 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %149 = fmul float %147, %148*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		main_multiplyloop_bodydim0lrph_149_reg <= main_multiplyloop_bodydim0lrph_149;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_149_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %149 = fmul float %147, %148*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		main_multiplyloop_bodydim0lrph_149_reg <= main_multiplyloop_bodydim0lrph_149;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %150 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 50), align 8*/
		main_multiplyloop_bodydim0lrph_150 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %151 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 50), align 8*/
		main_multiplyloop_bodydim0lrph_151 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_152 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %152 = fmul float %150, %151*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		main_multiplyloop_bodydim0lrph_152_reg <= main_multiplyloop_bodydim0lrph_152;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_152_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %152 = fmul float %150, %151*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		main_multiplyloop_bodydim0lrph_152_reg <= main_multiplyloop_bodydim0lrph_152;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %153 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 51), align 4*/
		main_multiplyloop_bodydim0lrph_153 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %154 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 51), align 4*/
		main_multiplyloop_bodydim0lrph_154 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_155 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %155 = fmul float %153, %154*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65)) begin
		main_multiplyloop_bodydim0lrph_155_reg <= main_multiplyloop_bodydim0lrph_155;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_155_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %155 = fmul float %153, %154*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65)) begin
		main_multiplyloop_bodydim0lrph_155_reg <= main_multiplyloop_bodydim0lrph_155;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %156 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 52), align 8*/
		main_multiplyloop_bodydim0lrph_156 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %157 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 52), align 8*/
		main_multiplyloop_bodydim0lrph_157 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_158 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %158 = fmul float %156, %157*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		main_multiplyloop_bodydim0lrph_158_reg <= main_multiplyloop_bodydim0lrph_158;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_158_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %158 = fmul float %156, %157*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		main_multiplyloop_bodydim0lrph_158_reg <= main_multiplyloop_bodydim0lrph_158;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %159 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 53), align 4*/
		main_multiplyloop_bodydim0lrph_159 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %160 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 53), align 4*/
		main_multiplyloop_bodydim0lrph_160 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_161 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %161 = fmul float %159, %160*/
	main_multiplyloop_bodydim0lrph_161_reg = main_multiplyloop_bodydim0lrph_2_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %162 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 54), align 8*/
		main_multiplyloop_bodydim0lrph_162 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %163 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 54), align 8*/
		main_multiplyloop_bodydim0lrph_163 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_164 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %164 = fmul float %162, %163*/
	main_multiplyloop_bodydim0lrph_164_reg = main_multiplyloop_bodydim0lrph_5_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %165 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 55), align 4*/
		main_multiplyloop_bodydim0lrph_165 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %166 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 55), align 4*/
		main_multiplyloop_bodydim0lrph_166 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_167 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %167 = fmul float %165, %166*/
	main_multiplyloop_bodydim0lrph_167_reg = main_multiplyloop_bodydim0lrph_8_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %168 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 56), align 8*/
		main_multiplyloop_bodydim0lrph_168 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %169 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 56), align 8*/
		main_multiplyloop_bodydim0lrph_169 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_170 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %170 = fmul float %168, %169*/
	main_multiplyloop_bodydim0lrph_170_reg = main_multiplyloop_bodydim0lrph_11_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %171 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 57), align 4*/
		main_multiplyloop_bodydim0lrph_171 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %172 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 57), align 4*/
		main_multiplyloop_bodydim0lrph_172 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_173 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %173 = fmul float %171, %172*/
	main_multiplyloop_bodydim0lrph_173_reg = main_multiplyloop_bodydim0lrph_14_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %174 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 58), align 8*/
		main_multiplyloop_bodydim0lrph_174 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %175 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 58), align 8*/
		main_multiplyloop_bodydim0lrph_175 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_176 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %176 = fmul float %174, %175*/
	main_multiplyloop_bodydim0lrph_176_reg = main_multiplyloop_bodydim0lrph_17_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %177 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 59), align 4*/
		main_multiplyloop_bodydim0lrph_177 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %178 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 59), align 4*/
		main_multiplyloop_bodydim0lrph_178 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_179 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %179 = fmul float %177, %178*/
	main_multiplyloop_bodydim0lrph_179_reg = main_multiplyloop_bodydim0lrph_20_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %180 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 60), align 8*/
		main_multiplyloop_bodydim0lrph_180 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %181 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 60), align 8*/
		main_multiplyloop_bodydim0lrph_181 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_182 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %182 = fmul float %180, %181*/
	main_multiplyloop_bodydim0lrph_182_reg = main_multiplyloop_bodydim0lrph_23_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %183 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 61), align 4*/
		main_multiplyloop_bodydim0lrph_183 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %184 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 61), align 4*/
		main_multiplyloop_bodydim0lrph_184 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_185 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %185 = fmul float %183, %184*/
	main_multiplyloop_bodydim0lrph_185_reg = main_multiplyloop_bodydim0lrph_26_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %186 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 62), align 8*/
		main_multiplyloop_bodydim0lrph_186 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %187 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 62), align 8*/
		main_multiplyloop_bodydim0lrph_187 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_188 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %188 = fmul float %186, %187*/
	main_multiplyloop_bodydim0lrph_188_reg = main_multiplyloop_bodydim0lrph_29_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %189 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 63), align 4*/
		main_multiplyloop_bodydim0lrph_189 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %190 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 63), align 4*/
		main_multiplyloop_bodydim0lrph_190 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0lrph_191 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %multiply.loop_body.dim.0.lr.ph*/
/*   %191 = fmul float %189, %190*/
	main_multiplyloop_bodydim0lrph_191_reg = main_multiplyloop_bodydim0lrph_32_reg;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
		main_multiplyloop_bodydim0lrph_leflow_retval = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		main_multiplyloop_bodydim0lrph_leflow_retval_reg <= main_multiplyloop_bodydim0lrph_leflow_retval;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_leflow_retval) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0lrph_leflow_retval_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %2 = fmul float %0, %1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %5 = fmul float %3, %4*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_3;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %8 = fmul float %6, %7*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_6;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %11 = fmul float %9, %10*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_9;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %14 = fmul float %12, %13*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_12;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %17 = fmul float %15, %16*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_15;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %20 = fmul float %18, %19*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_18;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %23 = fmul float %21, %22*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_21;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %26 = fmul float %24, %25*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_24;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %29 = fmul float %27, %28*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_27;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %32 = fmul float %30, %31*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_30;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %35 = fmul float %33, %34*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_33;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %38 = fmul float %36, %37*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_36;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %41 = fmul float %39, %40*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_39;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %44 = fmul float %42, %43*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_42;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %47 = fmul float %45, %46*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_45;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %50 = fmul float %48, %49*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_48;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %53 = fmul float %51, %52*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_51;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %56 = fmul float %54, %55*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_54;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %59 = fmul float %57, %58*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_57;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %62 = fmul float %60, %61*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_60;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %65 = fmul float %63, %64*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_63;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %68 = fmul float %66, %67*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_66;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %71 = fmul float %69, %70*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_69;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %74 = fmul float %72, %73*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_72;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %77 = fmul float %75, %76*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_75;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %80 = fmul float %78, %79*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_78;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %83 = fmul float %81, %82*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_81;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %86 = fmul float %84, %85*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_84;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %89 = fmul float %87, %88*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_87;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %92 = fmul float %90, %91*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_90;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %95 = fmul float %93, %94*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_93;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %98 = fmul float %96, %97*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_96;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %101 = fmul float %99, %100*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_99;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %104 = fmul float %102, %103*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_102;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %107 = fmul float %105, %106*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_105;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %110 = fmul float %108, %109*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_108;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %113 = fmul float %111, %112*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_111;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %116 = fmul float %114, %115*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_114;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %119 = fmul float %117, %118*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_117;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %122 = fmul float %120, %121*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_120;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %125 = fmul float %123, %124*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_123;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %128 = fmul float %126, %127*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_126;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %131 = fmul float %129, %130*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_129;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %134 = fmul float %132, %133*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_132;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %137 = fmul float %135, %136*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_135;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %140 = fmul float %138, %139*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_138;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %143 = fmul float %141, %142*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_141;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %146 = fmul float %144, %145*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_144;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %149 = fmul float %147, %148*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_147;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %152 = fmul float %150, %151*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_150;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %155 = fmul float %153, %154*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_153;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %158 = fmul float %156, %157*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_156;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %161 = fmul float %159, %160*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_159;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %164 = fmul float %162, %163*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_162;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %167 = fmul float %165, %166*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_165;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %170 = fmul float %168, %169*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_168;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %173 = fmul float %171, %172*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_171;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %176 = fmul float %174, %175*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_174;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %179 = fmul float %177, %178*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_177;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %182 = fmul float %180, %181*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_180;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %185 = fmul float %183, %184*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_183;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %188 = fmul float %186, %187*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65)) begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_186;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %191 = fmul float %189, %190*/
	else /* if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) */ begin
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0lrph_189;
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %2 = fmul float %0, %1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %5 = fmul float %3, %4*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_4;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %8 = fmul float %6, %7*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_7;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %11 = fmul float %9, %10*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_10;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %14 = fmul float %12, %13*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_13;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %17 = fmul float %15, %16*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_16;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %20 = fmul float %18, %19*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_19;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %23 = fmul float %21, %22*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_22;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %26 = fmul float %24, %25*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_25;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %29 = fmul float %27, %28*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_28;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %32 = fmul float %30, %31*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_31;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %35 = fmul float %33, %34*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_34;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %38 = fmul float %36, %37*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_37;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %41 = fmul float %39, %40*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_40;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %44 = fmul float %42, %43*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_43;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %47 = fmul float %45, %46*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_46;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %50 = fmul float %48, %49*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_49;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %53 = fmul float %51, %52*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_52;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %56 = fmul float %54, %55*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_55;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %59 = fmul float %57, %58*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_58;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %62 = fmul float %60, %61*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_61;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %65 = fmul float %63, %64*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_64;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %68 = fmul float %66, %67*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_67;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %71 = fmul float %69, %70*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_70;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %74 = fmul float %72, %73*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_73;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %77 = fmul float %75, %76*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_76;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %80 = fmul float %78, %79*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_79;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %83 = fmul float %81, %82*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_82;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %86 = fmul float %84, %85*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_85;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %89 = fmul float %87, %88*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_88;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %92 = fmul float %90, %91*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_91;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %95 = fmul float %93, %94*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_94;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %98 = fmul float %96, %97*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_97;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %101 = fmul float %99, %100*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_100;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %104 = fmul float %102, %103*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_103;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %107 = fmul float %105, %106*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_106;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %110 = fmul float %108, %109*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_109;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %113 = fmul float %111, %112*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_112;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %116 = fmul float %114, %115*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_115;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %119 = fmul float %117, %118*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_118;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %122 = fmul float %120, %121*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_121;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %125 = fmul float %123, %124*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_124;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %128 = fmul float %126, %127*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_127;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %131 = fmul float %129, %130*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_130;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %134 = fmul float %132, %133*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_133;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %137 = fmul float %135, %136*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_136;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %140 = fmul float %138, %139*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_139;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %143 = fmul float %141, %142*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_142;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %146 = fmul float %144, %145*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_145;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %149 = fmul float %147, %148*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_148;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %152 = fmul float %150, %151*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_151;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %155 = fmul float %153, %154*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_154;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %158 = fmul float %156, %157*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_157;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %161 = fmul float %159, %160*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_160;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %164 = fmul float %162, %163*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_163;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %167 = fmul float %165, %166*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_166;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %170 = fmul float %168, %169*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_169;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %173 = fmul float %171, %172*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_172;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %176 = fmul float %174, %175*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_175;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %179 = fmul float %177, %178*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_178;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %182 = fmul float %180, %181*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_181;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %185 = fmul float %183, %184*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_184;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %188 = fmul float %186, %187*/
	else if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65)) begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_187;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %191 = fmul float %189, %190*/
	else /* if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) */ begin
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0lrph_190;
	end
end
always @(*) begin
	altfp_main_multiplyloop_bodydim0lrph_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_multiply_32_0 = altfp_multiplier_main_multiplyloop_bodydim0lrph_2_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   ret float %leflow_retval*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_98)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %0 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %3 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %6 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %9 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %12 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %15 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %18 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %21 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %24 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %27 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %30 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %33 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %36 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %39 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %42 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %45 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %48 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %51 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %54 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %57 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %60 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %63 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %66 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %69 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %72 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %75 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %78 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %81 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %84 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %87 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %90 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %93 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %96 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %99 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %102 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %105 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %108 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %111 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %114 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %117 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %120 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %123 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %126 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %129 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %132 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %135 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %138 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %141 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %144 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %147 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %150 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %153 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %156 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %159 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %162 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %165 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %168 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %171 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %174 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %177 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %180 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %183 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %186 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %189 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %2, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %5, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %8, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %14, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %20, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %26, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %32, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %38, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %44, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %50, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %56, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %62, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %68, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %74, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %80, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %86, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %92, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %98, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %104, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %110, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %116, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %122, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %128, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %134, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %140, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %146, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %152, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %158, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %164, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %170, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %176, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %182, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %188, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %0 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1)) begin
		memory_controller_address_a = `TAG_g_param1_a;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %3 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd1));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %6 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd2));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %9 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd3));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %12 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd4));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %15 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd5));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %18 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd6));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %21 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd7));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %24 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd8));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %27 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd9));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %30 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd10));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %33 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd11));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %36 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd12));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %39 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd13));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %42 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd14));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %45 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd15));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %48 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd16));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %51 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd17));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %54 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd18));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %57 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd19));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %60 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd20));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %63 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd21));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %66 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd22));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %69 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd23));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %72 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd24));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %75 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd25));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %78 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd26));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %81 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd27));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %84 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd28));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %87 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd29));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %90 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd30));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %93 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd31));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %96 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd32));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %99 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd33));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %102 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd34));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %105 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd35));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %108 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd36));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %111 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd37));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %114 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd38));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %117 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd39));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %120 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd40));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %123 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd41));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %126 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd42));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %129 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd43));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %132 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd44));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %135 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd45));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %138 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd46));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %141 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd47));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %144 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd48));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %147 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd49));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %150 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd50));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %153 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd51));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %156 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd52));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %159 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd53));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %162 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd54));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %165 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd55));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %168 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd56));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %171 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd57));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %174 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd58));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %177 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd59));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %180 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd60));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %183 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd61));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %186 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd62));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %189 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		memory_controller_address_a = (`TAG_g_param1_a + (64'd4 * 64'd63));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %2, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65)) begin
		memory_controller_address_a = `TAG_g_temp0_a;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %5, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd1));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %8, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd2));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %14, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd4));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %20, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd6));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %26, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd8));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %32, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd10));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %38, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd12));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %44, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd14));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %50, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd16));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %56, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd18));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %62, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd20));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %68, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd22));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %74, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd24));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %80, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd26));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %86, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd28));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %92, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd30));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %98, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd32));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %104, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd34));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %110, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd36));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %116, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd38));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %122, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd40));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %128, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd42));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %134, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd44));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %140, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd46));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %146, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd48));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %152, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd50));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %158, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd52));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %164, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd54));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %170, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd56));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %176, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd58));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %182, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd60));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %188, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97)) begin
		memory_controller_address_a = (`TAG_g_temp0_a + (64'd4 * 64'd62));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %0 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %3 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %6 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %9 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %12 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %15 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %18 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %21 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %24 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %27 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %30 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %33 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %36 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %39 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %42 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %45 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %48 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %51 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %54 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %57 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %60 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %63 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %66 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %69 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %72 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %75 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %78 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %81 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %84 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %87 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %90 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %93 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %96 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %99 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %102 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %105 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %108 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %111 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %114 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %117 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %120 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %123 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %126 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %129 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %132 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %135 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %138 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %141 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %144 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %147 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %150 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %153 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %156 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %159 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %162 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %165 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %168 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %171 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %174 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %177 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %180 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %183 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %186 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %189 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %2, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %5, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %8, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %14, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %20, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %26, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %32, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %38, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %44, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %50, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %56, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %62, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %68, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %74, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %80, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %86, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %92, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %98, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %104, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %110, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %116, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %122, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %128, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %134, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %140, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %146, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %152, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %158, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %164, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %170, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %176, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %182, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %188, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %2, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_2_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %5, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_5_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %8, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_8_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %14, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_14_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %20, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_20_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %26, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_26_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %32, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_32_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %38, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_38_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %44, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_44_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %50, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_50_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %56, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_56_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %62, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_62_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %68, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_68_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %74, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_74_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %80, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_80_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %86, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_86_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %92, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_92_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %98, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_98_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %104, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_104_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %110, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_110_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %116, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_116_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %122, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_122_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %128, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_128_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %134, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_134_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %140, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_140_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %146, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_146_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %152, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_152_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %158, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_158_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %164, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_164_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %170, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_170_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %176, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_176_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %182, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_182_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %188, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0lrph_188_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %0 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %3 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %6 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %9 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %12 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %15 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %18 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %21 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %24 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %27 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %30 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %33 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %36 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %39 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %42 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %45 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %48 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %51 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %54 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %57 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %60 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %63 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %66 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %69 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %72 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %75 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %78 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %81 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %84 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %87 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %90 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %93 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %96 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %99 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %102 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %105 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %108 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %111 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %114 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %117 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %120 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %123 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %126 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %129 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %132 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %135 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %138 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %141 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %144 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %147 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %150 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %153 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %156 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %159 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %162 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %165 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %168 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %171 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %174 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %177 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %180 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %183 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %186 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %189 = load volatile float* getelementptr inbounds ([64 x float]* @param1, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %2, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %5, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %8, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %14, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %20, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %26, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %32, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %38, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %44, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %50, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %56, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %62, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %68, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %74, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %80, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %86, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %92, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %98, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %104, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %110, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %116, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %122, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %128, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %134, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %140, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %146, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %152, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %158, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %164, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %170, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %176, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %182, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %188, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %1 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %4 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %7 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %10 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %13 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %16 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %19 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %22 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %25 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %28 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %31 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %34 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %37 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %40 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %43 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %46 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %49 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %52 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %55 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %58 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %61 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %64 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %67 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %70 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %73 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %76 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %79 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %82 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %85 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %88 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %91 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %94 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %97 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %100 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %103 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %106 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %109 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %112 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %115 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %118 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %121 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %124 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %127 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %130 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %133 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %136 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %139 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %142 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %145 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %148 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %151 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %154 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %157 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %160 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %163 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %166 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %169 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %172 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %175 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %178 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %181 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %184 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %187 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %190 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %11, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %17, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %23, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %29, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %35, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %41, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %47, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %53, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %59, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %65, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %71, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %77, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %83, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %89, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %95, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %101, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %107, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %113, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %119, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %125, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %131, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %137, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %143, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %149, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %155, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %161, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %167, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %173, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %179, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %185, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %191, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %1 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1)) begin
		memory_controller_address_b = `TAG_g_param0_a;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %4 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd1));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %7 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd2));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %10 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd3));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %13 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd4));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %16 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd5));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %19 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd6));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %22 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd7));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %25 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd8));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %28 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd9));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %31 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd10));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %34 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd11));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %37 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd12));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %40 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd13));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %43 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd14));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %46 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd15));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %49 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd16));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %52 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd17));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %55 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd18));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %58 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd19));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %61 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd20));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %64 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd21));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %67 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd22));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %70 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd23));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %73 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd24));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %76 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd25));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %79 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd26));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %82 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd27));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %85 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd28));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %88 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd29));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %91 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd30));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %94 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd31));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %97 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd32));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %100 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd33));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %103 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd34));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %106 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd35));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %109 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd36));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %112 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd37));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %115 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd38));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %118 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd39));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %121 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd40));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %124 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd41));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %127 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd42));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %130 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd43));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %133 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd44));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %136 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd45));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %139 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd46));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %142 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd47));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %145 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd48));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %148 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd49));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %151 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd50));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %154 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd51));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %157 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd52));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %160 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd53));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %163 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd54));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %166 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd55));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %169 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd56));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %172 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd57));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %175 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd58));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %178 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd59));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %181 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd60));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %184 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd61));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %187 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd62));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %190 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		memory_controller_address_b = (`TAG_g_param0_a + (64'd4 * 64'd63));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		memory_controller_address_b = `TAG_g_temp0_a;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %11, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd3));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %17, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd5));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %23, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd7));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %29, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd9));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %35, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd11));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %41, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd13));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %47, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd15));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %53, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd17));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %59, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd19));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %65, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd21));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %71, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd23));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %77, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd25));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %83, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd27));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %89, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd29));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %95, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd31));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %101, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd33));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %107, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd35));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %113, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd37));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %119, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd39));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %125, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd41));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %131, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd43));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %137, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd45));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %143, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd47));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %149, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd49));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %155, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd51));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %161, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd53));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %167, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd55));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %173, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd57));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %179, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd59));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %185, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd61));
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %191, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97)) begin
		memory_controller_address_b = (`TAG_g_temp0_a + (64'd4 * 64'd63));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %1 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %4 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %7 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %10 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %13 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %16 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %19 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %22 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %25 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %28 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %31 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %34 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %37 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %40 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %43 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %46 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %49 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %52 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %55 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %58 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %61 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %64 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %67 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %70 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %73 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %76 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %79 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %82 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %85 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %88 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %91 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %94 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %97 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %100 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %103 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %106 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %109 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %112 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %115 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %118 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %121 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %124 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %127 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %130 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %133 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %136 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %139 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %142 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %145 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %148 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %151 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %154 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %157 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %160 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %163 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %166 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %169 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %172 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %175 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %178 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %181 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %184 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %187 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %190 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %11, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %17, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %23, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %29, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %35, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %41, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %47, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %53, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %59, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %65, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %71, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %77, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %83, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %89, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %95, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %101, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %107, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %113, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %119, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %125, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %131, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %137, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %143, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %149, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %155, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %161, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %167, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %173, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %179, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %185, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %191, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %11, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_11_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %17, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_17_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %23, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_23_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %29, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_29_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %35, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_35_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %41, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_41_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %47, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_47_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %53, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_53_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %59, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_59_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %65, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_65_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %71, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_71_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %77, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_77_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %83, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_83_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %89, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_89_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %95, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_95_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %101, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_101_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %107, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_107_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %113, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_113_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %119, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_119_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %125, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_125_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %131, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_131_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %137, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_137_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %143, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_143_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %149, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_149_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %155, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_155_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %161, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_161_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %167, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_167_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %173, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_173_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %179, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_179_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %185, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_185_reg;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %191, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97)) begin
		memory_controller_in_b = main_multiplyloop_bodydim0lrph_191_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %1 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %4 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %7 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 2), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %10 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %13 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 4), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %16 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %19 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 6), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %22 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %25 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 8), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %28 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %31 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 10), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %34 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %37 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 12), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %40 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %43 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 14), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %46 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %49 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 16), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %52 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %55 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 18), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %58 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %61 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 20), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %64 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %67 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 22), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %70 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %73 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 24), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %76 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %79 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 26), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %82 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_28)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %85 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 28), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %88 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %91 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 30), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %94 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %97 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 32), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_33)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %100 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %103 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 34), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %106 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %109 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 36), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_37)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %112 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_38)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %115 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 38), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_39)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %118 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %121 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 40), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_41)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %124 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_42)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %127 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 42), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_43)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %130 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_44)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %133 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 44), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_45)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %136 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_46)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %139 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 46), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_47)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %142 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_48)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %145 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 48), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_49)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %148 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %151 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 50), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_51)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %154 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_52)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %157 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 52), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_53)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %160 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_54)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %163 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 54), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_55)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %166 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_56)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %169 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 56), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_57)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %172 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_58)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %175 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 58), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_59)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %178 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %181 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 60), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_61)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %184 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_62)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %187 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 62), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_63)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %190 = load volatile float* getelementptr inbounds ([64 x float]* @param0, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_64)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_66)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %11, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_67)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %17, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_68)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %23, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 7), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_69)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %29, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 9), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_70)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %35, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 11), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_71)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %41, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 13), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_72)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %47, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 15), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_73)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %53, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 17), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_74)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %59, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 19), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_75)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %65, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 21), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_76)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %71, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_77)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %77, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 25), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_78)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %83, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 27), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_79)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %89, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 29), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_80)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %95, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 31), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_81)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %101, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 33), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_82)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %107, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 35), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_83)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %113, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 37), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_84)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %119, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 39), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_85)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %125, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 41), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_86)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %131, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 43), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_87)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %137, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 45), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_88)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %143, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 47), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_89)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %149, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 49), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_90)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %155, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 51), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_91)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %161, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 53), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_92)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %167, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 55), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_93)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %173, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 57), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_94)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %179, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 59), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_95)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %185, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 61), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_96)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   store volatile float %191, float* getelementptr inbounds ([64 x float]* @temp0, i64 0, i64 63), align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_97)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0.lr.ph*/
	/*   ret float %leflow_retval*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0lrph_98)) begin
		return_val <= main_multiplyloop_bodydim0lrph_leflow_retval_reg;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0lrph_leflow_retval_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $writememh("memory_dump.txt",top_inst.memory_controller_inst.temp0.ram);
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
