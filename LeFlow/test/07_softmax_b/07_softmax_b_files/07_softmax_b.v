//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Aug 11 21:17:39 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 64
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 6
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @halF33 = internal unnamed_addr constant [2 x float] [float 5.000000e-01, float -5.000000e-01], align 4
`define TAG_g_halF33 `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_halF33_a {`TAG_g_halF33, 55'd0}
// @ln2HI31 = internal unnamed_addr constant [2 x float] [float 0x3FE62E3000000000, float 0xBFE62E3000000000], align 4
`define TAG_g_ln2HI31 `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_ln2HI31_a {`TAG_g_ln2HI31, 55'd0}
// @ln2LO32 = internal unnamed_addr constant [2 x float] [float 0x3EE2FEFA20000000, float 0xBEE2FEFA20000000], align 4
`define TAG_g_ln2LO32 `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_ln2LO32_a {`TAG_g_ln2LO32, 55'd0}
// @param0 = internal global [1 x [64 x float]] zeroinitializer, align 8
`define TAG_g_param0 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_param0_a {`TAG_g_param0, 55'd0}
// @temp1 = internal unnamed_addr global [1 x [64 x float]] zeroinitializer, align 8
`define TAG_g_temp1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_temp1_a {`TAG_g_temp1, 55'd0}
// @temp3 = internal global [64 x float] zeroinitializer, align 8
`define TAG_g_temp3 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_temp3_a {`TAG_g_temp3, 55'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [5:0] temp3_address_a;
reg [5:0] temp3_address_b;
reg temp3_write_enable_a;
reg temp3_write_enable_b;
reg [31:0] temp3_in_a;
reg [31:0] temp3_in_b;
wire [31:0] temp3_out_a;
wire [31:0] temp3_out_b;

// @temp3 = internal global [64 x float] zeroinitializer, align 8
ram_dual_port temp3 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( temp3_address_a ),
	.address_b( temp3_address_b ),
	.wren_a( temp3_write_enable_a ),
	.wren_b( temp3_write_enable_b ),
	.data_a( temp3_in_a ),
	.data_b( temp3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( temp3_out_a ),
	.q_b( temp3_out_b)
);
defparam temp3.width_a = 32;
defparam temp3.width_b = 32;
defparam temp3.widthad_a = 6;
defparam temp3.widthad_b = 6;
defparam temp3.width_be_a = 1;
defparam temp3.width_be_b = 1;
defparam temp3.numwords_a = 64;
defparam temp3.numwords_b = 64;
defparam temp3.latency = ram_latency;
defparam temp3.init_file = "temp3.mif";

reg [5:0] temp1_address_a;
reg [5:0] temp1_address_b;
reg temp1_write_enable_a;
reg temp1_write_enable_b;
reg [31:0] temp1_in_a;
reg [31:0] temp1_in_b;
wire [31:0] temp1_out_a;
wire [31:0] temp1_out_b;

// @temp1 = internal unnamed_addr global [1 x [64 x float]] zeroinitializer, align 8
ram_dual_port temp1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( temp1_address_a ),
	.address_b( temp1_address_b ),
	.wren_a( temp1_write_enable_a ),
	.wren_b( temp1_write_enable_b ),
	.data_a( temp1_in_a ),
	.data_b( temp1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( temp1_out_a ),
	.q_b( temp1_out_b)
);
defparam temp1.width_a = 32;
defparam temp1.width_b = 32;
defparam temp1.widthad_a = 6;
defparam temp1.widthad_b = 6;
defparam temp1.width_be_a = 1;
defparam temp1.width_be_b = 1;
defparam temp1.numwords_a = 64;
defparam temp1.numwords_b = 64;
defparam temp1.latency = ram_latency;
defparam temp1.init_file = "temp1.mif";

reg [5:0] param0_address_a;
reg [5:0] param0_address_b;
reg param0_write_enable_a;
reg param0_write_enable_b;
reg [31:0] param0_in_a;
reg [31:0] param0_in_b;
wire [31:0] param0_out_a;
wire [31:0] param0_out_b;

// @param0 = internal global [1 x [64 x float]] zeroinitializer, align 8
ram_dual_port param0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( param0_address_a ),
	.address_b( param0_address_b ),
	.wren_a( param0_write_enable_a ),
	.wren_b( param0_write_enable_b ),
	.data_a( param0_in_a ),
	.data_b( param0_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( param0_out_a ),
	.q_b( param0_out_b)
);
defparam param0.width_a = 32;
defparam param0.width_b = 32;
defparam param0.widthad_a = 6;
defparam param0.widthad_b = 6;
defparam param0.width_be_a = 1;
defparam param0.width_be_b = 1;
defparam param0.numwords_a = 64;
defparam param0.numwords_b = 64;
defparam param0.latency = ram_latency;
defparam param0.init_file = "param0.mif";

reg [0:0] ln2HI31_address_a;
reg [0:0] ln2HI31_address_b;
reg ln2HI31_write_enable_a;
reg ln2HI31_write_enable_b;
reg [31:0] ln2HI31_in_a;
reg [31:0] ln2HI31_in_b;
wire [31:0] ln2HI31_out_a;
wire [31:0] ln2HI31_out_b;

// @ln2HI31 = internal unnamed_addr constant [2 x float] [float 0x3FE62E3000000000, float 0xBFE62E3000000000], align 4
rom_dual_port ln2HI31 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ln2HI31_address_a ),
	.address_b( ln2HI31_address_b ),
	.q_a( ln2HI31_out_a ),
	.q_b( ln2HI31_out_b)
);
defparam ln2HI31.width_a = 32;
defparam ln2HI31.width_b = 32;
defparam ln2HI31.widthad_a = 1;
defparam ln2HI31.widthad_b = 1;
defparam ln2HI31.numwords_a = 2;
defparam ln2HI31.numwords_b = 2;
defparam ln2HI31.latency = ram_latency;
defparam ln2HI31.init_file = "ln2HI31.mif";

reg [0:0] ln2LO32_address_a;
reg [0:0] ln2LO32_address_b;
reg ln2LO32_write_enable_a;
reg ln2LO32_write_enable_b;
reg [31:0] ln2LO32_in_a;
reg [31:0] ln2LO32_in_b;
wire [31:0] ln2LO32_out_a;
wire [31:0] ln2LO32_out_b;

// @ln2LO32 = internal unnamed_addr constant [2 x float] [float 0x3EE2FEFA20000000, float 0xBEE2FEFA20000000], align 4
rom_dual_port ln2LO32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ln2LO32_address_a ),
	.address_b( ln2LO32_address_b ),
	.q_a( ln2LO32_out_a ),
	.q_b( ln2LO32_out_b)
);
defparam ln2LO32.width_a = 32;
defparam ln2LO32.width_b = 32;
defparam ln2LO32.widthad_a = 1;
defparam ln2LO32.widthad_b = 1;
defparam ln2LO32.numwords_a = 2;
defparam ln2LO32.numwords_b = 2;
defparam ln2LO32.latency = ram_latency;
defparam ln2LO32.init_file = "ln2LO32.mif";

reg [0:0] halF33_address_a;
reg [0:0] halF33_address_b;
reg halF33_write_enable_a;
reg halF33_write_enable_b;
reg [31:0] halF33_in_a;
reg [31:0] halF33_in_b;
wire [31:0] halF33_out_a;
wire [31:0] halF33_out_b;

// @halF33 = internal unnamed_addr constant [2 x float] [float 5.000000e-01, float -5.000000e-01], align 4
rom_dual_port halF33 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( halF33_address_a ),
	.address_b( halF33_address_b ),
	.q_a( halF33_out_a ),
	.q_b( halF33_out_b)
);
defparam halF33.width_a = 32;
defparam halF33.width_b = 32;
defparam halF33.widthad_a = 1;
defparam halF33.widthad_b = 1;
defparam halF33.numwords_a = 2;
defparam halF33.numwords_b = 2;
defparam halF33.latency = ram_latency;
defparam halF33.init_file = "halF33.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_temp3_a;
assign select_temp3_a = (tag_a == `TAG_g_temp3);
reg [ram_latency:0] select_temp3_reg_a;
wire [31:0] memory_controller_temp3_out_a;
assign memory_controller_temp3_out_a = {32{ select_temp3_reg_a[ram_latency]}} & temp3_out_a;

wire select_temp1_a;
assign select_temp1_a = (tag_a == `TAG_g_temp1);
reg [ram_latency:0] select_temp1_reg_a;
wire [31:0] memory_controller_temp1_out_a;
assign memory_controller_temp1_out_a = {32{ select_temp1_reg_a[ram_latency]}} & temp1_out_a;

wire select_param0_a;
assign select_param0_a = (tag_a == `TAG_g_param0);
reg [ram_latency:0] select_param0_reg_a;
wire [31:0] memory_controller_param0_out_a;
assign memory_controller_param0_out_a = {32{ select_param0_reg_a[ram_latency]}} & param0_out_a;

wire select_ln2HI31_a;
assign select_ln2HI31_a = (tag_a == `TAG_g_ln2HI31);
reg [ram_latency:0] select_ln2HI31_reg_a;
wire [31:0] memory_controller_ln2HI31_out_a;
assign memory_controller_ln2HI31_out_a = {32{ select_ln2HI31_reg_a[ram_latency]}} & ln2HI31_out_a;

wire select_ln2LO32_a;
assign select_ln2LO32_a = (tag_a == `TAG_g_ln2LO32);
reg [ram_latency:0] select_ln2LO32_reg_a;
wire [31:0] memory_controller_ln2LO32_out_a;
assign memory_controller_ln2LO32_out_a = {32{ select_ln2LO32_reg_a[ram_latency]}} & ln2LO32_out_a;

wire select_halF33_a;
assign select_halF33_a = (tag_a == `TAG_g_halF33);
reg [ram_latency:0] select_halF33_reg_a;
wire [31:0] memory_controller_halF33_out_a;
assign memory_controller_halF33_out_a = {32{ select_halF33_reg_a[ram_latency]}} & halF33_out_a;

always @(*)
begin
	temp3_address_a = memory_controller_address_a [6-1+2:2] & {6{select_temp3_a}};
	temp3_write_enable_a = memory_controller_write_enable_a & select_temp3_a;
	temp3_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	temp1_address_a = memory_controller_address_a [6-1+2:2] & {6{select_temp1_a}};
	temp1_write_enable_a = memory_controller_write_enable_a & select_temp1_a;
	temp1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	param0_address_a = memory_controller_address_a [6-1+2:2] & {6{select_param0_a}};
	param0_write_enable_a = memory_controller_write_enable_a & select_param0_a;
	param0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ln2HI31_address_a = memory_controller_address_a [1-1+2:2] & {1{select_ln2HI31_a}};
	ln2HI31_write_enable_a = memory_controller_write_enable_a & select_ln2HI31_a;
	ln2HI31_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ln2LO32_address_a = memory_controller_address_a [1-1+2:2] & {1{select_ln2LO32_a}};
	ln2LO32_write_enable_a = memory_controller_write_enable_a & select_ln2LO32_a;
	ln2LO32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	halF33_address_a = memory_controller_address_a [1-1+2:2] & {1{select_halF33_a}};
	halF33_write_enable_a = memory_controller_write_enable_a & select_halF33_a;
	halF33_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_temp3_reg_a[ram_latency]}} | {2{select_temp1_reg_a[ram_latency]}} | {2{select_param0_reg_a[ram_latency]}} | {2{select_ln2HI31_reg_a[ram_latency]}} | {2{select_ln2LO32_reg_a[ram_latency]}} | {2{select_halF33_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_temp3_out_a | memory_controller_temp1_out_a | memory_controller_param0_out_a | memory_controller_ln2HI31_out_a | memory_controller_ln2LO32_out_a | memory_controller_halF33_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_temp3_reg_a[j+1] <= select_temp3_reg_a[j];
select_temp1_reg_a[j+1] <= select_temp1_reg_a[j];
select_param0_reg_a[j+1] <= select_param0_reg_a[j];
select_ln2HI31_reg_a[j+1] <= select_ln2HI31_reg_a[j];
select_ln2LO32_reg_a[j+1] <= select_ln2LO32_reg_a[j];
select_halF33_reg_a[j+1] <= select_halF33_reg_a[j];
end
always @(*)
begin
select_temp3_reg_a[0] <= select_temp3_a;
select_temp1_reg_a[0] <= select_temp1_a;
select_param0_reg_a[0] <= select_param0_a;
select_ln2HI31_reg_a[0] <= select_ln2HI31_a;
select_ln2LO32_reg_a[0] <= select_ln2LO32_a;
select_halF33_reg_a[0] <= select_halF33_a;
end

reg [2:0] select_not_struct_b;

wire select_temp3_b;
assign select_temp3_b = (tag_b == `TAG_g_temp3);
reg [ram_latency:0] select_temp3_reg_b;
wire [31:0] memory_controller_temp3_out_b;
assign memory_controller_temp3_out_b = {32{ select_temp3_reg_b[ram_latency]}} & temp3_out_b;

wire select_temp1_b;
assign select_temp1_b = (tag_b == `TAG_g_temp1);
reg [ram_latency:0] select_temp1_reg_b;
wire [31:0] memory_controller_temp1_out_b;
assign memory_controller_temp1_out_b = {32{ select_temp1_reg_b[ram_latency]}} & temp1_out_b;

wire select_param0_b;
assign select_param0_b = (tag_b == `TAG_g_param0);
reg [ram_latency:0] select_param0_reg_b;
wire [31:0] memory_controller_param0_out_b;
assign memory_controller_param0_out_b = {32{ select_param0_reg_b[ram_latency]}} & param0_out_b;

wire select_ln2HI31_b;
assign select_ln2HI31_b = (tag_b == `TAG_g_ln2HI31);
reg [ram_latency:0] select_ln2HI31_reg_b;
wire [31:0] memory_controller_ln2HI31_out_b;
assign memory_controller_ln2HI31_out_b = {32{ select_ln2HI31_reg_b[ram_latency]}} & ln2HI31_out_b;

wire select_ln2LO32_b;
assign select_ln2LO32_b = (tag_b == `TAG_g_ln2LO32);
reg [ram_latency:0] select_ln2LO32_reg_b;
wire [31:0] memory_controller_ln2LO32_out_b;
assign memory_controller_ln2LO32_out_b = {32{ select_ln2LO32_reg_b[ram_latency]}} & ln2LO32_out_b;

wire select_halF33_b;
assign select_halF33_b = (tag_b == `TAG_g_halF33);
reg [ram_latency:0] select_halF33_reg_b;
wire [31:0] memory_controller_halF33_out_b;
assign memory_controller_halF33_out_b = {32{ select_halF33_reg_b[ram_latency]}} & halF33_out_b;

always @(*)
begin
	temp3_address_b = memory_controller_address_b [6-1+2:2] & {6{select_temp3_b}};
	temp3_write_enable_b = memory_controller_write_enable_b & select_temp3_b;
	temp3_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	temp1_address_b = memory_controller_address_b [6-1+2:2] & {6{select_temp1_b}};
	temp1_write_enable_b = memory_controller_write_enable_b & select_temp1_b;
	temp1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	param0_address_b = memory_controller_address_b [6-1+2:2] & {6{select_param0_b}};
	param0_write_enable_b = memory_controller_write_enable_b & select_param0_b;
	param0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ln2HI31_address_b = memory_controller_address_b [1-1+2:2] & {1{select_ln2HI31_b}};
	ln2HI31_write_enable_b = memory_controller_write_enable_b & select_ln2HI31_b;
	ln2HI31_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ln2LO32_address_b = memory_controller_address_b [1-1+2:2] & {1{select_ln2LO32_b}};
	ln2LO32_write_enable_b = memory_controller_write_enable_b & select_ln2LO32_b;
	ln2LO32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	halF33_address_b = memory_controller_address_b [1-1+2:2] & {1{select_halF33_b}};
	halF33_write_enable_b = memory_controller_write_enable_b & select_halF33_b;
	halF33_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_temp3_reg_b[ram_latency]}} | {2{select_temp1_reg_b[ram_latency]}} | {2{select_param0_reg_b[ram_latency]}} | {2{select_ln2HI31_reg_b[ram_latency]}} | {2{select_ln2LO32_reg_b[ram_latency]}} | {2{select_halF33_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_temp3_out_b | memory_controller_temp1_out_b | memory_controller_param0_out_b | memory_controller_ln2HI31_out_b | memory_controller_ln2LO32_out_b | memory_controller_halF33_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_temp3_reg_b[j+1] <= select_temp3_reg_b[j];
select_temp1_reg_b[j+1] <= select_temp1_reg_b[j];
select_param0_reg_b[j+1] <= select_param0_reg_b[j];
select_ln2HI31_reg_b[j+1] <= select_ln2HI31_reg_b[j];
select_ln2LO32_reg_b[j+1] <= select_ln2LO32_reg_b[j];
select_halF33_reg_b[j+1] <= select_halF33_reg_b[j];
end
always @(*)
begin
select_temp3_reg_b[0] <= select_temp3_b;
select_temp1_reg_b[0] <= select_temp1_b;
select_param0_reg_b[0] <= select_param0_b;
select_ln2HI31_reg_b[0] <= select_ln2HI31_b;
select_ln2LO32_reg_b[0] <= select_ln2LO32_b;
select_halF33_reg_b[0] <= select_halF33_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [9:0] LEGUP_0 = 10'd0;
parameter [9:0] LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_1 = 10'd1;
parameter [9:0] LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_2 = 10'd2;
parameter [9:0] LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_3 = 10'd3;
parameter [9:0] LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_4 = 10'd4;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1preheader_5 = 10'd5;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_6 = 10'd6;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_7 = 10'd7;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_8 = 10'd8;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_9 = 10'd9;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_10 = 10'd10;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_11 = 10'd11;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_12 = 10'd12;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_13 = 10'd13;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_14 = 10'd14;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_15 = 10'd15;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_16 = 10'd16;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_17 = 10'd17;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_18 = 10'd18;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_19 = 10'd19;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_20 = 10'd20;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_21 = 10'd21;
parameter [9:0] LEGUP_F_main_BB_fusion1loop_bodydim1_22 = 10'd22;
parameter [9:0] LEGUP_F_main_BB__13_23 = 10'd23;
parameter [9:0] LEGUP_F_main_BB__13_24 = 10'd24;
parameter [9:0] LEGUP_F_main_BB__13_25 = 10'd25;
parameter [9:0] LEGUP_F_main_BB__13_26 = 10'd26;
parameter [9:0] LEGUP_F_main_BB__13_27 = 10'd27;
parameter [9:0] LEGUP_F_main_BB__13_28 = 10'd28;
parameter [9:0] LEGUP_F_main_BB__13_29 = 10'd29;
parameter [9:0] LEGUP_F_main_BB__13_30 = 10'd30;
parameter [9:0] LEGUP_F_main_BB__13_31 = 10'd31;
parameter [9:0] LEGUP_F_main_BB__13_32 = 10'd32;
parameter [9:0] LEGUP_F_main_BB__13_33 = 10'd33;
parameter [9:0] LEGUP_F_main_BB__13_34 = 10'd34;
parameter [9:0] LEGUP_F_main_BB__13_35 = 10'd35;
parameter [9:0] LEGUP_F_main_BB__13_36 = 10'd36;
parameter [9:0] LEGUP_F_main_BB__13_37 = 10'd37;
parameter [9:0] LEGUP_F_main_BB__15_38 = 10'd38;
parameter [9:0] LEGUP_F_main_BB__17_39 = 10'd39;
parameter [9:0] LEGUP_F_main_BB__19_40 = 10'd40;
parameter [9:0] LEGUP_F_main_BB__21_41 = 10'd41;
parameter [9:0] LEGUP_F_main_BB_threadpresplit_42 = 10'd42;
parameter [9:0] LEGUP_F_main_BB__25_43 = 10'd43;
parameter [9:0] LEGUP_F_main_BB__27_44 = 10'd44;
parameter [9:0] LEGUP_F_main_BB__27_45 = 10'd45;
parameter [9:0] LEGUP_F_main_BB__27_46 = 10'd46;
parameter [9:0] LEGUP_F_main_BB__35_47 = 10'd47;
parameter [9:0] LEGUP_F_main_BB__35_48 = 10'd48;
parameter [9:0] LEGUP_F_main_BB__35_49 = 10'd49;
parameter [9:0] LEGUP_F_main_BB__35_50 = 10'd50;
parameter [9:0] LEGUP_F_main_BB__35_51 = 10'd51;
parameter [9:0] LEGUP_F_main_BB__35_52 = 10'd52;
parameter [9:0] LEGUP_F_main_BB__35_53 = 10'd53;
parameter [9:0] LEGUP_F_main_BB__35_54 = 10'd54;
parameter [9:0] LEGUP_F_main_BB__35_55 = 10'd55;
parameter [9:0] LEGUP_F_main_BB__35_56 = 10'd56;
parameter [9:0] LEGUP_F_main_BB__35_57 = 10'd57;
parameter [9:0] LEGUP_F_main_BB__35_58 = 10'd58;
parameter [9:0] LEGUP_F_main_BB__35_59 = 10'd59;
parameter [9:0] LEGUP_F_main_BB__35_60 = 10'd60;
parameter [9:0] LEGUP_F_main_BB__35_61 = 10'd61;
parameter [9:0] LEGUP_F_main_BB__35_62 = 10'd62;
parameter [9:0] LEGUP_F_main_BB__35_63 = 10'd63;
parameter [9:0] LEGUP_F_main_BB__35_64 = 10'd64;
parameter [9:0] LEGUP_F_main_BB__35_65 = 10'd65;
parameter [9:0] LEGUP_F_main_BB__35_66 = 10'd66;
parameter [9:0] LEGUP_F_main_BB__35_67 = 10'd67;
parameter [9:0] LEGUP_F_main_BB__35_68 = 10'd68;
parameter [9:0] LEGUP_F_main_BB__35_69 = 10'd69;
parameter [9:0] LEGUP_F_main_BB__35_70 = 10'd70;
parameter [9:0] LEGUP_F_main_BB__35_71 = 10'd71;
parameter [9:0] LEGUP_F_main_BB__35_72 = 10'd72;
parameter [9:0] LEGUP_F_main_BB__35_73 = 10'd73;
parameter [9:0] LEGUP_F_main_BB__35_74 = 10'd74;
parameter [9:0] LEGUP_F_main_BB__35_75 = 10'd75;
parameter [9:0] LEGUP_F_main_BB__35_76 = 10'd76;
parameter [9:0] LEGUP_F_main_BB__35_77 = 10'd77;
parameter [9:0] LEGUP_F_main_BB__35_78 = 10'd78;
parameter [9:0] LEGUP_F_main_BB__35_79 = 10'd79;
parameter [9:0] LEGUP_F_main_BB__35_80 = 10'd80;
parameter [9:0] LEGUP_F_main_BB__35_81 = 10'd81;
parameter [9:0] LEGUP_F_main_BB__35_82 = 10'd82;
parameter [9:0] LEGUP_F_main_BB__35_83 = 10'd83;
parameter [9:0] LEGUP_F_main_BB__35_84 = 10'd84;
parameter [9:0] LEGUP_F_main_BB__35_85 = 10'd85;
parameter [9:0] LEGUP_F_main_BB__35_86 = 10'd86;
parameter [9:0] LEGUP_F_main_BB__35_87 = 10'd87;
parameter [9:0] LEGUP_F_main_BB__35_88 = 10'd88;
parameter [9:0] LEGUP_F_main_BB__35_89 = 10'd89;
parameter [9:0] LEGUP_F_main_BB__35_90 = 10'd90;
parameter [9:0] LEGUP_F_main_BB__35_91 = 10'd91;
parameter [9:0] LEGUP_F_main_BB__35_92 = 10'd92;
parameter [9:0] LEGUP_F_main_BB__35_93 = 10'd93;
parameter [9:0] LEGUP_F_main_BB__35_94 = 10'd94;
parameter [9:0] LEGUP_F_main_BB__35_95 = 10'd95;
parameter [9:0] LEGUP_F_main_BB__35_96 = 10'd96;
parameter [9:0] LEGUP_F_main_BB__45_97 = 10'd97;
parameter [9:0] LEGUP_F_main_BB__45_98 = 10'd98;
parameter [9:0] LEGUP_F_main_BB__45_99 = 10'd99;
parameter [9:0] LEGUP_F_main_BB__45_100 = 10'd100;
parameter [9:0] LEGUP_F_main_BB__45_101 = 10'd101;
parameter [9:0] LEGUP_F_main_BB__45_102 = 10'd102;
parameter [9:0] LEGUP_F_main_BB__45_103 = 10'd103;
parameter [9:0] LEGUP_F_main_BB__45_104 = 10'd104;
parameter [9:0] LEGUP_F_main_BB__45_105 = 10'd105;
parameter [9:0] LEGUP_F_main_BB__45_106 = 10'd106;
parameter [9:0] LEGUP_F_main_BB__45_107 = 10'd107;
parameter [9:0] LEGUP_F_main_BB__45_108 = 10'd108;
parameter [9:0] LEGUP_F_main_BB__45_109 = 10'd109;
parameter [9:0] LEGUP_F_main_BB__45_110 = 10'd110;
parameter [9:0] LEGUP_F_main_BB__45_111 = 10'd111;
parameter [9:0] LEGUP_F_main_BB__45_112 = 10'd112;
parameter [9:0] LEGUP_F_main_BB__45_113 = 10'd113;
parameter [9:0] LEGUP_F_main_BB__45_114 = 10'd114;
parameter [9:0] LEGUP_F_main_BB__45_115 = 10'd115;
parameter [9:0] LEGUP_F_main_BB__45_116 = 10'd116;
parameter [9:0] LEGUP_F_main_BB__45_117 = 10'd117;
parameter [9:0] LEGUP_F_main_BB__45_118 = 10'd118;
parameter [9:0] LEGUP_F_main_BB__45_119 = 10'd119;
parameter [9:0] LEGUP_F_main_BB__45_120 = 10'd120;
parameter [9:0] LEGUP_F_main_BB__45_121 = 10'd121;
parameter [9:0] LEGUP_F_main_BB__45_122 = 10'd122;
parameter [9:0] LEGUP_F_main_BB__45_123 = 10'd123;
parameter [9:0] LEGUP_F_main_BB__45_124 = 10'd124;
parameter [9:0] LEGUP_F_main_BB__45_125 = 10'd125;
parameter [9:0] LEGUP_F_main_BB__47_126 = 10'd126;
parameter [9:0] LEGUP_F_main_BB__47_127 = 10'd127;
parameter [9:0] LEGUP_F_main_BB__47_128 = 10'd128;
parameter [9:0] LEGUP_F_main_BB__47_129 = 10'd129;
parameter [9:0] LEGUP_F_main_BB__47_130 = 10'd130;
parameter [9:0] LEGUP_F_main_BB__47_131 = 10'd131;
parameter [9:0] LEGUP_F_main_BB__47_132 = 10'd132;
parameter [9:0] LEGUP_F_main_BB__47_133 = 10'd133;
parameter [9:0] LEGUP_F_main_BB__47_134 = 10'd134;
parameter [9:0] LEGUP_F_main_BB__47_135 = 10'd135;
parameter [9:0] LEGUP_F_main_BB__47_136 = 10'd136;
parameter [9:0] LEGUP_F_main_BB__47_137 = 10'd137;
parameter [9:0] LEGUP_F_main_BB__47_138 = 10'd138;
parameter [9:0] LEGUP_F_main_BB__47_139 = 10'd139;
parameter [9:0] LEGUP_F_main_BB__47_140 = 10'd140;
parameter [9:0] LEGUP_F_main_BB__47_141 = 10'd141;
parameter [9:0] LEGUP_F_main_BB__51_142 = 10'd142;
parameter [9:0] LEGUP_F_main_BB__51_143 = 10'd143;
parameter [9:0] LEGUP_F_main_BB__51_144 = 10'd144;
parameter [9:0] LEGUP_F_main_BB__51_145 = 10'd145;
parameter [9:0] LEGUP_F_main_BB__51_146 = 10'd146;
parameter [9:0] LEGUP_F_main_BB__51_147 = 10'd147;
parameter [9:0] LEGUP_F_main_BB__51_148 = 10'd148;
parameter [9:0] LEGUP_F_main_BB__51_149 = 10'd149;
parameter [9:0] LEGUP_F_main_BB__51_150 = 10'd150;
parameter [9:0] LEGUP_F_main_BB__51_151 = 10'd151;
parameter [9:0] LEGUP_F_main_BB__51_152 = 10'd152;
parameter [9:0] LEGUP_F_main_BB__51_153 = 10'd153;
parameter [9:0] LEGUP_F_main_BB__51_154 = 10'd154;
parameter [9:0] LEGUP_F_main_BB__51_155 = 10'd155;
parameter [9:0] LEGUP_F_main_BB__51_156 = 10'd156;
parameter [9:0] LEGUP_F_main_BB__53_157 = 10'd157;
parameter [9:0] LEGUP_F_main_BB__53_158 = 10'd158;
parameter [9:0] LEGUP_F_main_BB__53_159 = 10'd159;
parameter [9:0] LEGUP_F_main_BB__53_160 = 10'd160;
parameter [9:0] LEGUP_F_main_BB__53_161 = 10'd161;
parameter [9:0] LEGUP_F_main_BB__53_162 = 10'd162;
parameter [9:0] LEGUP_F_main_BB__53_163 = 10'd163;
parameter [9:0] LEGUP_F_main_BB__53_164 = 10'd164;
parameter [9:0] LEGUP_F_main_BB__53_165 = 10'd165;
parameter [9:0] LEGUP_F_main_BB__53_166 = 10'd166;
parameter [9:0] LEGUP_F_main_BB__53_167 = 10'd167;
parameter [9:0] LEGUP_F_main_BB__53_168 = 10'd168;
parameter [9:0] LEGUP_F_main_BB__53_169 = 10'd169;
parameter [9:0] LEGUP_F_main_BB__53_170 = 10'd170;
parameter [9:0] LEGUP_F_main_BB__53_171 = 10'd171;
parameter [9:0] LEGUP_F_main_BB__53_172 = 10'd172;
parameter [9:0] LEGUP_F_main_BB__53_173 = 10'd173;
parameter [9:0] LEGUP_F_main_BB__53_174 = 10'd174;
parameter [9:0] LEGUP_F_main_BB__53_175 = 10'd175;
parameter [9:0] LEGUP_F_main_BB__53_176 = 10'd176;
parameter [9:0] LEGUP_F_main_BB__53_177 = 10'd177;
parameter [9:0] LEGUP_F_main_BB__53_178 = 10'd178;
parameter [9:0] LEGUP_F_main_BB__53_179 = 10'd179;
parameter [9:0] LEGUP_F_main_BB__53_180 = 10'd180;
parameter [9:0] LEGUP_F_main_BB__53_181 = 10'd181;
parameter [9:0] LEGUP_F_main_BB__53_182 = 10'd182;
parameter [9:0] LEGUP_F_main_BB__53_183 = 10'd183;
parameter [9:0] LEGUP_F_main_BB__53_184 = 10'd184;
parameter [9:0] LEGUP_F_main_BB__53_185 = 10'd185;
parameter [9:0] LEGUP_F_main_BB__53_186 = 10'd186;
parameter [9:0] LEGUP_F_main_BB__53_187 = 10'd187;
parameter [9:0] LEGUP_F_main_BB__53_188 = 10'd188;
parameter [9:0] LEGUP_F_main_BB__53_189 = 10'd189;
parameter [9:0] LEGUP_F_main_BB__53_190 = 10'd190;
parameter [9:0] LEGUP_F_main_BB__53_191 = 10'd191;
parameter [9:0] LEGUP_F_main_BB__53_192 = 10'd192;
parameter [9:0] LEGUP_F_main_BB__53_193 = 10'd193;
parameter [9:0] LEGUP_F_main_BB__53_194 = 10'd194;
parameter [9:0] LEGUP_F_main_BB__53_195 = 10'd195;
parameter [9:0] LEGUP_F_main_BB__53_196 = 10'd196;
parameter [9:0] LEGUP_F_main_BB__53_197 = 10'd197;
parameter [9:0] LEGUP_F_main_BB__53_198 = 10'd198;
parameter [9:0] LEGUP_F_main_BB__53_199 = 10'd199;
parameter [9:0] LEGUP_F_main_BB__53_200 = 10'd200;
parameter [9:0] LEGUP_F_main_BB__53_201 = 10'd201;
parameter [9:0] LEGUP_F_main_BB__53_202 = 10'd202;
parameter [9:0] LEGUP_F_main_BB__53_203 = 10'd203;
parameter [9:0] LEGUP_F_main_BB__53_204 = 10'd204;
parameter [9:0] LEGUP_F_main_BB__53_205 = 10'd205;
parameter [9:0] LEGUP_F_main_BB__53_206 = 10'd206;
parameter [9:0] LEGUP_F_main_BB__53_207 = 10'd207;
parameter [9:0] LEGUP_F_main_BB__53_208 = 10'd208;
parameter [9:0] LEGUP_F_main_BB__53_209 = 10'd209;
parameter [9:0] LEGUP_F_main_BB__53_210 = 10'd210;
parameter [9:0] LEGUP_F_main_BB__53_211 = 10'd211;
parameter [9:0] LEGUP_F_main_BB__53_212 = 10'd212;
parameter [9:0] LEGUP_F_main_BB__53_213 = 10'd213;
parameter [9:0] LEGUP_F_main_BB__53_214 = 10'd214;
parameter [9:0] LEGUP_F_main_BB__53_215 = 10'd215;
parameter [9:0] LEGUP_F_main_BB__53_216 = 10'd216;
parameter [9:0] LEGUP_F_main_BB__53_217 = 10'd217;
parameter [9:0] LEGUP_F_main_BB__53_218 = 10'd218;
parameter [9:0] LEGUP_F_main_BB__53_219 = 10'd219;
parameter [9:0] LEGUP_F_main_BB__53_220 = 10'd220;
parameter [9:0] LEGUP_F_main_BB__53_221 = 10'd221;
parameter [9:0] LEGUP_F_main_BB__53_222 = 10'd222;
parameter [9:0] LEGUP_F_main_BB__53_223 = 10'd223;
parameter [9:0] LEGUP_F_main_BB__53_224 = 10'd224;
parameter [9:0] LEGUP_F_main_BB__53_225 = 10'd225;
parameter [9:0] LEGUP_F_main_BB__53_226 = 10'd226;
parameter [9:0] LEGUP_F_main_BB__53_227 = 10'd227;
parameter [9:0] LEGUP_F_main_BB__53_228 = 10'd228;
parameter [9:0] LEGUP_F_main_BB__53_229 = 10'd229;
parameter [9:0] LEGUP_F_main_BB__53_230 = 10'd230;
parameter [9:0] LEGUP_F_main_BB__53_231 = 10'd231;
parameter [9:0] LEGUP_F_main_BB__53_232 = 10'd232;
parameter [9:0] LEGUP_F_main_BB__53_233 = 10'd233;
parameter [9:0] LEGUP_F_main_BB__53_234 = 10'd234;
parameter [9:0] LEGUP_F_main_BB__53_235 = 10'd235;
parameter [9:0] LEGUP_F_main_BB__53_236 = 10'd236;
parameter [9:0] LEGUP_F_main_BB__53_237 = 10'd237;
parameter [9:0] LEGUP_F_main_BB__53_238 = 10'd238;
parameter [9:0] LEGUP_F_main_BB__53_239 = 10'd239;
parameter [9:0] LEGUP_F_main_BB__53_240 = 10'd240;
parameter [9:0] LEGUP_F_main_BB__53_241 = 10'd241;
parameter [9:0] LEGUP_F_main_BB__53_242 = 10'd242;
parameter [9:0] LEGUP_F_main_BB__53_243 = 10'd243;
parameter [9:0] LEGUP_F_main_BB__53_244 = 10'd244;
parameter [9:0] LEGUP_F_main_BB__53_245 = 10'd245;
parameter [9:0] LEGUP_F_main_BB__53_246 = 10'd246;
parameter [9:0] LEGUP_F_main_BB__53_247 = 10'd247;
parameter [9:0] LEGUP_F_main_BB__53_248 = 10'd248;
parameter [9:0] LEGUP_F_main_BB__53_249 = 10'd249;
parameter [9:0] LEGUP_F_main_BB__53_250 = 10'd250;
parameter [9:0] LEGUP_F_main_BB__53_251 = 10'd251;
parameter [9:0] LEGUP_F_main_BB__53_252 = 10'd252;
parameter [9:0] LEGUP_F_main_BB__53_253 = 10'd253;
parameter [9:0] LEGUP_F_main_BB__53_254 = 10'd254;
parameter [9:0] LEGUP_F_main_BB__53_255 = 10'd255;
parameter [9:0] LEGUP_F_main_BB__53_256 = 10'd256;
parameter [9:0] LEGUP_F_main_BB__53_257 = 10'd257;
parameter [9:0] LEGUP_F_main_BB__53_258 = 10'd258;
parameter [9:0] LEGUP_F_main_BB__53_259 = 10'd259;
parameter [9:0] LEGUP_F_main_BB__53_260 = 10'd260;
parameter [9:0] LEGUP_F_main_BB__53_261 = 10'd261;
parameter [9:0] LEGUP_F_main_BB__53_262 = 10'd262;
parameter [9:0] LEGUP_F_main_BB__53_263 = 10'd263;
parameter [9:0] LEGUP_F_main_BB__53_264 = 10'd264;
parameter [9:0] LEGUP_F_main_BB__53_265 = 10'd265;
parameter [9:0] LEGUP_F_main_BB__53_266 = 10'd266;
parameter [9:0] LEGUP_F_main_BB__53_267 = 10'd267;
parameter [9:0] LEGUP_F_main_BB__53_268 = 10'd268;
parameter [9:0] LEGUP_F_main_BB__53_269 = 10'd269;
parameter [9:0] LEGUP_F_main_BB__53_270 = 10'd270;
parameter [9:0] LEGUP_F_main_BB__53_271 = 10'd271;
parameter [9:0] LEGUP_F_main_BB__53_272 = 10'd272;
parameter [9:0] LEGUP_F_main_BB__53_273 = 10'd273;
parameter [9:0] LEGUP_F_main_BB__53_274 = 10'd274;
parameter [9:0] LEGUP_F_main_BB__53_275 = 10'd275;
parameter [9:0] LEGUP_F_main_BB__53_276 = 10'd276;
parameter [9:0] LEGUP_F_main_BB__53_277 = 10'd277;
parameter [9:0] LEGUP_F_main_BB__53_278 = 10'd278;
parameter [9:0] LEGUP_F_main_BB__53_279 = 10'd279;
parameter [9:0] LEGUP_F_main_BB__53_280 = 10'd280;
parameter [9:0] LEGUP_F_main_BB__53_281 = 10'd281;
parameter [9:0] LEGUP_F_main_BB__53_282 = 10'd282;
parameter [9:0] LEGUP_F_main_BB__53_283 = 10'd283;
parameter [9:0] LEGUP_F_main_BB__53_284 = 10'd284;
parameter [9:0] LEGUP_F_main_BB__53_285 = 10'd285;
parameter [9:0] LEGUP_F_main_BB__53_286 = 10'd286;
parameter [9:0] LEGUP_F_main_BB__53_287 = 10'd287;
parameter [9:0] LEGUP_F_main_BB__53_288 = 10'd288;
parameter [9:0] LEGUP_F_main_BB__53_289 = 10'd289;
parameter [9:0] LEGUP_F_main_BB__53_290 = 10'd290;
parameter [9:0] LEGUP_F_main_BB__53_291 = 10'd291;
parameter [9:0] LEGUP_F_main_BB__53_292 = 10'd292;
parameter [9:0] LEGUP_F_main_BB__53_293 = 10'd293;
parameter [9:0] LEGUP_F_main_BB__53_294 = 10'd294;
parameter [9:0] LEGUP_F_main_BB__53_295 = 10'd295;
parameter [9:0] LEGUP_F_main_BB__53_296 = 10'd296;
parameter [9:0] LEGUP_F_main_BB__53_297 = 10'd297;
parameter [9:0] LEGUP_F_main_BB__53_298 = 10'd298;
parameter [9:0] LEGUP_F_main_BB__53_299 = 10'd299;
parameter [9:0] LEGUP_F_main_BB__53_300 = 10'd300;
parameter [9:0] LEGUP_F_main_BB__53_301 = 10'd301;
parameter [9:0] LEGUP_F_main_BB__53_302 = 10'd302;
parameter [9:0] LEGUP_F_main_BB__53_303 = 10'd303;
parameter [9:0] LEGUP_F_main_BB__53_304 = 10'd304;
parameter [9:0] LEGUP_F_main_BB__67_305 = 10'd305;
parameter [9:0] LEGUP_F_main_BB__67_306 = 10'd306;
parameter [9:0] LEGUP_F_main_BB__67_307 = 10'd307;
parameter [9:0] LEGUP_F_main_BB__67_308 = 10'd308;
parameter [9:0] LEGUP_F_main_BB__67_309 = 10'd309;
parameter [9:0] LEGUP_F_main_BB__67_310 = 10'd310;
parameter [9:0] LEGUP_F_main_BB__67_311 = 10'd311;
parameter [9:0] LEGUP_F_main_BB__67_312 = 10'd312;
parameter [9:0] LEGUP_F_main_BB__67_313 = 10'd313;
parameter [9:0] LEGUP_F_main_BB__67_314 = 10'd314;
parameter [9:0] LEGUP_F_main_BB__67_315 = 10'd315;
parameter [9:0] LEGUP_F_main_BB__67_316 = 10'd316;
parameter [9:0] LEGUP_F_main_BB__67_317 = 10'd317;
parameter [9:0] LEGUP_F_main_BB__67_318 = 10'd318;
parameter [9:0] LEGUP_F_main_BB__67_319 = 10'd319;
parameter [9:0] LEGUP_F_main_BB__67_320 = 10'd320;
parameter [9:0] LEGUP_F_main_BB__67_321 = 10'd321;
parameter [9:0] LEGUP_F_main_BB__67_322 = 10'd322;
parameter [9:0] LEGUP_F_main_BB__67_323 = 10'd323;
parameter [9:0] LEGUP_F_main_BB__67_324 = 10'd324;
parameter [9:0] LEGUP_F_main_BB__67_325 = 10'd325;
parameter [9:0] LEGUP_F_main_BB__67_326 = 10'd326;
parameter [9:0] LEGUP_F_main_BB__67_327 = 10'd327;
parameter [9:0] LEGUP_F_main_BB__67_328 = 10'd328;
parameter [9:0] LEGUP_F_main_BB__67_329 = 10'd329;
parameter [9:0] LEGUP_F_main_BB__67_330 = 10'd330;
parameter [9:0] LEGUP_F_main_BB__67_331 = 10'd331;
parameter [9:0] LEGUP_F_main_BB__67_332 = 10'd332;
parameter [9:0] LEGUP_F_main_BB__67_333 = 10'd333;
parameter [9:0] LEGUP_F_main_BB__67_334 = 10'd334;
parameter [9:0] LEGUP_F_main_BB__67_335 = 10'd335;
parameter [9:0] LEGUP_F_main_BB__67_336 = 10'd336;
parameter [9:0] LEGUP_F_main_BB__67_337 = 10'd337;
parameter [9:0] LEGUP_F_main_BB__67_338 = 10'd338;
parameter [9:0] LEGUP_F_main_BB__67_339 = 10'd339;
parameter [9:0] LEGUP_F_main_BB__67_340 = 10'd340;
parameter [9:0] LEGUP_F_main_BB__67_341 = 10'd341;
parameter [9:0] LEGUP_F_main_BB__67_342 = 10'd342;
parameter [9:0] LEGUP_F_main_BB__67_343 = 10'd343;
parameter [9:0] LEGUP_F_main_BB__67_344 = 10'd344;
parameter [9:0] LEGUP_F_main_BB__67_345 = 10'd345;
parameter [9:0] LEGUP_F_main_BB__67_346 = 10'd346;
parameter [9:0] LEGUP_F_main_BB__67_347 = 10'd347;
parameter [9:0] LEGUP_F_main_BB__67_348 = 10'd348;
parameter [9:0] LEGUP_F_main_BB__67_349 = 10'd349;
parameter [9:0] LEGUP_F_main_BB__67_350 = 10'd350;
parameter [9:0] LEGUP_F_main_BB__67_351 = 10'd351;
parameter [9:0] LEGUP_F_main_BB__67_352 = 10'd352;
parameter [9:0] LEGUP_F_main_BB__67_353 = 10'd353;
parameter [9:0] LEGUP_F_main_BB__67_354 = 10'd354;
parameter [9:0] LEGUP_F_main_BB__67_355 = 10'd355;
parameter [9:0] LEGUP_F_main_BB__67_356 = 10'd356;
parameter [9:0] LEGUP_F_main_BB__67_357 = 10'd357;
parameter [9:0] LEGUP_F_main_BB__67_358 = 10'd358;
parameter [9:0] LEGUP_F_main_BB__67_359 = 10'd359;
parameter [9:0] LEGUP_F_main_BB__67_360 = 10'd360;
parameter [9:0] LEGUP_F_main_BB__67_361 = 10'd361;
parameter [9:0] LEGUP_F_main_BB__67_362 = 10'd362;
parameter [9:0] LEGUP_F_main_BB__67_363 = 10'd363;
parameter [9:0] LEGUP_F_main_BB__67_364 = 10'd364;
parameter [9:0] LEGUP_F_main_BB__67_365 = 10'd365;
parameter [9:0] LEGUP_F_main_BB__67_366 = 10'd366;
parameter [9:0] LEGUP_F_main_BB__67_367 = 10'd367;
parameter [9:0] LEGUP_F_main_BB__67_368 = 10'd368;
parameter [9:0] LEGUP_F_main_BB__67_369 = 10'd369;
parameter [9:0] LEGUP_F_main_BB__67_370 = 10'd370;
parameter [9:0] LEGUP_F_main_BB__67_371 = 10'd371;
parameter [9:0] LEGUP_F_main_BB__67_372 = 10'd372;
parameter [9:0] LEGUP_F_main_BB__67_373 = 10'd373;
parameter [9:0] LEGUP_F_main_BB__67_374 = 10'd374;
parameter [9:0] LEGUP_F_main_BB__67_375 = 10'd375;
parameter [9:0] LEGUP_F_main_BB__67_376 = 10'd376;
parameter [9:0] LEGUP_F_main_BB__67_377 = 10'd377;
parameter [9:0] LEGUP_F_main_BB__67_378 = 10'd378;
parameter [9:0] LEGUP_F_main_BB__67_379 = 10'd379;
parameter [9:0] LEGUP_F_main_BB__67_380 = 10'd380;
parameter [9:0] LEGUP_F_main_BB__72_381 = 10'd381;
parameter [9:0] LEGUP_F_main_BB__72_382 = 10'd382;
parameter [9:0] LEGUP_F_main_BB__72_383 = 10'd383;
parameter [9:0] LEGUP_F_main_BB__72_384 = 10'd384;
parameter [9:0] LEGUP_F_main_BB__72_385 = 10'd385;
parameter [9:0] LEGUP_F_main_BB__72_386 = 10'd386;
parameter [9:0] LEGUP_F_main_BB__72_387 = 10'd387;
parameter [9:0] LEGUP_F_main_BB__72_388 = 10'd388;
parameter [9:0] LEGUP_F_main_BB__72_389 = 10'd389;
parameter [9:0] LEGUP_F_main_BB__72_390 = 10'd390;
parameter [9:0] LEGUP_F_main_BB__72_391 = 10'd391;
parameter [9:0] LEGUP_F_main_BB__72_392 = 10'd392;
parameter [9:0] LEGUP_F_main_BB__72_393 = 10'd393;
parameter [9:0] LEGUP_F_main_BB__72_394 = 10'd394;
parameter [9:0] LEGUP_F_main_BB__72_395 = 10'd395;
parameter [9:0] LEGUP_F_main_BB__72_396 = 10'd396;
parameter [9:0] LEGUP_F_main_BB__72_397 = 10'd397;
parameter [9:0] LEGUP_F_main_BB__72_398 = 10'd398;
parameter [9:0] LEGUP_F_main_BB__72_399 = 10'd399;
parameter [9:0] LEGUP_F_main_BB__72_400 = 10'd400;
parameter [9:0] LEGUP_F_main_BB__72_401 = 10'd401;
parameter [9:0] LEGUP_F_main_BB__72_402 = 10'd402;
parameter [9:0] LEGUP_F_main_BB__72_403 = 10'd403;
parameter [9:0] LEGUP_F_main_BB__72_404 = 10'd404;
parameter [9:0] LEGUP_F_main_BB__72_405 = 10'd405;
parameter [9:0] LEGUP_F_main_BB__72_406 = 10'd406;
parameter [9:0] LEGUP_F_main_BB__72_407 = 10'd407;
parameter [9:0] LEGUP_F_main_BB__72_408 = 10'd408;
parameter [9:0] LEGUP_F_main_BB__72_409 = 10'd409;
parameter [9:0] LEGUP_F_main_BB__72_410 = 10'd410;
parameter [9:0] LEGUP_F_main_BB__72_411 = 10'd411;
parameter [9:0] LEGUP_F_main_BB__72_412 = 10'd412;
parameter [9:0] LEGUP_F_main_BB__72_413 = 10'd413;
parameter [9:0] LEGUP_F_main_BB__72_414 = 10'd414;
parameter [9:0] LEGUP_F_main_BB__72_415 = 10'd415;
parameter [9:0] LEGUP_F_main_BB__72_416 = 10'd416;
parameter [9:0] LEGUP_F_main_BB__72_417 = 10'd417;
parameter [9:0] LEGUP_F_main_BB__72_418 = 10'd418;
parameter [9:0] LEGUP_F_main_BB__72_419 = 10'd419;
parameter [9:0] LEGUP_F_main_BB__72_420 = 10'd420;
parameter [9:0] LEGUP_F_main_BB__72_421 = 10'd421;
parameter [9:0] LEGUP_F_main_BB__72_422 = 10'd422;
parameter [9:0] LEGUP_F_main_BB__72_423 = 10'd423;
parameter [9:0] LEGUP_F_main_BB__72_424 = 10'd424;
parameter [9:0] LEGUP_F_main_BB__72_425 = 10'd425;
parameter [9:0] LEGUP_F_main_BB__72_426 = 10'd426;
parameter [9:0] LEGUP_F_main_BB__72_427 = 10'd427;
parameter [9:0] LEGUP_F_main_BB__72_428 = 10'd428;
parameter [9:0] LEGUP_F_main_BB__72_429 = 10'd429;
parameter [9:0] LEGUP_F_main_BB__72_430 = 10'd430;
parameter [9:0] LEGUP_F_main_BB__72_431 = 10'd431;
parameter [9:0] LEGUP_F_main_BB__72_432 = 10'd432;
parameter [9:0] LEGUP_F_main_BB__72_433 = 10'd433;
parameter [9:0] LEGUP_F_main_BB__72_434 = 10'd434;
parameter [9:0] LEGUP_F_main_BB__72_435 = 10'd435;
parameter [9:0] LEGUP_F_main_BB__72_436 = 10'd436;
parameter [9:0] LEGUP_F_main_BB__72_437 = 10'd437;
parameter [9:0] LEGUP_F_main_BB__72_438 = 10'd438;
parameter [9:0] LEGUP_F_main_BB__72_439 = 10'd439;
parameter [9:0] LEGUP_F_main_BB__72_440 = 10'd440;
parameter [9:0] LEGUP_F_main_BB__72_441 = 10'd441;
parameter [9:0] LEGUP_F_main_BB__72_442 = 10'd442;
parameter [9:0] LEGUP_F_main_BB__72_443 = 10'd443;
parameter [9:0] LEGUP_F_main_BB__72_444 = 10'd444;
parameter [9:0] LEGUP_F_main_BB__72_445 = 10'd445;
parameter [9:0] LEGUP_F_main_BB__72_446 = 10'd446;
parameter [9:0] LEGUP_F_main_BB__72_447 = 10'd447;
parameter [9:0] LEGUP_F_main_BB__72_448 = 10'd448;
parameter [9:0] LEGUP_F_main_BB__72_449 = 10'd449;
parameter [9:0] LEGUP_F_main_BB__72_450 = 10'd450;
parameter [9:0] LEGUP_F_main_BB__72_451 = 10'd451;
parameter [9:0] LEGUP_F_main_BB__72_452 = 10'd452;
parameter [9:0] LEGUP_F_main_BB__72_453 = 10'd453;
parameter [9:0] LEGUP_F_main_BB__72_454 = 10'd454;
parameter [9:0] LEGUP_F_main_BB__72_455 = 10'd455;
parameter [9:0] LEGUP_F_main_BB__72_456 = 10'd456;
parameter [9:0] LEGUP_F_main_BB__72_457 = 10'd457;
parameter [9:0] LEGUP_F_main_BB__72_458 = 10'd458;
parameter [9:0] LEGUP_F_main_BB__72_459 = 10'd459;
parameter [9:0] LEGUP_F_main_BB__72_460 = 10'd460;
parameter [9:0] LEGUP_F_main_BB__72_461 = 10'd461;
parameter [9:0] LEGUP_F_main_BB__72_462 = 10'd462;
parameter [9:0] LEGUP_F_main_BB__72_463 = 10'd463;
parameter [9:0] LEGUP_F_main_BB__72_464 = 10'd464;
parameter [9:0] LEGUP_F_main_BB__72_465 = 10'd465;
parameter [9:0] LEGUP_F_main_BB__72_466 = 10'd466;
parameter [9:0] LEGUP_F_main_BB__72_467 = 10'd467;
parameter [9:0] LEGUP_F_main_BB__72_468 = 10'd468;
parameter [9:0] LEGUP_F_main_BB__72_469 = 10'd469;
parameter [9:0] LEGUP_F_main_BB__72_470 = 10'd470;
parameter [9:0] LEGUP_F_main_BB__81_471 = 10'd471;
parameter [9:0] LEGUP_F_main_BB__84_472 = 10'd472;
parameter [9:0] LEGUP_F_main_BB__84_473 = 10'd473;
parameter [9:0] LEGUP_F_main_BB__84_474 = 10'd474;
parameter [9:0] LEGUP_F_main_BB__84_475 = 10'd475;
parameter [9:0] LEGUP_F_main_BB__84_476 = 10'd476;
parameter [9:0] LEGUP_F_main_BB__84_477 = 10'd477;
parameter [9:0] LEGUP_F_main_BB__84_478 = 10'd478;
parameter [9:0] LEGUP_F_main_BB__84_479 = 10'd479;
parameter [9:0] LEGUP_F_main_BB__84_480 = 10'd480;
parameter [9:0] LEGUP_F_main_BB__84_481 = 10'd481;
parameter [9:0] LEGUP_F_main_BB__84_482 = 10'd482;
parameter [9:0] LEGUP_F_main_BB__84_483 = 10'd483;
parameter [9:0] LEGUP_F_main_BB_expfexit_484 = 10'd484;
parameter [9:0] LEGUP_F_main_BB_expfexit_485 = 10'd485;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1preheader_486 = 10'd486;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_487 = 10'd487;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_488 = 10'd488;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_489 = 10'd489;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_490 = 10'd490;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_491 = 10'd491;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_492 = 10'd492;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_493 = 10'd493;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_494 = 10'd494;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_495 = 10'd495;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_496 = 10'd496;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_497 = 10'd497;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_498 = 10'd498;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_499 = 10'd499;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_500 = 10'd500;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_501 = 10'd501;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_502 = 10'd502;
parameter [9:0] LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_503 = 10'd503;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0preheader_504 = 10'd504;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_505 = 10'd505;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_506 = 10'd506;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_507 = 10'd507;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_508 = 10'd508;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_509 = 10'd509;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_510 = 10'd510;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_511 = 10'd511;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_512 = 10'd512;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_513 = 10'd513;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_514 = 10'd514;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_515 = 10'd515;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_516 = 10'd516;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_517 = 10'd517;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_518 = 10'd518;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_519 = 10'd519;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_520 = 10'd520;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_521 = 10'd521;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_522 = 10'd522;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_523 = 10'd523;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_524 = 10'd524;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_525 = 10'd525;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_526 = 10'd526;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_527 = 10'd527;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_528 = 10'd528;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_529 = 10'd529;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_530 = 10'd530;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_531 = 10'd531;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_532 = 10'd532;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_533 = 10'd533;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_534 = 10'd534;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_535 = 10'd535;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_536 = 10'd536;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_537 = 10'd537;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_538 = 10'd538;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_539 = 10'd539;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_540 = 10'd540;
parameter [9:0] LEGUP_F_main_BB_fusionloop_bodydim0_541 = 10'd541;
parameter [9:0] LEGUP_F_main_BB_fusionloop_exitdim0_542 = 10'd542;
parameter [9:0] LEGUP_F_main_BB_fusionloop_exitdim0_543 = 10'd543;
parameter [9:0] LEGUP_F_main_BB_fusionloop_exitdim0_544 = 10'd544;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 55'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [9:0] cur_state;
reg [9:0] next_state;
reg [31:0] main_reduceinnerloop_bodyreduction_dim1_0;
reg [31:0] main_reduceinnerloop_bodyreduction_dim1_0_reg;
reg [63:0] main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112;
reg [63:0] main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_reduceinnerloop_bodyreduction_dim1_scevgep10;
reg [31:0] main_reduceinnerloop_bodyreduction_dim1_1;
reg [31:0] main_reduceinnerloop_bodyreduction_dim1_1_reg;
reg  main_reduceinnerloop_bodyreduction_dim1_2;
reg  main_reduceinnerloop_bodyreduction_dim1_3;
reg  main_reduceinnerloop_bodyreduction_dim1_3_reg;
reg  main_reduceinnerloop_bodyreduction_dim1_4;
reg [31:0] main_reduceinnerloop_bodyreduction_dim1_5;
reg [31:0] main_reduceinnerloop_bodyreduction_dim1_5_reg;
reg [63:0] main_reduceinnerloop_bodyreduction_dim1_6;
reg [63:0] main_reduceinnerloop_bodyreduction_dim1_6_reg;
reg  main_reduceinnerloop_bodyreduction_dim1_exitcond9;
reg  main_reduceinnerloop_bodyreduction_dim1_exitcond9_reg;
reg [31:0] main_fusion1loop_bodydim1_loii0;
reg [31:0] main_fusion1loop_bodydim1_loii0_reg;
reg [31:0] main_fusion1loop_bodydim1_hiii0;
reg [31:0] main_fusion1loop_bodydim1_hiii0_reg;
reg [63:0] main_fusion1loop_bodydim1_fusion1indvardim18;
reg [63:0] main_fusion1loop_bodydim1_fusion1indvardim18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fusion1loop_bodydim1_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fusion1loop_bodydim1_scevgep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fusion1loop_bodydim1_scevgep8;
reg [31:0] main_fusion1loop_bodydim1_7;
reg [31:0] main_fusion1loop_bodydim1_8;
reg [31:0] main_fusion1loop_bodydim1_8_reg;
reg [31:0] main_fusion1loop_bodydim1_9;
reg [31:0] main_fusion1loop_bodydim1_9_reg;
reg [31:0] main_fusion1loop_bodydim1_10;
reg [31:0] main_fusion1loop_bodydim1_10_reg;
reg [31:0] main_fusion1loop_bodydim1_11;
reg [31:0] main_fusion1loop_bodydim1_11_reg;
reg  main_fusion1loop_bodydim1_12;
reg [31:0] main_13_14;
reg  main_15_16;
reg  main_17_18;
reg [31:0] main_17_;
reg  main_19_20;
reg  main_21_22;
reg  main_21_23;
reg  main_21_orcond;
reg  main_threadpresplit_24;
reg  main_25_26;
reg [63:0] main_27_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_27_29;
reg [31:0] main_27_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_27_31;
reg [31:0] main_27_32;
reg [31:0] main_27_33;
reg [31:0] main_27_34;
reg [31:0] main_27_34_reg;
reg [31:0] main_35_36;
reg [31:0] main_35_36_reg;
reg [63:0] main_35_37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_35_38;
reg [31:0] main_35_39;
reg [31:0] main_35_39_reg;
reg [31:0] main_35_40;
reg [31:0] main_35_41;
reg [31:0] main_35_41_reg;
reg [31:0] main_35_42;
reg [31:0] main_35_42_reg;
reg [31:0] main_35_43;
reg [31:0] main_35_43_reg;
reg [31:0] main_35_44;
reg [31:0] main_35_44_reg;
reg [31:0] main_45_kii0;
reg [31:0] main_45_kii0_reg;
reg [31:0] main_45_loii1;
reg [31:0] main_45_loii1_reg;
reg [31:0] main_45_pn;
reg [31:0] main_45_pn_reg;
reg [31:0] main_45_hiii1;
reg [31:0] main_45_hiii1_reg;
reg [31:0] main_45_46;
reg [31:0] main_45_46_reg;
reg  main_47_48;
reg  main_47_48_reg;
reg [31:0] main_47_49;
reg  main_47_50;
reg  main_47_orcond52;
reg [31:0] main_51_52;
reg [31:0] main_53_kii1;
reg [31:0] main_53_kii1_reg;
reg [31:0] main_53_loii2;
reg [31:0] main_53_loii2_reg;
reg [31:0] main_53_hiii2;
reg [31:0] main_53_hiii2_reg;
reg [31:0] main_53_048;
reg [31:0] main_53_048_reg;
reg [31:0] main_53_54;
reg [31:0] main_53_54_reg;
reg [31:0] main_53_55;
reg [31:0] main_53_56;
reg [31:0] main_53_57;
reg [31:0] main_53_58;
reg [31:0] main_53_59;
reg [31:0] main_53_60;
reg [31:0] main_53_61;
reg [31:0] main_53_62;
reg [31:0] main_53_63;
reg [31:0] main_53_64;
reg [31:0] main_53_64_reg;
reg  main_53_65;
reg  main_53_65_reg;
reg [31:0] main_53_66;
reg [31:0] main_53_66_reg;
reg [31:0] main_67_68;
reg [31:0] main_67_69;
reg [31:0] main_67_70;
reg [31:0] main_67_71;
reg [31:0] main_72_73;
reg [31:0] main_72_74;
reg [31:0] main_72_75;
reg [31:0] main_72_76;
reg [31:0] main_72_77;
reg  main_72_78;
reg  main_72_78_reg;
reg [31:0] main_72_79;
reg [31:0] main_72_79_reg;
reg [31:0] main_72_80;
reg [31:0] main_72_80_reg;
reg [31:0] main_81_82;
reg [31:0] main_81_83;
reg [31:0] main_84_85;
reg [31:0] main_84_86;
reg [31:0] main_84_87;
reg [31:0] main_84_88;
reg [31:0] main_expfexit_loii3;
reg [31:0] main_expfexit_loii3_reg;
reg [31:0] main_expfexit_hiii3;
reg [31:0] main_expfexit_hiii3_reg;
reg [31:0] main_expfexit_0;
reg [31:0] main_expfexit_0_reg;
reg [63:0] main_expfexit_89;
reg [63:0] main_expfexit_89_reg;
reg  main_expfexit_exitcond6;
reg  main_expfexit_exitcond6_reg;
reg [31:0] main_reduce1innerloop_bodyreduction_dim1_90;
reg [31:0] main_reduce1innerloop_bodyreduction_dim1_90_reg;
reg [63:0] main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14;
reg [63:0] main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_reduce1innerloop_bodyreduction_dim1_scevgep3;
reg [31:0] main_reduce1innerloop_bodyreduction_dim1_91;
reg [31:0] main_reduce1innerloop_bodyreduction_dim1_92;
reg [31:0] main_reduce1innerloop_bodyreduction_dim1_92_reg;
reg [63:0] main_reduce1innerloop_bodyreduction_dim1_93;
reg [63:0] main_reduce1innerloop_bodyreduction_dim1_93_reg;
reg  main_reduce1innerloop_bodyreduction_dim1_exitcond;
reg  main_reduce1innerloop_bodyreduction_dim1_exitcond_reg;
reg [63:0] main_fusionloop_bodydim0_fusionindvardim02;
reg [63:0] main_fusionloop_bodydim0_fusionindvardim02_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fusionloop_bodydim0_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fusionloop_bodydim0_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fusionloop_bodydim0_scevgep2;
reg [31:0] main_fusionloop_bodydim0_94;
reg [31:0] main_fusionloop_bodydim0_95;
reg [63:0] main_fusionloop_bodydim0_96;
reg [63:0] main_fusionloop_bodydim0_96_reg;
reg  main_fusionloop_bodydim0_exitcond1;
reg  main_fusionloop_bodydim0_exitcond1_reg;
reg [31:0] main_fusionloop_exitdim0_leflow_retval;
reg [31:0] main_altfp_subtract_32_0_op0;
reg [31:0] main_altfp_subtract_32_0_op1;
wire [31:0] altfp_subtractor_main_fusion1loop_bodydim1_8_out;
reg  altfp_main_fusion1loop_bodydim1_8_en;
reg [31:0] main_altfp_subtract_32_0;
reg [31:0] main_altfp_multiply_32_0_op0;
reg [31:0] main_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_main_35_36_out;
reg  altfp_main_35_36_en;
reg [31:0] main_altfp_multiply_32_0;
reg [31:0] main_altfp_add_32_0_op0;
reg [31:0] main_altfp_add_32_0_op1;
wire [31:0] altfp_adder_main_35_40_out;
reg  altfp_main_35_40_en;
reg [31:0] main_altfp_add_32_0;
reg [31:0] main_altfp_fptosi_32_0_op0;
wire [31:0] altfp_fptosi32_main_35_41_out;
reg  altfp_main_35_41_en;
reg [31:0] main_altfp_fptosi_32_0;
reg [31:0] main_altfp_sitofp_32_0_op0;
wire [31:0] altfp_sitofp32_main_35_42_out;
reg  altfp_main_35_42_en;
reg [31:0] main_altfp_sitofp_32_0;
reg [31:0] main_altfp_divide_32_0_op0;
reg [31:0] main_altfp_divide_32_0_op1;
wire [31:0] altfp_divider_main_fusionloop_bodydim0_95_out;
reg  altfp_main_fusionloop_bodydim0_95_en;
reg [31:0] main_altfp_divide_32_0;
wire  altfp_compare32_1_main_reduceinnerloop_bodyreduction_dim1_3_out;
reg  altfp_main_reduceinnerloop_bodyreduction_dim1_3_en;
wire  main_reduceinnerloop_bodyreduction_dim1_3_unused;
wire  altfp_compare32_1_main_reduceinnerloop_bodyreduction_dim1_2_out;
reg  altfp_main_reduceinnerloop_bodyreduction_dim1_2_en;
wire  main_reduceinnerloop_bodyreduction_dim1_2_unused;
wire  altfp_compare32_1_main_47_50_out;
reg  altfp_main_47_50_en;
wire  main_47_50_unused;

/*   %8 = fsub float %7, %5*/
altfp_subtractor_14 altfp_subtractor_14_main_fusion1loop_bodydim1_8 (
	.result (altfp_subtractor_main_fusion1loop_bodydim1_8_out),
	.dataa (main_altfp_subtract_32_0_op0),
	.datab (main_altfp_subtract_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_fusion1loop_bodydim1_8_en)
);


/*   %36 = fmul float %8, 0x3FF7154760000000*/
altfp_multiplier_11 altfp_multiplier_11_main_35_36 (
	.result (altfp_multiplier_main_35_36_out),
	.dataa (main_altfp_multiply_32_0_op0),
	.datab (main_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_35_36_en)
);


/*   %40 = fadd float %36, %39*/
altfp_adder_14 altfp_adder_14_main_35_40 (
	.result (altfp_adder_main_35_40_out),
	.dataa (main_altfp_add_32_0_op0),
	.datab (main_altfp_add_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_35_40_en)
);


/*   %41 = fptosi float %40 to i32*/
altfp_fptosi32_6 altfp_fptosi32_6_main_35_41 (
	.result (altfp_fptosi32_main_35_41_out),
	.dataa (main_altfp_fptosi_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_35_41_en)
);


/*   %42 = sitofp i32 %41 to float*/
altfp_sitofp32_6 altfp_sitofp32_6_main_35_42 (
	.result (altfp_sitofp32_main_35_42_out),
	.dataa (main_altfp_sitofp_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_35_42_en)
);


/*   %95 = fdiv float %94, %92*/
altfp_divider_33 altfp_divider_33_main_fusionloop_bodydim0_95 (
	.result (altfp_divider_main_fusionloop_bodydim0_95_out),
	.dataa (main_altfp_divide_32_0_op0),
	.datab (main_altfp_divide_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_fusionloop_bodydim0_95_en)
);


/*   %3 = fcmp ueq float %0, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_reduceinnerloop_bodyreduction_dim1_3 (
	.dataa (main_reduceinnerloop_bodyreduction_dim1_0_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_reduceinnerloop_bodyreduction_dim1_3_en),
	.aeb (altfp_compare32_1_main_reduceinnerloop_bodyreduction_dim1_3_out),
	.aneb (main_reduceinnerloop_bodyreduction_dim1_3_unused),
	.alb (main_reduceinnerloop_bodyreduction_dim1_3_unused),
	.aleb (main_reduceinnerloop_bodyreduction_dim1_3_unused),
	.agb (main_reduceinnerloop_bodyreduction_dim1_3_unused),
	.ageb (main_reduceinnerloop_bodyreduction_dim1_3_unused),
	.unordered (main_reduceinnerloop_bodyreduction_dim1_3_unused)
);


/*   %2 = fcmp oge float %0, %1*/
altfp_compare32_1 altfp_compare32_1_main_reduceinnerloop_bodyreduction_dim1_2 (
	.dataa (main_reduceinnerloop_bodyreduction_dim1_0_reg),
	.datab (main_reduceinnerloop_bodyreduction_dim1_1),
	.clock (clk),
	.clk_en (altfp_main_reduceinnerloop_bodyreduction_dim1_2_en),
	.aeb (main_reduceinnerloop_bodyreduction_dim1_2_unused),
	.aneb (main_reduceinnerloop_bodyreduction_dim1_2_unused),
	.alb (main_reduceinnerloop_bodyreduction_dim1_2_unused),
	.aleb (main_reduceinnerloop_bodyreduction_dim1_2_unused),
	.agb (main_reduceinnerloop_bodyreduction_dim1_2_unused),
	.ageb (altfp_compare32_1_main_reduceinnerloop_bodyreduction_dim1_2_out),
	.unordered (main_reduceinnerloop_bodyreduction_dim1_2_unused)
);


/*   %50 = fcmp ogt float %49, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_47_50 (
	.dataa (main_47_49),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_47_50_en),
	.aeb (main_47_50_unused),
	.aneb (main_47_50_unused),
	.alb (main_47_50_unused),
	.aleb (main_47_50_unused),
	.agb (altfp_compare32_1_main_47_50_out),
	.ageb (main_47_50_unused),
	.unordered (main_47_50_unused)
);



always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_1;
LEGUP_F_main_BB__13_23:
		next_state = LEGUP_F_main_BB__13_24;
LEGUP_F_main_BB__13_24:
		next_state = LEGUP_F_main_BB__13_25;
LEGUP_F_main_BB__13_25:
		next_state = LEGUP_F_main_BB__13_26;
LEGUP_F_main_BB__13_26:
		next_state = LEGUP_F_main_BB__13_27;
LEGUP_F_main_BB__13_27:
		next_state = LEGUP_F_main_BB__13_28;
LEGUP_F_main_BB__13_28:
		next_state = LEGUP_F_main_BB__13_29;
LEGUP_F_main_BB__13_29:
		next_state = LEGUP_F_main_BB__13_30;
LEGUP_F_main_BB__13_30:
		next_state = LEGUP_F_main_BB__13_31;
LEGUP_F_main_BB__13_31:
		next_state = LEGUP_F_main_BB__13_32;
LEGUP_F_main_BB__13_32:
		next_state = LEGUP_F_main_BB__13_33;
LEGUP_F_main_BB__13_33:
		next_state = LEGUP_F_main_BB__13_34;
LEGUP_F_main_BB__13_34:
		next_state = LEGUP_F_main_BB__13_35;
LEGUP_F_main_BB__13_35:
		next_state = LEGUP_F_main_BB__13_36;
LEGUP_F_main_BB__13_36:
		next_state = LEGUP_F_main_BB__13_37;
LEGUP_F_main_BB__13_37:
		next_state = LEGUP_F_main_BB_expfexit_484;
LEGUP_F_main_BB__15_38:
	if ((main_15_16 == 1'd1))
		next_state = LEGUP_F_main_BB__17_39;
	else if ((main_15_16 == 1'd0))
		next_state = LEGUP_F_main_BB__19_40;
LEGUP_F_main_BB__17_39:
		next_state = LEGUP_F_main_BB_expfexit_484;
LEGUP_F_main_BB__19_40:
	if ((main_19_20 == 1'd1))
		next_state = LEGUP_F_main_BB_expfexit_484;
	else if ((main_19_20 == 1'd0))
		next_state = LEGUP_F_main_BB__21_41;
LEGUP_F_main_BB__21_41:
	if ((main_21_orcond == 1'd1))
		next_state = LEGUP_F_main_BB_expfexit_484;
	else if ((main_21_orcond == 1'd0))
		next_state = LEGUP_F_main_BB_threadpresplit_42;
LEGUP_F_main_BB__25_43:
	if ((main_25_26 == 1'd1))
		next_state = LEGUP_F_main_BB__27_44;
	else if ((main_25_26 == 1'd0))
		next_state = LEGUP_F_main_BB__35_47;
LEGUP_F_main_BB__27_44:
		next_state = LEGUP_F_main_BB__27_45;
LEGUP_F_main_BB__27_45:
		next_state = LEGUP_F_main_BB__27_46;
LEGUP_F_main_BB__27_46:
		next_state = LEGUP_F_main_BB__45_97;
LEGUP_F_main_BB__35_47:
		next_state = LEGUP_F_main_BB__35_48;
LEGUP_F_main_BB__35_48:
		next_state = LEGUP_F_main_BB__35_49;
LEGUP_F_main_BB__35_49:
		next_state = LEGUP_F_main_BB__35_50;
LEGUP_F_main_BB__35_50:
		next_state = LEGUP_F_main_BB__35_51;
LEGUP_F_main_BB__35_51:
		next_state = LEGUP_F_main_BB__35_52;
LEGUP_F_main_BB__35_52:
		next_state = LEGUP_F_main_BB__35_53;
LEGUP_F_main_BB__35_53:
		next_state = LEGUP_F_main_BB__35_54;
LEGUP_F_main_BB__35_54:
		next_state = LEGUP_F_main_BB__35_55;
LEGUP_F_main_BB__35_55:
		next_state = LEGUP_F_main_BB__35_56;
LEGUP_F_main_BB__35_56:
		next_state = LEGUP_F_main_BB__35_57;
LEGUP_F_main_BB__35_57:
		next_state = LEGUP_F_main_BB__35_58;
LEGUP_F_main_BB__35_58:
		next_state = LEGUP_F_main_BB__35_59;
LEGUP_F_main_BB__35_59:
		next_state = LEGUP_F_main_BB__35_60;
LEGUP_F_main_BB__35_60:
		next_state = LEGUP_F_main_BB__35_61;
LEGUP_F_main_BB__35_61:
		next_state = LEGUP_F_main_BB__35_62;
LEGUP_F_main_BB__35_62:
		next_state = LEGUP_F_main_BB__35_63;
LEGUP_F_main_BB__35_63:
		next_state = LEGUP_F_main_BB__35_64;
LEGUP_F_main_BB__35_64:
		next_state = LEGUP_F_main_BB__35_65;
LEGUP_F_main_BB__35_65:
		next_state = LEGUP_F_main_BB__35_66;
LEGUP_F_main_BB__35_66:
		next_state = LEGUP_F_main_BB__35_67;
LEGUP_F_main_BB__35_67:
		next_state = LEGUP_F_main_BB__35_68;
LEGUP_F_main_BB__35_68:
		next_state = LEGUP_F_main_BB__35_69;
LEGUP_F_main_BB__35_69:
		next_state = LEGUP_F_main_BB__35_70;
LEGUP_F_main_BB__35_70:
		next_state = LEGUP_F_main_BB__35_71;
LEGUP_F_main_BB__35_71:
		next_state = LEGUP_F_main_BB__35_72;
LEGUP_F_main_BB__35_72:
		next_state = LEGUP_F_main_BB__35_73;
LEGUP_F_main_BB__35_73:
		next_state = LEGUP_F_main_BB__35_74;
LEGUP_F_main_BB__35_74:
		next_state = LEGUP_F_main_BB__35_75;
LEGUP_F_main_BB__35_75:
		next_state = LEGUP_F_main_BB__35_76;
LEGUP_F_main_BB__35_76:
		next_state = LEGUP_F_main_BB__35_77;
LEGUP_F_main_BB__35_77:
		next_state = LEGUP_F_main_BB__35_78;
LEGUP_F_main_BB__35_78:
		next_state = LEGUP_F_main_BB__35_79;
LEGUP_F_main_BB__35_79:
		next_state = LEGUP_F_main_BB__35_80;
LEGUP_F_main_BB__35_80:
		next_state = LEGUP_F_main_BB__35_81;
LEGUP_F_main_BB__35_81:
		next_state = LEGUP_F_main_BB__35_82;
LEGUP_F_main_BB__35_82:
		next_state = LEGUP_F_main_BB__35_83;
LEGUP_F_main_BB__35_83:
		next_state = LEGUP_F_main_BB__35_84;
LEGUP_F_main_BB__35_84:
		next_state = LEGUP_F_main_BB__35_85;
LEGUP_F_main_BB__35_85:
		next_state = LEGUP_F_main_BB__35_86;
LEGUP_F_main_BB__35_86:
		next_state = LEGUP_F_main_BB__35_87;
LEGUP_F_main_BB__35_87:
		next_state = LEGUP_F_main_BB__35_88;
LEGUP_F_main_BB__35_88:
		next_state = LEGUP_F_main_BB__35_89;
LEGUP_F_main_BB__35_89:
		next_state = LEGUP_F_main_BB__35_90;
LEGUP_F_main_BB__35_90:
		next_state = LEGUP_F_main_BB__35_91;
LEGUP_F_main_BB__35_91:
		next_state = LEGUP_F_main_BB__35_92;
LEGUP_F_main_BB__35_92:
		next_state = LEGUP_F_main_BB__35_93;
LEGUP_F_main_BB__35_93:
		next_state = LEGUP_F_main_BB__35_94;
LEGUP_F_main_BB__35_94:
		next_state = LEGUP_F_main_BB__35_95;
LEGUP_F_main_BB__35_95:
		next_state = LEGUP_F_main_BB__35_96;
LEGUP_F_main_BB__35_96:
		next_state = LEGUP_F_main_BB__45_97;
LEGUP_F_main_BB__45_100:
		next_state = LEGUP_F_main_BB__45_101;
LEGUP_F_main_BB__45_101:
		next_state = LEGUP_F_main_BB__45_102;
LEGUP_F_main_BB__45_102:
		next_state = LEGUP_F_main_BB__45_103;
LEGUP_F_main_BB__45_103:
		next_state = LEGUP_F_main_BB__45_104;
LEGUP_F_main_BB__45_104:
		next_state = LEGUP_F_main_BB__45_105;
LEGUP_F_main_BB__45_105:
		next_state = LEGUP_F_main_BB__45_106;
LEGUP_F_main_BB__45_106:
		next_state = LEGUP_F_main_BB__45_107;
LEGUP_F_main_BB__45_107:
		next_state = LEGUP_F_main_BB__45_108;
LEGUP_F_main_BB__45_108:
		next_state = LEGUP_F_main_BB__45_109;
LEGUP_F_main_BB__45_109:
		next_state = LEGUP_F_main_BB__45_110;
LEGUP_F_main_BB__45_110:
		next_state = LEGUP_F_main_BB__45_111;
LEGUP_F_main_BB__45_111:
		next_state = LEGUP_F_main_BB__45_112;
LEGUP_F_main_BB__45_112:
		next_state = LEGUP_F_main_BB__45_113;
LEGUP_F_main_BB__45_113:
		next_state = LEGUP_F_main_BB__45_114;
LEGUP_F_main_BB__45_114:
		next_state = LEGUP_F_main_BB__45_115;
LEGUP_F_main_BB__45_115:
		next_state = LEGUP_F_main_BB__45_116;
LEGUP_F_main_BB__45_116:
		next_state = LEGUP_F_main_BB__45_117;
LEGUP_F_main_BB__45_117:
		next_state = LEGUP_F_main_BB__45_118;
LEGUP_F_main_BB__45_118:
		next_state = LEGUP_F_main_BB__45_119;
LEGUP_F_main_BB__45_119:
		next_state = LEGUP_F_main_BB__45_120;
LEGUP_F_main_BB__45_120:
		next_state = LEGUP_F_main_BB__45_121;
LEGUP_F_main_BB__45_121:
		next_state = LEGUP_F_main_BB__45_122;
LEGUP_F_main_BB__45_122:
		next_state = LEGUP_F_main_BB__45_123;
LEGUP_F_main_BB__45_123:
		next_state = LEGUP_F_main_BB__45_124;
LEGUP_F_main_BB__45_124:
		next_state = LEGUP_F_main_BB__45_125;
LEGUP_F_main_BB__45_125:
		next_state = LEGUP_F_main_BB__53_157;
LEGUP_F_main_BB__45_97:
		next_state = LEGUP_F_main_BB__45_98;
LEGUP_F_main_BB__45_98:
		next_state = LEGUP_F_main_BB__45_99;
LEGUP_F_main_BB__45_99:
		next_state = LEGUP_F_main_BB__45_100;
LEGUP_F_main_BB__47_126:
		next_state = LEGUP_F_main_BB__47_127;
LEGUP_F_main_BB__47_127:
		next_state = LEGUP_F_main_BB__47_128;
LEGUP_F_main_BB__47_128:
		next_state = LEGUP_F_main_BB__47_129;
LEGUP_F_main_BB__47_129:
		next_state = LEGUP_F_main_BB__47_130;
LEGUP_F_main_BB__47_130:
		next_state = LEGUP_F_main_BB__47_131;
LEGUP_F_main_BB__47_131:
		next_state = LEGUP_F_main_BB__47_132;
LEGUP_F_main_BB__47_132:
		next_state = LEGUP_F_main_BB__47_133;
LEGUP_F_main_BB__47_133:
		next_state = LEGUP_F_main_BB__47_134;
LEGUP_F_main_BB__47_134:
		next_state = LEGUP_F_main_BB__47_135;
LEGUP_F_main_BB__47_135:
		next_state = LEGUP_F_main_BB__47_136;
LEGUP_F_main_BB__47_136:
		next_state = LEGUP_F_main_BB__47_137;
LEGUP_F_main_BB__47_137:
		next_state = LEGUP_F_main_BB__47_138;
LEGUP_F_main_BB__47_138:
		next_state = LEGUP_F_main_BB__47_139;
LEGUP_F_main_BB__47_139:
		next_state = LEGUP_F_main_BB__47_140;
LEGUP_F_main_BB__47_140:
		next_state = LEGUP_F_main_BB__47_141;
LEGUP_F_main_BB__47_141:
	if ((main_47_orcond52 == 1'd1))
		next_state = LEGUP_F_main_BB__51_142;
	else if ((main_47_orcond52 == 1'd0))
		next_state = LEGUP_F_main_BB__53_157;
LEGUP_F_main_BB__51_142:
		next_state = LEGUP_F_main_BB__51_143;
LEGUP_F_main_BB__51_143:
		next_state = LEGUP_F_main_BB__51_144;
LEGUP_F_main_BB__51_144:
		next_state = LEGUP_F_main_BB__51_145;
LEGUP_F_main_BB__51_145:
		next_state = LEGUP_F_main_BB__51_146;
LEGUP_F_main_BB__51_146:
		next_state = LEGUP_F_main_BB__51_147;
LEGUP_F_main_BB__51_147:
		next_state = LEGUP_F_main_BB__51_148;
LEGUP_F_main_BB__51_148:
		next_state = LEGUP_F_main_BB__51_149;
LEGUP_F_main_BB__51_149:
		next_state = LEGUP_F_main_BB__51_150;
LEGUP_F_main_BB__51_150:
		next_state = LEGUP_F_main_BB__51_151;
LEGUP_F_main_BB__51_151:
		next_state = LEGUP_F_main_BB__51_152;
LEGUP_F_main_BB__51_152:
		next_state = LEGUP_F_main_BB__51_153;
LEGUP_F_main_BB__51_153:
		next_state = LEGUP_F_main_BB__51_154;
LEGUP_F_main_BB__51_154:
		next_state = LEGUP_F_main_BB__51_155;
LEGUP_F_main_BB__51_155:
		next_state = LEGUP_F_main_BB__51_156;
LEGUP_F_main_BB__51_156:
		next_state = LEGUP_F_main_BB_expfexit_484;
LEGUP_F_main_BB__53_157:
		next_state = LEGUP_F_main_BB__53_158;
LEGUP_F_main_BB__53_158:
		next_state = LEGUP_F_main_BB__53_159;
LEGUP_F_main_BB__53_159:
		next_state = LEGUP_F_main_BB__53_160;
LEGUP_F_main_BB__53_160:
		next_state = LEGUP_F_main_BB__53_161;
LEGUP_F_main_BB__53_161:
		next_state = LEGUP_F_main_BB__53_162;
LEGUP_F_main_BB__53_162:
		next_state = LEGUP_F_main_BB__53_163;
LEGUP_F_main_BB__53_163:
		next_state = LEGUP_F_main_BB__53_164;
LEGUP_F_main_BB__53_164:
		next_state = LEGUP_F_main_BB__53_165;
LEGUP_F_main_BB__53_165:
		next_state = LEGUP_F_main_BB__53_166;
LEGUP_F_main_BB__53_166:
		next_state = LEGUP_F_main_BB__53_167;
LEGUP_F_main_BB__53_167:
		next_state = LEGUP_F_main_BB__53_168;
LEGUP_F_main_BB__53_168:
		next_state = LEGUP_F_main_BB__53_169;
LEGUP_F_main_BB__53_169:
		next_state = LEGUP_F_main_BB__53_170;
LEGUP_F_main_BB__53_170:
		next_state = LEGUP_F_main_BB__53_171;
LEGUP_F_main_BB__53_171:
		next_state = LEGUP_F_main_BB__53_172;
LEGUP_F_main_BB__53_172:
		next_state = LEGUP_F_main_BB__53_173;
LEGUP_F_main_BB__53_173:
		next_state = LEGUP_F_main_BB__53_174;
LEGUP_F_main_BB__53_174:
		next_state = LEGUP_F_main_BB__53_175;
LEGUP_F_main_BB__53_175:
		next_state = LEGUP_F_main_BB__53_176;
LEGUP_F_main_BB__53_176:
		next_state = LEGUP_F_main_BB__53_177;
LEGUP_F_main_BB__53_177:
		next_state = LEGUP_F_main_BB__53_178;
LEGUP_F_main_BB__53_178:
		next_state = LEGUP_F_main_BB__53_179;
LEGUP_F_main_BB__53_179:
		next_state = LEGUP_F_main_BB__53_180;
LEGUP_F_main_BB__53_180:
		next_state = LEGUP_F_main_BB__53_181;
LEGUP_F_main_BB__53_181:
		next_state = LEGUP_F_main_BB__53_182;
LEGUP_F_main_BB__53_182:
		next_state = LEGUP_F_main_BB__53_183;
LEGUP_F_main_BB__53_183:
		next_state = LEGUP_F_main_BB__53_184;
LEGUP_F_main_BB__53_184:
		next_state = LEGUP_F_main_BB__53_185;
LEGUP_F_main_BB__53_185:
		next_state = LEGUP_F_main_BB__53_186;
LEGUP_F_main_BB__53_186:
		next_state = LEGUP_F_main_BB__53_187;
LEGUP_F_main_BB__53_187:
		next_state = LEGUP_F_main_BB__53_188;
LEGUP_F_main_BB__53_188:
		next_state = LEGUP_F_main_BB__53_189;
LEGUP_F_main_BB__53_189:
		next_state = LEGUP_F_main_BB__53_190;
LEGUP_F_main_BB__53_190:
		next_state = LEGUP_F_main_BB__53_191;
LEGUP_F_main_BB__53_191:
		next_state = LEGUP_F_main_BB__53_192;
LEGUP_F_main_BB__53_192:
		next_state = LEGUP_F_main_BB__53_193;
LEGUP_F_main_BB__53_193:
		next_state = LEGUP_F_main_BB__53_194;
LEGUP_F_main_BB__53_194:
		next_state = LEGUP_F_main_BB__53_195;
LEGUP_F_main_BB__53_195:
		next_state = LEGUP_F_main_BB__53_196;
LEGUP_F_main_BB__53_196:
		next_state = LEGUP_F_main_BB__53_197;
LEGUP_F_main_BB__53_197:
		next_state = LEGUP_F_main_BB__53_198;
LEGUP_F_main_BB__53_198:
		next_state = LEGUP_F_main_BB__53_199;
LEGUP_F_main_BB__53_199:
		next_state = LEGUP_F_main_BB__53_200;
LEGUP_F_main_BB__53_200:
		next_state = LEGUP_F_main_BB__53_201;
LEGUP_F_main_BB__53_201:
		next_state = LEGUP_F_main_BB__53_202;
LEGUP_F_main_BB__53_202:
		next_state = LEGUP_F_main_BB__53_203;
LEGUP_F_main_BB__53_203:
		next_state = LEGUP_F_main_BB__53_204;
LEGUP_F_main_BB__53_204:
		next_state = LEGUP_F_main_BB__53_205;
LEGUP_F_main_BB__53_205:
		next_state = LEGUP_F_main_BB__53_206;
LEGUP_F_main_BB__53_206:
		next_state = LEGUP_F_main_BB__53_207;
LEGUP_F_main_BB__53_207:
		next_state = LEGUP_F_main_BB__53_208;
LEGUP_F_main_BB__53_208:
		next_state = LEGUP_F_main_BB__53_209;
LEGUP_F_main_BB__53_209:
		next_state = LEGUP_F_main_BB__53_210;
LEGUP_F_main_BB__53_210:
		next_state = LEGUP_F_main_BB__53_211;
LEGUP_F_main_BB__53_211:
		next_state = LEGUP_F_main_BB__53_212;
LEGUP_F_main_BB__53_212:
		next_state = LEGUP_F_main_BB__53_213;
LEGUP_F_main_BB__53_213:
		next_state = LEGUP_F_main_BB__53_214;
LEGUP_F_main_BB__53_214:
		next_state = LEGUP_F_main_BB__53_215;
LEGUP_F_main_BB__53_215:
		next_state = LEGUP_F_main_BB__53_216;
LEGUP_F_main_BB__53_216:
		next_state = LEGUP_F_main_BB__53_217;
LEGUP_F_main_BB__53_217:
		next_state = LEGUP_F_main_BB__53_218;
LEGUP_F_main_BB__53_218:
		next_state = LEGUP_F_main_BB__53_219;
LEGUP_F_main_BB__53_219:
		next_state = LEGUP_F_main_BB__53_220;
LEGUP_F_main_BB__53_220:
		next_state = LEGUP_F_main_BB__53_221;
LEGUP_F_main_BB__53_221:
		next_state = LEGUP_F_main_BB__53_222;
LEGUP_F_main_BB__53_222:
		next_state = LEGUP_F_main_BB__53_223;
LEGUP_F_main_BB__53_223:
		next_state = LEGUP_F_main_BB__53_224;
LEGUP_F_main_BB__53_224:
		next_state = LEGUP_F_main_BB__53_225;
LEGUP_F_main_BB__53_225:
		next_state = LEGUP_F_main_BB__53_226;
LEGUP_F_main_BB__53_226:
		next_state = LEGUP_F_main_BB__53_227;
LEGUP_F_main_BB__53_227:
		next_state = LEGUP_F_main_BB__53_228;
LEGUP_F_main_BB__53_228:
		next_state = LEGUP_F_main_BB__53_229;
LEGUP_F_main_BB__53_229:
		next_state = LEGUP_F_main_BB__53_230;
LEGUP_F_main_BB__53_230:
		next_state = LEGUP_F_main_BB__53_231;
LEGUP_F_main_BB__53_231:
		next_state = LEGUP_F_main_BB__53_232;
LEGUP_F_main_BB__53_232:
		next_state = LEGUP_F_main_BB__53_233;
LEGUP_F_main_BB__53_233:
		next_state = LEGUP_F_main_BB__53_234;
LEGUP_F_main_BB__53_234:
		next_state = LEGUP_F_main_BB__53_235;
LEGUP_F_main_BB__53_235:
		next_state = LEGUP_F_main_BB__53_236;
LEGUP_F_main_BB__53_236:
		next_state = LEGUP_F_main_BB__53_237;
LEGUP_F_main_BB__53_237:
		next_state = LEGUP_F_main_BB__53_238;
LEGUP_F_main_BB__53_238:
		next_state = LEGUP_F_main_BB__53_239;
LEGUP_F_main_BB__53_239:
		next_state = LEGUP_F_main_BB__53_240;
LEGUP_F_main_BB__53_240:
		next_state = LEGUP_F_main_BB__53_241;
LEGUP_F_main_BB__53_241:
		next_state = LEGUP_F_main_BB__53_242;
LEGUP_F_main_BB__53_242:
		next_state = LEGUP_F_main_BB__53_243;
LEGUP_F_main_BB__53_243:
		next_state = LEGUP_F_main_BB__53_244;
LEGUP_F_main_BB__53_244:
		next_state = LEGUP_F_main_BB__53_245;
LEGUP_F_main_BB__53_245:
		next_state = LEGUP_F_main_BB__53_246;
LEGUP_F_main_BB__53_246:
		next_state = LEGUP_F_main_BB__53_247;
LEGUP_F_main_BB__53_247:
		next_state = LEGUP_F_main_BB__53_248;
LEGUP_F_main_BB__53_248:
		next_state = LEGUP_F_main_BB__53_249;
LEGUP_F_main_BB__53_249:
		next_state = LEGUP_F_main_BB__53_250;
LEGUP_F_main_BB__53_250:
		next_state = LEGUP_F_main_BB__53_251;
LEGUP_F_main_BB__53_251:
		next_state = LEGUP_F_main_BB__53_252;
LEGUP_F_main_BB__53_252:
		next_state = LEGUP_F_main_BB__53_253;
LEGUP_F_main_BB__53_253:
		next_state = LEGUP_F_main_BB__53_254;
LEGUP_F_main_BB__53_254:
		next_state = LEGUP_F_main_BB__53_255;
LEGUP_F_main_BB__53_255:
		next_state = LEGUP_F_main_BB__53_256;
LEGUP_F_main_BB__53_256:
		next_state = LEGUP_F_main_BB__53_257;
LEGUP_F_main_BB__53_257:
		next_state = LEGUP_F_main_BB__53_258;
LEGUP_F_main_BB__53_258:
		next_state = LEGUP_F_main_BB__53_259;
LEGUP_F_main_BB__53_259:
		next_state = LEGUP_F_main_BB__53_260;
LEGUP_F_main_BB__53_260:
		next_state = LEGUP_F_main_BB__53_261;
LEGUP_F_main_BB__53_261:
		next_state = LEGUP_F_main_BB__53_262;
LEGUP_F_main_BB__53_262:
		next_state = LEGUP_F_main_BB__53_263;
LEGUP_F_main_BB__53_263:
		next_state = LEGUP_F_main_BB__53_264;
LEGUP_F_main_BB__53_264:
		next_state = LEGUP_F_main_BB__53_265;
LEGUP_F_main_BB__53_265:
		next_state = LEGUP_F_main_BB__53_266;
LEGUP_F_main_BB__53_266:
		next_state = LEGUP_F_main_BB__53_267;
LEGUP_F_main_BB__53_267:
		next_state = LEGUP_F_main_BB__53_268;
LEGUP_F_main_BB__53_268:
		next_state = LEGUP_F_main_BB__53_269;
LEGUP_F_main_BB__53_269:
		next_state = LEGUP_F_main_BB__53_270;
LEGUP_F_main_BB__53_270:
		next_state = LEGUP_F_main_BB__53_271;
LEGUP_F_main_BB__53_271:
		next_state = LEGUP_F_main_BB__53_272;
LEGUP_F_main_BB__53_272:
		next_state = LEGUP_F_main_BB__53_273;
LEGUP_F_main_BB__53_273:
		next_state = LEGUP_F_main_BB__53_274;
LEGUP_F_main_BB__53_274:
		next_state = LEGUP_F_main_BB__53_275;
LEGUP_F_main_BB__53_275:
		next_state = LEGUP_F_main_BB__53_276;
LEGUP_F_main_BB__53_276:
		next_state = LEGUP_F_main_BB__53_277;
LEGUP_F_main_BB__53_277:
		next_state = LEGUP_F_main_BB__53_278;
LEGUP_F_main_BB__53_278:
		next_state = LEGUP_F_main_BB__53_279;
LEGUP_F_main_BB__53_279:
		next_state = LEGUP_F_main_BB__53_280;
LEGUP_F_main_BB__53_280:
		next_state = LEGUP_F_main_BB__53_281;
LEGUP_F_main_BB__53_281:
		next_state = LEGUP_F_main_BB__53_282;
LEGUP_F_main_BB__53_282:
		next_state = LEGUP_F_main_BB__53_283;
LEGUP_F_main_BB__53_283:
		next_state = LEGUP_F_main_BB__53_284;
LEGUP_F_main_BB__53_284:
		next_state = LEGUP_F_main_BB__53_285;
LEGUP_F_main_BB__53_285:
		next_state = LEGUP_F_main_BB__53_286;
LEGUP_F_main_BB__53_286:
		next_state = LEGUP_F_main_BB__53_287;
LEGUP_F_main_BB__53_287:
		next_state = LEGUP_F_main_BB__53_288;
LEGUP_F_main_BB__53_288:
		next_state = LEGUP_F_main_BB__53_289;
LEGUP_F_main_BB__53_289:
		next_state = LEGUP_F_main_BB__53_290;
LEGUP_F_main_BB__53_290:
		next_state = LEGUP_F_main_BB__53_291;
LEGUP_F_main_BB__53_291:
		next_state = LEGUP_F_main_BB__53_292;
LEGUP_F_main_BB__53_292:
		next_state = LEGUP_F_main_BB__53_293;
LEGUP_F_main_BB__53_293:
		next_state = LEGUP_F_main_BB__53_294;
LEGUP_F_main_BB__53_294:
		next_state = LEGUP_F_main_BB__53_295;
LEGUP_F_main_BB__53_295:
		next_state = LEGUP_F_main_BB__53_296;
LEGUP_F_main_BB__53_296:
		next_state = LEGUP_F_main_BB__53_297;
LEGUP_F_main_BB__53_297:
		next_state = LEGUP_F_main_BB__53_298;
LEGUP_F_main_BB__53_298:
		next_state = LEGUP_F_main_BB__53_299;
LEGUP_F_main_BB__53_299:
		next_state = LEGUP_F_main_BB__53_300;
LEGUP_F_main_BB__53_300:
		next_state = LEGUP_F_main_BB__53_301;
LEGUP_F_main_BB__53_301:
		next_state = LEGUP_F_main_BB__53_302;
LEGUP_F_main_BB__53_302:
		next_state = LEGUP_F_main_BB__53_303;
LEGUP_F_main_BB__53_303:
		next_state = LEGUP_F_main_BB__53_304;
LEGUP_F_main_BB__53_304:
	if ((main_53_65_reg == 1'd1))
		next_state = LEGUP_F_main_BB__67_305;
	else if ((main_53_65_reg == 1'd0))
		next_state = LEGUP_F_main_BB__72_381;
LEGUP_F_main_BB__67_305:
		next_state = LEGUP_F_main_BB__67_306;
LEGUP_F_main_BB__67_306:
		next_state = LEGUP_F_main_BB__67_307;
LEGUP_F_main_BB__67_307:
		next_state = LEGUP_F_main_BB__67_308;
LEGUP_F_main_BB__67_308:
		next_state = LEGUP_F_main_BB__67_309;
LEGUP_F_main_BB__67_309:
		next_state = LEGUP_F_main_BB__67_310;
LEGUP_F_main_BB__67_310:
		next_state = LEGUP_F_main_BB__67_311;
LEGUP_F_main_BB__67_311:
		next_state = LEGUP_F_main_BB__67_312;
LEGUP_F_main_BB__67_312:
		next_state = LEGUP_F_main_BB__67_313;
LEGUP_F_main_BB__67_313:
		next_state = LEGUP_F_main_BB__67_314;
LEGUP_F_main_BB__67_314:
		next_state = LEGUP_F_main_BB__67_315;
LEGUP_F_main_BB__67_315:
		next_state = LEGUP_F_main_BB__67_316;
LEGUP_F_main_BB__67_316:
		next_state = LEGUP_F_main_BB__67_317;
LEGUP_F_main_BB__67_317:
		next_state = LEGUP_F_main_BB__67_318;
LEGUP_F_main_BB__67_318:
		next_state = LEGUP_F_main_BB__67_319;
LEGUP_F_main_BB__67_319:
		next_state = LEGUP_F_main_BB__67_320;
LEGUP_F_main_BB__67_320:
		next_state = LEGUP_F_main_BB__67_321;
LEGUP_F_main_BB__67_321:
		next_state = LEGUP_F_main_BB__67_322;
LEGUP_F_main_BB__67_322:
		next_state = LEGUP_F_main_BB__67_323;
LEGUP_F_main_BB__67_323:
		next_state = LEGUP_F_main_BB__67_324;
LEGUP_F_main_BB__67_324:
		next_state = LEGUP_F_main_BB__67_325;
LEGUP_F_main_BB__67_325:
		next_state = LEGUP_F_main_BB__67_326;
LEGUP_F_main_BB__67_326:
		next_state = LEGUP_F_main_BB__67_327;
LEGUP_F_main_BB__67_327:
		next_state = LEGUP_F_main_BB__67_328;
LEGUP_F_main_BB__67_328:
		next_state = LEGUP_F_main_BB__67_329;
LEGUP_F_main_BB__67_329:
		next_state = LEGUP_F_main_BB__67_330;
LEGUP_F_main_BB__67_330:
		next_state = LEGUP_F_main_BB__67_331;
LEGUP_F_main_BB__67_331:
		next_state = LEGUP_F_main_BB__67_332;
LEGUP_F_main_BB__67_332:
		next_state = LEGUP_F_main_BB__67_333;
LEGUP_F_main_BB__67_333:
		next_state = LEGUP_F_main_BB__67_334;
LEGUP_F_main_BB__67_334:
		next_state = LEGUP_F_main_BB__67_335;
LEGUP_F_main_BB__67_335:
		next_state = LEGUP_F_main_BB__67_336;
LEGUP_F_main_BB__67_336:
		next_state = LEGUP_F_main_BB__67_337;
LEGUP_F_main_BB__67_337:
		next_state = LEGUP_F_main_BB__67_338;
LEGUP_F_main_BB__67_338:
		next_state = LEGUP_F_main_BB__67_339;
LEGUP_F_main_BB__67_339:
		next_state = LEGUP_F_main_BB__67_340;
LEGUP_F_main_BB__67_340:
		next_state = LEGUP_F_main_BB__67_341;
LEGUP_F_main_BB__67_341:
		next_state = LEGUP_F_main_BB__67_342;
LEGUP_F_main_BB__67_342:
		next_state = LEGUP_F_main_BB__67_343;
LEGUP_F_main_BB__67_343:
		next_state = LEGUP_F_main_BB__67_344;
LEGUP_F_main_BB__67_344:
		next_state = LEGUP_F_main_BB__67_345;
LEGUP_F_main_BB__67_345:
		next_state = LEGUP_F_main_BB__67_346;
LEGUP_F_main_BB__67_346:
		next_state = LEGUP_F_main_BB__67_347;
LEGUP_F_main_BB__67_347:
		next_state = LEGUP_F_main_BB__67_348;
LEGUP_F_main_BB__67_348:
		next_state = LEGUP_F_main_BB__67_349;
LEGUP_F_main_BB__67_349:
		next_state = LEGUP_F_main_BB__67_350;
LEGUP_F_main_BB__67_350:
		next_state = LEGUP_F_main_BB__67_351;
LEGUP_F_main_BB__67_351:
		next_state = LEGUP_F_main_BB__67_352;
LEGUP_F_main_BB__67_352:
		next_state = LEGUP_F_main_BB__67_353;
LEGUP_F_main_BB__67_353:
		next_state = LEGUP_F_main_BB__67_354;
LEGUP_F_main_BB__67_354:
		next_state = LEGUP_F_main_BB__67_355;
LEGUP_F_main_BB__67_355:
		next_state = LEGUP_F_main_BB__67_356;
LEGUP_F_main_BB__67_356:
		next_state = LEGUP_F_main_BB__67_357;
LEGUP_F_main_BB__67_357:
		next_state = LEGUP_F_main_BB__67_358;
LEGUP_F_main_BB__67_358:
		next_state = LEGUP_F_main_BB__67_359;
LEGUP_F_main_BB__67_359:
		next_state = LEGUP_F_main_BB__67_360;
LEGUP_F_main_BB__67_360:
		next_state = LEGUP_F_main_BB__67_361;
LEGUP_F_main_BB__67_361:
		next_state = LEGUP_F_main_BB__67_362;
LEGUP_F_main_BB__67_362:
		next_state = LEGUP_F_main_BB__67_363;
LEGUP_F_main_BB__67_363:
		next_state = LEGUP_F_main_BB__67_364;
LEGUP_F_main_BB__67_364:
		next_state = LEGUP_F_main_BB__67_365;
LEGUP_F_main_BB__67_365:
		next_state = LEGUP_F_main_BB__67_366;
LEGUP_F_main_BB__67_366:
		next_state = LEGUP_F_main_BB__67_367;
LEGUP_F_main_BB__67_367:
		next_state = LEGUP_F_main_BB__67_368;
LEGUP_F_main_BB__67_368:
		next_state = LEGUP_F_main_BB__67_369;
LEGUP_F_main_BB__67_369:
		next_state = LEGUP_F_main_BB__67_370;
LEGUP_F_main_BB__67_370:
		next_state = LEGUP_F_main_BB__67_371;
LEGUP_F_main_BB__67_371:
		next_state = LEGUP_F_main_BB__67_372;
LEGUP_F_main_BB__67_372:
		next_state = LEGUP_F_main_BB__67_373;
LEGUP_F_main_BB__67_373:
		next_state = LEGUP_F_main_BB__67_374;
LEGUP_F_main_BB__67_374:
		next_state = LEGUP_F_main_BB__67_375;
LEGUP_F_main_BB__67_375:
		next_state = LEGUP_F_main_BB__67_376;
LEGUP_F_main_BB__67_376:
		next_state = LEGUP_F_main_BB__67_377;
LEGUP_F_main_BB__67_377:
		next_state = LEGUP_F_main_BB__67_378;
LEGUP_F_main_BB__67_378:
		next_state = LEGUP_F_main_BB__67_379;
LEGUP_F_main_BB__67_379:
		next_state = LEGUP_F_main_BB__67_380;
LEGUP_F_main_BB__67_380:
		next_state = LEGUP_F_main_BB_expfexit_484;
LEGUP_F_main_BB__72_381:
		next_state = LEGUP_F_main_BB__72_382;
LEGUP_F_main_BB__72_382:
		next_state = LEGUP_F_main_BB__72_383;
LEGUP_F_main_BB__72_383:
		next_state = LEGUP_F_main_BB__72_384;
LEGUP_F_main_BB__72_384:
		next_state = LEGUP_F_main_BB__72_385;
LEGUP_F_main_BB__72_385:
		next_state = LEGUP_F_main_BB__72_386;
LEGUP_F_main_BB__72_386:
		next_state = LEGUP_F_main_BB__72_387;
LEGUP_F_main_BB__72_387:
		next_state = LEGUP_F_main_BB__72_388;
LEGUP_F_main_BB__72_388:
		next_state = LEGUP_F_main_BB__72_389;
LEGUP_F_main_BB__72_389:
		next_state = LEGUP_F_main_BB__72_390;
LEGUP_F_main_BB__72_390:
		next_state = LEGUP_F_main_BB__72_391;
LEGUP_F_main_BB__72_391:
		next_state = LEGUP_F_main_BB__72_392;
LEGUP_F_main_BB__72_392:
		next_state = LEGUP_F_main_BB__72_393;
LEGUP_F_main_BB__72_393:
		next_state = LEGUP_F_main_BB__72_394;
LEGUP_F_main_BB__72_394:
		next_state = LEGUP_F_main_BB__72_395;
LEGUP_F_main_BB__72_395:
		next_state = LEGUP_F_main_BB__72_396;
LEGUP_F_main_BB__72_396:
		next_state = LEGUP_F_main_BB__72_397;
LEGUP_F_main_BB__72_397:
		next_state = LEGUP_F_main_BB__72_398;
LEGUP_F_main_BB__72_398:
		next_state = LEGUP_F_main_BB__72_399;
LEGUP_F_main_BB__72_399:
		next_state = LEGUP_F_main_BB__72_400;
LEGUP_F_main_BB__72_400:
		next_state = LEGUP_F_main_BB__72_401;
LEGUP_F_main_BB__72_401:
		next_state = LEGUP_F_main_BB__72_402;
LEGUP_F_main_BB__72_402:
		next_state = LEGUP_F_main_BB__72_403;
LEGUP_F_main_BB__72_403:
		next_state = LEGUP_F_main_BB__72_404;
LEGUP_F_main_BB__72_404:
		next_state = LEGUP_F_main_BB__72_405;
LEGUP_F_main_BB__72_405:
		next_state = LEGUP_F_main_BB__72_406;
LEGUP_F_main_BB__72_406:
		next_state = LEGUP_F_main_BB__72_407;
LEGUP_F_main_BB__72_407:
		next_state = LEGUP_F_main_BB__72_408;
LEGUP_F_main_BB__72_408:
		next_state = LEGUP_F_main_BB__72_409;
LEGUP_F_main_BB__72_409:
		next_state = LEGUP_F_main_BB__72_410;
LEGUP_F_main_BB__72_410:
		next_state = LEGUP_F_main_BB__72_411;
LEGUP_F_main_BB__72_411:
		next_state = LEGUP_F_main_BB__72_412;
LEGUP_F_main_BB__72_412:
		next_state = LEGUP_F_main_BB__72_413;
LEGUP_F_main_BB__72_413:
		next_state = LEGUP_F_main_BB__72_414;
LEGUP_F_main_BB__72_414:
		next_state = LEGUP_F_main_BB__72_415;
LEGUP_F_main_BB__72_415:
		next_state = LEGUP_F_main_BB__72_416;
LEGUP_F_main_BB__72_416:
		next_state = LEGUP_F_main_BB__72_417;
LEGUP_F_main_BB__72_417:
		next_state = LEGUP_F_main_BB__72_418;
LEGUP_F_main_BB__72_418:
		next_state = LEGUP_F_main_BB__72_419;
LEGUP_F_main_BB__72_419:
		next_state = LEGUP_F_main_BB__72_420;
LEGUP_F_main_BB__72_420:
		next_state = LEGUP_F_main_BB__72_421;
LEGUP_F_main_BB__72_421:
		next_state = LEGUP_F_main_BB__72_422;
LEGUP_F_main_BB__72_422:
		next_state = LEGUP_F_main_BB__72_423;
LEGUP_F_main_BB__72_423:
		next_state = LEGUP_F_main_BB__72_424;
LEGUP_F_main_BB__72_424:
		next_state = LEGUP_F_main_BB__72_425;
LEGUP_F_main_BB__72_425:
		next_state = LEGUP_F_main_BB__72_426;
LEGUP_F_main_BB__72_426:
		next_state = LEGUP_F_main_BB__72_427;
LEGUP_F_main_BB__72_427:
		next_state = LEGUP_F_main_BB__72_428;
LEGUP_F_main_BB__72_428:
		next_state = LEGUP_F_main_BB__72_429;
LEGUP_F_main_BB__72_429:
		next_state = LEGUP_F_main_BB__72_430;
LEGUP_F_main_BB__72_430:
		next_state = LEGUP_F_main_BB__72_431;
LEGUP_F_main_BB__72_431:
		next_state = LEGUP_F_main_BB__72_432;
LEGUP_F_main_BB__72_432:
		next_state = LEGUP_F_main_BB__72_433;
LEGUP_F_main_BB__72_433:
		next_state = LEGUP_F_main_BB__72_434;
LEGUP_F_main_BB__72_434:
		next_state = LEGUP_F_main_BB__72_435;
LEGUP_F_main_BB__72_435:
		next_state = LEGUP_F_main_BB__72_436;
LEGUP_F_main_BB__72_436:
		next_state = LEGUP_F_main_BB__72_437;
LEGUP_F_main_BB__72_437:
		next_state = LEGUP_F_main_BB__72_438;
LEGUP_F_main_BB__72_438:
		next_state = LEGUP_F_main_BB__72_439;
LEGUP_F_main_BB__72_439:
		next_state = LEGUP_F_main_BB__72_440;
LEGUP_F_main_BB__72_440:
		next_state = LEGUP_F_main_BB__72_441;
LEGUP_F_main_BB__72_441:
		next_state = LEGUP_F_main_BB__72_442;
LEGUP_F_main_BB__72_442:
		next_state = LEGUP_F_main_BB__72_443;
LEGUP_F_main_BB__72_443:
		next_state = LEGUP_F_main_BB__72_444;
LEGUP_F_main_BB__72_444:
		next_state = LEGUP_F_main_BB__72_445;
LEGUP_F_main_BB__72_445:
		next_state = LEGUP_F_main_BB__72_446;
LEGUP_F_main_BB__72_446:
		next_state = LEGUP_F_main_BB__72_447;
LEGUP_F_main_BB__72_447:
		next_state = LEGUP_F_main_BB__72_448;
LEGUP_F_main_BB__72_448:
		next_state = LEGUP_F_main_BB__72_449;
LEGUP_F_main_BB__72_449:
		next_state = LEGUP_F_main_BB__72_450;
LEGUP_F_main_BB__72_450:
		next_state = LEGUP_F_main_BB__72_451;
LEGUP_F_main_BB__72_451:
		next_state = LEGUP_F_main_BB__72_452;
LEGUP_F_main_BB__72_452:
		next_state = LEGUP_F_main_BB__72_453;
LEGUP_F_main_BB__72_453:
		next_state = LEGUP_F_main_BB__72_454;
LEGUP_F_main_BB__72_454:
		next_state = LEGUP_F_main_BB__72_455;
LEGUP_F_main_BB__72_455:
		next_state = LEGUP_F_main_BB__72_456;
LEGUP_F_main_BB__72_456:
		next_state = LEGUP_F_main_BB__72_457;
LEGUP_F_main_BB__72_457:
		next_state = LEGUP_F_main_BB__72_458;
LEGUP_F_main_BB__72_458:
		next_state = LEGUP_F_main_BB__72_459;
LEGUP_F_main_BB__72_459:
		next_state = LEGUP_F_main_BB__72_460;
LEGUP_F_main_BB__72_460:
		next_state = LEGUP_F_main_BB__72_461;
LEGUP_F_main_BB__72_461:
		next_state = LEGUP_F_main_BB__72_462;
LEGUP_F_main_BB__72_462:
		next_state = LEGUP_F_main_BB__72_463;
LEGUP_F_main_BB__72_463:
		next_state = LEGUP_F_main_BB__72_464;
LEGUP_F_main_BB__72_464:
		next_state = LEGUP_F_main_BB__72_465;
LEGUP_F_main_BB__72_465:
		next_state = LEGUP_F_main_BB__72_466;
LEGUP_F_main_BB__72_466:
		next_state = LEGUP_F_main_BB__72_467;
LEGUP_F_main_BB__72_467:
		next_state = LEGUP_F_main_BB__72_468;
LEGUP_F_main_BB__72_468:
		next_state = LEGUP_F_main_BB__72_469;
LEGUP_F_main_BB__72_469:
		next_state = LEGUP_F_main_BB__72_470;
LEGUP_F_main_BB__72_470:
	if ((main_72_78_reg == 1'd1))
		next_state = LEGUP_F_main_BB__81_471;
	else if ((main_72_78_reg == 1'd0))
		next_state = LEGUP_F_main_BB__84_472;
LEGUP_F_main_BB__81_471:
		next_state = LEGUP_F_main_BB_expfexit_484;
LEGUP_F_main_BB__84_472:
		next_state = LEGUP_F_main_BB__84_473;
LEGUP_F_main_BB__84_473:
		next_state = LEGUP_F_main_BB__84_474;
LEGUP_F_main_BB__84_474:
		next_state = LEGUP_F_main_BB__84_475;
LEGUP_F_main_BB__84_475:
		next_state = LEGUP_F_main_BB__84_476;
LEGUP_F_main_BB__84_476:
		next_state = LEGUP_F_main_BB__84_477;
LEGUP_F_main_BB__84_477:
		next_state = LEGUP_F_main_BB__84_478;
LEGUP_F_main_BB__84_478:
		next_state = LEGUP_F_main_BB__84_479;
LEGUP_F_main_BB__84_479:
		next_state = LEGUP_F_main_BB__84_480;
LEGUP_F_main_BB__84_480:
		next_state = LEGUP_F_main_BB__84_481;
LEGUP_F_main_BB__84_481:
		next_state = LEGUP_F_main_BB__84_482;
LEGUP_F_main_BB__84_482:
		next_state = LEGUP_F_main_BB__84_483;
LEGUP_F_main_BB__84_483:
		next_state = LEGUP_F_main_BB_expfexit_484;
LEGUP_F_main_BB_expfexit_484:
		next_state = LEGUP_F_main_BB_expfexit_485;
LEGUP_F_main_BB_expfexit_485:
	if ((main_expfexit_exitcond6_reg == 1'd1))
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1preheader_486;
	else if ((main_expfexit_exitcond6_reg == 1'd0))
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_6;
LEGUP_F_main_BB_fusion1loop_bodydim1_10:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_11;
LEGUP_F_main_BB_fusion1loop_bodydim1_11:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_12;
LEGUP_F_main_BB_fusion1loop_bodydim1_12:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_13;
LEGUP_F_main_BB_fusion1loop_bodydim1_13:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_14;
LEGUP_F_main_BB_fusion1loop_bodydim1_14:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_15;
LEGUP_F_main_BB_fusion1loop_bodydim1_15:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_16;
LEGUP_F_main_BB_fusion1loop_bodydim1_16:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_17;
LEGUP_F_main_BB_fusion1loop_bodydim1_17:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_18;
LEGUP_F_main_BB_fusion1loop_bodydim1_18:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_19;
LEGUP_F_main_BB_fusion1loop_bodydim1_19:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_20;
LEGUP_F_main_BB_fusion1loop_bodydim1_20:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_21;
LEGUP_F_main_BB_fusion1loop_bodydim1_21:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_22;
LEGUP_F_main_BB_fusion1loop_bodydim1_22:
	if ((main_fusion1loop_bodydim1_12 == 1'd1))
		next_state = LEGUP_F_main_BB__13_23;
	else if ((main_fusion1loop_bodydim1_12 == 1'd0))
		next_state = LEGUP_F_main_BB__15_38;
LEGUP_F_main_BB_fusion1loop_bodydim1_6:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_7;
LEGUP_F_main_BB_fusion1loop_bodydim1_7:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_8;
LEGUP_F_main_BB_fusion1loop_bodydim1_8:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_9;
LEGUP_F_main_BB_fusion1loop_bodydim1_9:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_10;
LEGUP_F_main_BB_fusion1loop_bodydim1preheader_5:
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1_6;
LEGUP_F_main_BB_fusionloop_bodydim0_505:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_506;
LEGUP_F_main_BB_fusionloop_bodydim0_506:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_507;
LEGUP_F_main_BB_fusionloop_bodydim0_507:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_508;
LEGUP_F_main_BB_fusionloop_bodydim0_508:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_509;
LEGUP_F_main_BB_fusionloop_bodydim0_509:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_510;
LEGUP_F_main_BB_fusionloop_bodydim0_510:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_511;
LEGUP_F_main_BB_fusionloop_bodydim0_511:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_512;
LEGUP_F_main_BB_fusionloop_bodydim0_512:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_513;
LEGUP_F_main_BB_fusionloop_bodydim0_513:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_514;
LEGUP_F_main_BB_fusionloop_bodydim0_514:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_515;
LEGUP_F_main_BB_fusionloop_bodydim0_515:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_516;
LEGUP_F_main_BB_fusionloop_bodydim0_516:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_517;
LEGUP_F_main_BB_fusionloop_bodydim0_517:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_518;
LEGUP_F_main_BB_fusionloop_bodydim0_518:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_519;
LEGUP_F_main_BB_fusionloop_bodydim0_519:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_520;
LEGUP_F_main_BB_fusionloop_bodydim0_520:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_521;
LEGUP_F_main_BB_fusionloop_bodydim0_521:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_522;
LEGUP_F_main_BB_fusionloop_bodydim0_522:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_523;
LEGUP_F_main_BB_fusionloop_bodydim0_523:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_524;
LEGUP_F_main_BB_fusionloop_bodydim0_524:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_525;
LEGUP_F_main_BB_fusionloop_bodydim0_525:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_526;
LEGUP_F_main_BB_fusionloop_bodydim0_526:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_527;
LEGUP_F_main_BB_fusionloop_bodydim0_527:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_528;
LEGUP_F_main_BB_fusionloop_bodydim0_528:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_529;
LEGUP_F_main_BB_fusionloop_bodydim0_529:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_530;
LEGUP_F_main_BB_fusionloop_bodydim0_530:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_531;
LEGUP_F_main_BB_fusionloop_bodydim0_531:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_532;
LEGUP_F_main_BB_fusionloop_bodydim0_532:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_533;
LEGUP_F_main_BB_fusionloop_bodydim0_533:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_534;
LEGUP_F_main_BB_fusionloop_bodydim0_534:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_535;
LEGUP_F_main_BB_fusionloop_bodydim0_535:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_536;
LEGUP_F_main_BB_fusionloop_bodydim0_536:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_537;
LEGUP_F_main_BB_fusionloop_bodydim0_537:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_538;
LEGUP_F_main_BB_fusionloop_bodydim0_538:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_539;
LEGUP_F_main_BB_fusionloop_bodydim0_539:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_540;
LEGUP_F_main_BB_fusionloop_bodydim0_540:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_541;
LEGUP_F_main_BB_fusionloop_bodydim0_541:
	if ((main_fusionloop_bodydim0_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB_fusionloop_exitdim0_542;
	else if ((main_fusionloop_bodydim0_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_505;
LEGUP_F_main_BB_fusionloop_bodydim0preheader_504:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_505;
LEGUP_F_main_BB_fusionloop_exitdim0_542:
		next_state = LEGUP_F_main_BB_fusionloop_exitdim0_543;
LEGUP_F_main_BB_fusionloop_exitdim0_543:
		next_state = LEGUP_F_main_BB_fusionloop_exitdim0_544;
LEGUP_F_main_BB_fusionloop_exitdim0_544:
		next_state = LEGUP_0;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_487:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_488;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_488:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_489;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_489:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_490;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_490:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_491;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_491:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_492;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_492:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_493;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_493:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_494;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_494:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_495;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_495:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_496;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_496:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_497;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_497:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_498;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_498:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_499;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_499:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_500;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_500:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_501;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_501:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_502;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_502:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_503;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_503:
	if ((main_reduce1innerloop_bodyreduction_dim1_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0preheader_504;
	else if ((main_reduce1innerloop_bodyreduction_dim1_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_487;
LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1preheader_486:
		next_state = LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_487;
LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_1:
		next_state = LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_2;
LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_2:
		next_state = LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_3;
LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_3:
		next_state = LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_4;
LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_4:
	if ((main_reduceinnerloop_bodyreduction_dim1_exitcond9_reg == 1'd1))
		next_state = LEGUP_F_main_BB_fusion1loop_bodydim1preheader_5;
	else if ((main_reduceinnerloop_bodyreduction_dim1_exitcond9_reg == 1'd0))
		next_state = LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_1;
LEGUP_F_main_BB_threadpresplit_42:
	if ((main_threadpresplit_24 == 1'd1))
		next_state = LEGUP_F_main_BB__25_43;
	else if ((main_threadpresplit_24 == 1'd0))
		next_state = LEGUP_F_main_BB__47_126;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %0 = phi float [ 0xFFF0000000000000, %reduce.inner.loop_body.reduction_dim.1.lr.ph ], [ %5, %reduce.inner.loop_body.reduction_dim.1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_reduceinnerloop_bodyreduction_dim1_0 = 32'hFF800000;
	end
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %0 = phi float [ 0xFFF0000000000000, %reduce.inner.loop_body.reduction_dim.1.lr.ph ], [ %5, %reduce.inner.loop_body.reduction_dim.1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_4) & (memory_controller_waitrequest == 1'd0)) & (main_reduceinnerloop_bodyreduction_dim1_exitcond9_reg == 1'd0))) */ begin
		main_reduceinnerloop_bodyreduction_dim1_0 = main_reduceinnerloop_bodyreduction_dim1_5;
	end
end
always @(posedge clk) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %0 = phi float [ 0xFFF0000000000000, %reduce.inner.loop_body.reduction_dim.1.lr.ph ], [ %5, %reduce.inner.loop_body.reduction_dim.1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_reduceinnerloop_bodyreduction_dim1_0_reg <= main_reduceinnerloop_bodyreduction_dim1_0;
		if (start == 1'b0 && ^(main_reduceinnerloop_bodyreduction_dim1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduceinnerloop_bodyreduction_dim1_0_reg"); $finish; end
	end
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %0 = phi float [ 0xFFF0000000000000, %reduce.inner.loop_body.reduction_dim.1.lr.ph ], [ %5, %reduce.inner.loop_body.reduction_dim.1 ]*/
	if ((((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_4) & (memory_controller_waitrequest == 1'd0)) & (main_reduceinnerloop_bodyreduction_dim1_exitcond9_reg == 1'd0))) begin
		main_reduceinnerloop_bodyreduction_dim1_0_reg <= main_reduceinnerloop_bodyreduction_dim1_0;
		if (start == 1'b0 && ^(main_reduceinnerloop_bodyreduction_dim1_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduceinnerloop_bodyreduction_dim1_0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %reduce.inner.indvar.reduction_dim.112 = phi i64 [ 0, %reduce.inner.loop_body.reduction_dim.1.lr.ph ], [ %6, %reduce.inner.loop_body.reduction_dim.1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112 = 64'd0;
	end
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %reduce.inner.indvar.reduction_dim.112 = phi i64 [ 0, %reduce.inner.loop_body.reduction_dim.1.lr.ph ], [ %6, %reduce.inner.loop_body.reduction_dim.1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_4) & (memory_controller_waitrequest == 1'd0)) & (main_reduceinnerloop_bodyreduction_dim1_exitcond9_reg == 1'd0))) */ begin
		main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112 = main_reduceinnerloop_bodyreduction_dim1_6_reg;
	end
end
always @(posedge clk) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %reduce.inner.indvar.reduction_dim.112 = phi i64 [ 0, %reduce.inner.loop_body.reduction_dim.1.lr.ph ], [ %6, %reduce.inner.loop_body.reduction_dim.1 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112_reg <= main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112;
		if (start == 1'b0 && ^(main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112_reg"); $finish; end
	end
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %reduce.inner.indvar.reduction_dim.112 = phi i64 [ 0, %reduce.inner.loop_body.reduction_dim.1.lr.ph ], [ %6, %reduce.inner.loop_body.reduction_dim.1 ]*/
	if ((((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_4) & (memory_controller_waitrequest == 1'd0)) & (main_reduceinnerloop_bodyreduction_dim1_exitcond9_reg == 1'd0))) begin
		main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112_reg <= main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112;
		if (start == 1'b0 && ^(main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %scevgep10 = getelementptr [1 x [64 x float]]* @param0, i64 0, i64 0, i64 %reduce.inner.indvar.reduction_dim.112*/
		main_reduceinnerloop_bodyreduction_dim1_scevgep10 = (`TAG_g_param0_a + (64'd4 * main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112_reg));
end
always @(*) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %1 = load volatile float* %scevgep10, align 4*/
		main_reduceinnerloop_bodyreduction_dim1_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %1 = load volatile float* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_3)) begin
		main_reduceinnerloop_bodyreduction_dim1_1_reg <= main_reduceinnerloop_bodyreduction_dim1_1;
		if (start == 1'b0 && ^(main_reduceinnerloop_bodyreduction_dim1_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduceinnerloop_bodyreduction_dim1_1_reg"); $finish; end
	end
end
always @(*) begin
	main_reduceinnerloop_bodyreduction_dim1_2 = altfp_compare32_1_main_reduceinnerloop_bodyreduction_dim1_2_out;
end
always @(*) begin
	main_reduceinnerloop_bodyreduction_dim1_3 = altfp_compare32_1_main_reduceinnerloop_bodyreduction_dim1_3_out;
end
always @(posedge clk) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %3 = fcmp ueq float %0, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_2)) begin
		main_reduceinnerloop_bodyreduction_dim1_3_reg <= main_reduceinnerloop_bodyreduction_dim1_3;
		if (start == 1'b0 && ^(main_reduceinnerloop_bodyreduction_dim1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduceinnerloop_bodyreduction_dim1_3_reg"); $finish; end
	end
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %3 = fcmp ueq float %0, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_2)) begin
		main_reduceinnerloop_bodyreduction_dim1_3_reg <= main_reduceinnerloop_bodyreduction_dim1_3;
		if (start == 1'b0 && ^(main_reduceinnerloop_bodyreduction_dim1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduceinnerloop_bodyreduction_dim1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %4 = or i1 %2, %3*/
		main_reduceinnerloop_bodyreduction_dim1_4 = (main_reduceinnerloop_bodyreduction_dim1_2 | main_reduceinnerloop_bodyreduction_dim1_3_reg);
end
always @(*) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %5 = select i1 %4, float %0, float %1*/
		main_reduceinnerloop_bodyreduction_dim1_5 = (main_reduceinnerloop_bodyreduction_dim1_4 ? main_reduceinnerloop_bodyreduction_dim1_0_reg : main_reduceinnerloop_bodyreduction_dim1_1_reg);
end
always @(posedge clk) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %5 = select i1 %4, float %0, float %1*/
	if ((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_4)) begin
		main_reduceinnerloop_bodyreduction_dim1_5_reg <= main_reduceinnerloop_bodyreduction_dim1_5;
		if (start == 1'b0 && ^(main_reduceinnerloop_bodyreduction_dim1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduceinnerloop_bodyreduction_dim1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %6 = add nuw nsw i64 %reduce.inner.indvar.reduction_dim.112, 1*/
		main_reduceinnerloop_bodyreduction_dim1_6 = (main_reduceinnerloop_bodyreduction_dim1_reduceinnerindvarreduction_dim112_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %6 = add nuw nsw i64 %reduce.inner.indvar.reduction_dim.112, 1*/
	if ((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_1)) begin
		main_reduceinnerloop_bodyreduction_dim1_6_reg <= main_reduceinnerloop_bodyreduction_dim1_6;
		if (start == 1'b0 && ^(main_reduceinnerloop_bodyreduction_dim1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduceinnerloop_bodyreduction_dim1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %exitcond9 = icmp eq i64 %6, 64*/
		main_reduceinnerloop_bodyreduction_dim1_exitcond9 = (main_reduceinnerloop_bodyreduction_dim1_6 == 64'd64);
end
always @(posedge clk) begin
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %exitcond9 = icmp eq i64 %6, 64*/
	if ((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_1)) begin
		main_reduceinnerloop_bodyreduction_dim1_exitcond9_reg <= main_reduceinnerloop_bodyreduction_dim1_exitcond9;
		if (start == 1'b0 && ^(main_reduceinnerloop_bodyreduction_dim1_exitcond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduceinnerloop_bodyreduction_dim1_exitcond9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %lo.i.i.0 = phi float [ %lo.i.i.3, %expf.exit ], [ undef, %fusion.1.loop_body.dim.1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1preheader_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_fusion1loop_bodydim1_loii0 = 0;
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %lo.i.i.0 = phi float [ %lo.i.i.3, %expf.exit ], [ undef, %fusion.1.loop_body.dim.1.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_expfexit_485) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond6_reg == 1'd0))) */ begin
		main_fusion1loop_bodydim1_loii0 = main_expfexit_loii3_reg;
	end
end
always @(posedge clk) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %lo.i.i.0 = phi float [ %lo.i.i.3, %expf.exit ], [ undef, %fusion.1.loop_body.dim.1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1preheader_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_fusion1loop_bodydim1_loii0_reg <= main_fusion1loop_bodydim1_loii0;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_loii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_loii0_reg"); $finish; end
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %lo.i.i.0 = phi float [ %lo.i.i.3, %expf.exit ], [ undef, %fusion.1.loop_body.dim.1.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_expfexit_485) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond6_reg == 1'd0))) begin
		main_fusion1loop_bodydim1_loii0_reg <= main_fusion1loop_bodydim1_loii0;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_loii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_loii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %hi.i.i.0 = phi float [ %hi.i.i.3, %expf.exit ], [ undef, %fusion.1.loop_body.dim.1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1preheader_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_fusion1loop_bodydim1_hiii0 = 0;
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %hi.i.i.0 = phi float [ %hi.i.i.3, %expf.exit ], [ undef, %fusion.1.loop_body.dim.1.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_expfexit_485) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond6_reg == 1'd0))) */ begin
		main_fusion1loop_bodydim1_hiii0 = main_expfexit_hiii3_reg;
	end
end
always @(posedge clk) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %hi.i.i.0 = phi float [ %hi.i.i.3, %expf.exit ], [ undef, %fusion.1.loop_body.dim.1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1preheader_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_fusion1loop_bodydim1_hiii0_reg <= main_fusion1loop_bodydim1_hiii0;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_hiii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_hiii0_reg"); $finish; end
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %hi.i.i.0 = phi float [ %hi.i.i.3, %expf.exit ], [ undef, %fusion.1.loop_body.dim.1.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_expfexit_485) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond6_reg == 1'd0))) begin
		main_fusion1loop_bodydim1_hiii0_reg <= main_fusion1loop_bodydim1_hiii0;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_hiii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_hiii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %fusion.1.indvar.dim.18 = phi i64 [ %89, %expf.exit ], [ 0, %fusion.1.loop_body.dim.1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1preheader_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_fusion1loop_bodydim1_fusion1indvardim18 = 64'd0;
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %fusion.1.indvar.dim.18 = phi i64 [ %89, %expf.exit ], [ 0, %fusion.1.loop_body.dim.1.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_expfexit_485) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond6_reg == 1'd0))) */ begin
		main_fusion1loop_bodydim1_fusion1indvardim18 = main_expfexit_89_reg;
	end
end
always @(posedge clk) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %fusion.1.indvar.dim.18 = phi i64 [ %89, %expf.exit ], [ 0, %fusion.1.loop_body.dim.1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1preheader_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_fusion1loop_bodydim1_fusion1indvardim18_reg <= main_fusion1loop_bodydim1_fusion1indvardim18;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_fusion1indvardim18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_fusion1indvardim18_reg"); $finish; end
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %fusion.1.indvar.dim.18 = phi i64 [ %89, %expf.exit ], [ 0, %fusion.1.loop_body.dim.1.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_expfexit_485) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond6_reg == 1'd0))) begin
		main_fusion1loop_bodydim1_fusion1indvardim18_reg <= main_fusion1loop_bodydim1_fusion1indvardim18;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_fusion1indvardim18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_fusion1indvardim18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %scevgep7 = getelementptr [1 x [64 x float]]* @temp1, i64 0, i64 0, i64 %fusion.1.indvar.dim.18*/
		main_fusion1loop_bodydim1_scevgep7 = (`TAG_g_temp1_a + (64'd4 * main_fusion1loop_bodydim1_fusion1indvardim18_reg));
end
always @(posedge clk) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %scevgep7 = getelementptr [1 x [64 x float]]* @temp1, i64 0, i64 0, i64 %fusion.1.indvar.dim.18*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_6)) begin
		main_fusion1loop_bodydim1_scevgep7_reg <= main_fusion1loop_bodydim1_scevgep7;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %scevgep8 = getelementptr [1 x [64 x float]]* @param0, i64 0, i64 0, i64 %fusion.1.indvar.dim.18*/
		main_fusion1loop_bodydim1_scevgep8 = (`TAG_g_param0_a + (64'd4 * main_fusion1loop_bodydim1_fusion1indvardim18_reg));
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %7 = load volatile float* %scevgep8, align 4*/
		main_fusion1loop_bodydim1_7 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_fusion1loop_bodydim1_8 = main_altfp_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %8 = fsub float %7, %5*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_22)) begin
		main_fusion1loop_bodydim1_8_reg <= main_fusion1loop_bodydim1_8;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_8_reg"); $finish; end
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %8 = fsub float %7, %5*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_22)) begin
		main_fusion1loop_bodydim1_8_reg <= main_fusion1loop_bodydim1_8;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_8_reg"); $finish; end
	end
	/* main: %67*/
	/*   %70 = fsub float %69, %.048*/
	if ((cur_state == LEGUP_F_main_BB__67_366)) begin
		main_fusion1loop_bodydim1_8_reg <= main_67_70;
		if (start == 1'b0 && ^(main_67_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_8_reg"); $finish; end
	end
	/* main: %72*/
	/*   %73 = fsub float 2.000000e+00, %64*/
	if ((cur_state == LEGUP_F_main_BB__72_395)) begin
		main_fusion1loop_bodydim1_8_reg <= main_72_73;
		if (start == 1'b0 && ^(main_72_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_8_reg"); $finish; end
	end
	/* main: %72*/
	/*   %75 = fsub float %lo.i.i.2, %74*/
	if ((cur_state == LEGUP_F_main_BB__72_442)) begin
		main_fusion1loop_bodydim1_8_reg <= main_72_75;
		if (start == 1'b0 && ^(main_72_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_8_reg"); $finish; end
	end
	/* main: %72*/
	/*   %77 = fsub float 1.000000e+00, %76*/
	if ((cur_state == LEGUP_F_main_BB__72_470)) begin
		main_fusion1loop_bodydim1_8_reg <= main_72_77;
		if (start == 1'b0 && ^(main_72_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %9 = bitcast float %8 to i32*/
		main_fusion1loop_bodydim1_9 = main_fusion1loop_bodydim1_8;
end
always @(posedge clk) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %9 = bitcast float %8 to i32*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_22)) begin
		main_fusion1loop_bodydim1_9_reg <= main_fusion1loop_bodydim1_9;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %10 = lshr i32 %9, 31*/
		main_fusion1loop_bodydim1_10 = (main_fusion1loop_bodydim1_9 >>> (32'd31 % 32));
end
always @(posedge clk) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %10 = lshr i32 %9, 31*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_22)) begin
		main_fusion1loop_bodydim1_10_reg <= main_fusion1loop_bodydim1_10;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %11 = and i32 %9, 2147483647*/
		main_fusion1loop_bodydim1_11 = (main_fusion1loop_bodydim1_9 & 32'd2147483647);
end
always @(posedge clk) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %11 = and i32 %9, 2147483647*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_22)) begin
		main_fusion1loop_bodydim1_11_reg <= main_fusion1loop_bodydim1_11;
		if (start == 1'b0 && ^(main_fusion1loop_bodydim1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusion1loop_bodydim1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %12 = icmp ugt i32 %11, 2139095040*/
		main_fusion1loop_bodydim1_12 = (main_fusion1loop_bodydim1_11 > 32'd2139095040);
end
always @(*) begin
	main_13_14 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %15*/
	/*   %16 = icmp eq i32 %11, 2139095040*/
		main_15_16 = (main_fusion1loop_bodydim1_11_reg == 32'd2139095040);
end
always @(*) begin
	/* main: %17*/
	/*   %18 = icmp eq i32 %10, 0*/
		main_17_18 = (main_fusion1loop_bodydim1_10_reg == 32'd0);
end
always @(*) begin
	/* main: %17*/
	/*   %. = select i1 %18, float %8, float 0.000000e+00*/
		main_17_ = (main_17_18 ? main_fusion1loop_bodydim1_8_reg : 32'h0);
end
always @(*) begin
	/* main: %19*/
	/*   %20 = icmp sgt i32 %9, 1118925335*/
		main_19_20 = ($signed(main_fusion1loop_bodydim1_9_reg) > $signed(32'd1118925335));
end
always @(*) begin
	/* main: %21*/
	/*   %22 = icmp slt i32 %9, 0*/
		main_21_22 = ($signed(main_fusion1loop_bodydim1_9_reg) < $signed(32'd0));
end
always @(*) begin
	/* main: %21*/
	/*   %23 = icmp ugt i32 %11, 1120924085*/
		main_21_23 = (main_fusion1loop_bodydim1_11_reg > 32'd1120924085);
end
always @(*) begin
	/* main: %21*/
	/*   %or.cond = and i1 %22, %23*/
		main_21_orcond = (main_21_22 & main_21_23);
end
always @(*) begin
	/* main: %thread-pre-split*/
	/*   %24 = icmp ugt i32 %11, 1051816472*/
		main_threadpresplit_24 = (main_fusion1loop_bodydim1_11_reg > 32'd1051816472);
end
always @(*) begin
	/* main: %25*/
	/*   %26 = icmp ult i32 %11, 1065686418*/
		main_25_26 = (main_fusion1loop_bodydim1_11_reg < 32'd1065686418);
end
always @(*) begin
	/* main: %27*/
	/*   %28 = zext i32 %10 to i64*/
		main_27_28 = main_fusion1loop_bodydim1_10_reg;
end
always @(*) begin
	/* main: %27*/
	/*   %29 = getelementptr inbounds [2 x float]* @ln2HI31, i64 0, i64 %28*/
		main_27_29 = (`TAG_g_ln2HI31_a + (64'd4 * main_27_28));
end
always @(*) begin
	/* main: %27*/
	/*   %30 = load float* %29, align 4*/
		main_27_30 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %27*/
	/*   %31 = getelementptr inbounds [2 x float]* @ln2LO32, i64 0, i64 %28*/
		main_27_31 = (`TAG_g_ln2LO32_a + (64'd4 * main_27_28));
end
always @(*) begin
	/* main: %27*/
	/*   %32 = load float* %31, align 4*/
		main_27_32 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %27*/
	/*   %33 = xor i32 %10, 1*/
		main_27_33 = (main_fusion1loop_bodydim1_10_reg ^ 32'd1);
end
always @(*) begin
	/* main: %27*/
	/*   %34 = sub nsw i32 %33, %10*/
		main_27_34 = (main_27_33 - main_fusion1loop_bodydim1_10_reg);
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %34 = sub nsw i32 %33, %10*/
	if ((cur_state == LEGUP_F_main_BB__27_44)) begin
		main_27_34_reg <= main_27_34;
		if (start == 1'b0 && ^(main_27_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_34_reg"); $finish; end
	end
end
always @(*) begin
	main_35_36 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %36 = fmul float %8, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_main_BB__35_58)) begin
		main_35_36_reg <= main_35_36;
		if (start == 1'b0 && ^(main_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_36_reg"); $finish; end
	end
	/* main: %35*/
	/*   %36 = fmul float %8, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_main_BB__35_58)) begin
		main_35_36_reg <= main_35_36;
		if (start == 1'b0 && ^(main_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_36_reg"); $finish; end
	end
	/* main: %53*/
	/*   %54 = fmul float %.048, %.048*/
	if ((cur_state == LEGUP_F_main_BB__53_168)) begin
		main_35_36_reg <= main_53_54;
		if (start == 1'b0 && ^(main_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_36_reg"); $finish; end
	end
	/* main: %84*/
	/*   %88 = fmul float %87, 0x39B0000000000000*/
	if ((cur_state == LEGUP_F_main_BB__84_483)) begin
		main_35_36_reg <= main_84_88;
		if (start == 1'b0 && ^(main_84_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %37 = zext i32 %10 to i64*/
		main_35_37 = main_fusion1loop_bodydim1_10_reg;
end
always @(*) begin
	/* main: %35*/
	/*   %38 = getelementptr inbounds [2 x float]* @halF33, i64 0, i64 %37*/
		main_35_38 = (`TAG_g_halF33_a + (64'd4 * main_35_37));
end
always @(*) begin
	/* main: %35*/
	/*   %39 = load float* %38, align 4*/
		main_35_39 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %39 = load float* %38, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_49)) begin
		main_35_39_reg <= main_35_39;
		if (start == 1'b0 && ^(main_35_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_39_reg"); $finish; end
	end
end
always @(*) begin
	main_35_40 = main_altfp_add_32_0;
end
always @(*) begin
	main_35_41 = main_altfp_fptosi_32_0;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %41 = fptosi float %40 to i32*/
	if ((cur_state == LEGUP_F_main_BB__35_78)) begin
		main_35_41_reg <= main_35_41;
		if (start == 1'b0 && ^(main_35_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_41_reg"); $finish; end
	end
	/* main: %35*/
	/*   %41 = fptosi float %40 to i32*/
	if ((cur_state == LEGUP_F_main_BB__35_78)) begin
		main_35_41_reg <= main_35_41;
		if (start == 1'b0 && ^(main_35_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_41_reg"); $finish; end
	end
end
always @(*) begin
	main_35_42 = main_altfp_sitofp_32_0;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %42 = sitofp i32 %41 to float*/
	if ((cur_state == LEGUP_F_main_BB__35_84)) begin
		main_35_42_reg <= main_35_42;
		if (start == 1'b0 && ^(main_35_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_42_reg"); $finish; end
	end
	/* main: %35*/
	/*   %42 = sitofp i32 %41 to float*/
	if ((cur_state == LEGUP_F_main_BB__35_84)) begin
		main_35_42_reg <= main_35_42;
		if (start == 1'b0 && ^(main_35_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_42_reg"); $finish; end
	end
end
always @(*) begin
	main_35_43 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %43 = fmul float %42, 0x3FE62E3000000000*/
	if ((cur_state == LEGUP_F_main_BB__35_95)) begin
		main_35_43_reg <= main_35_43;
		if (start == 1'b0 && ^(main_35_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_43_reg"); $finish; end
	end
	/* main: %35*/
	/*   %43 = fmul float %42, 0x3FE62E3000000000*/
	if ((cur_state == LEGUP_F_main_BB__35_95)) begin
		main_35_43_reg <= main_35_43;
		if (start == 1'b0 && ^(main_35_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_43_reg"); $finish; end
	end
	/* main: %53*/
	/*   %55 = fmul float %54, 0x3E66376980000000*/
	if ((cur_state == LEGUP_F_main_BB__53_179)) begin
		main_35_43_reg <= main_53_55;
		if (start == 1'b0 && ^(main_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_43_reg"); $finish; end
	end
	/* main: %53*/
	/*   %57 = fmul float %54, %56*/
	if ((cur_state == LEGUP_F_main_BB__53_204)) begin
		main_35_43_reg <= main_53_57;
		if (start == 1'b0 && ^(main_53_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_43_reg"); $finish; end
	end
	/* main: %53*/
	/*   %59 = fmul float %54, %58*/
	if ((cur_state == LEGUP_F_main_BB__53_229)) begin
		main_35_43_reg <= main_53_59;
		if (start == 1'b0 && ^(main_53_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_43_reg"); $finish; end
	end
	/* main: %53*/
	/*   %61 = fmul float %54, %60*/
	if ((cur_state == LEGUP_F_main_BB__53_254)) begin
		main_35_43_reg <= main_53_61;
		if (start == 1'b0 && ^(main_53_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_43_reg"); $finish; end
	end
	/* main: %53*/
	/*   %63 = fmul float %54, %62*/
	if ((cur_state == LEGUP_F_main_BB__53_279)) begin
		main_35_43_reg <= main_53_63;
		if (start == 1'b0 && ^(main_53_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_43_reg"); $finish; end
	end
end
always @(*) begin
	main_35_44 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %44 = fmul float %42, 0x3EE2FEFA20000000*/
	if ((cur_state == LEGUP_F_main_BB__35_96)) begin
		main_35_44_reg <= main_35_44;
		if (start == 1'b0 && ^(main_35_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_44_reg"); $finish; end
	end
	/* main: %35*/
	/*   %44 = fmul float %42, 0x3EE2FEFA20000000*/
	if ((cur_state == LEGUP_F_main_BB__35_96)) begin
		main_35_44_reg <= main_35_44;
		if (start == 1'b0 && ^(main_35_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_44_reg"); $finish; end
	end
	/* main: %53*/
	/*   %66 = fmul float %.048, %64*/
	if ((cur_state == LEGUP_F_main_BB__53_304)) begin
		main_35_44_reg <= main_53_66;
		if (start == 1'b0 && ^(main_53_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %k.i.i.0 = phi i32 [ %34, %27 ], [ %41, %35 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_45_kii0 = main_27_34_reg;
	end
	/* main: %45*/
	/*   %k.i.i.0 = phi i32 [ %34, %27 ], [ %41, %35 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__35_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_45_kii0 = main_35_41_reg;
	end
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %k.i.i.0 = phi i32 [ %34, %27 ], [ %41, %35 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_45_kii0_reg <= main_45_kii0;
		if (start == 1'b0 && ^(main_45_kii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_kii0_reg"); $finish; end
	end
	/* main: %45*/
	/*   %k.i.i.0 = phi i32 [ %34, %27 ], [ %41, %35 ]*/
	if (((cur_state == LEGUP_F_main_BB__35_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_45_kii0_reg <= main_45_kii0;
		if (start == 1'b0 && ^(main_45_kii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_kii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %lo.i.i.1 = phi float [ %32, %27 ], [ %44, %35 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_45_loii1 = main_27_32;
	end
	/* main: %45*/
	/*   %lo.i.i.1 = phi float [ %32, %27 ], [ %44, %35 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__35_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_45_loii1 = main_35_44;
	end
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %lo.i.i.1 = phi float [ %32, %27 ], [ %44, %35 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_45_loii1_reg <= main_45_loii1;
		if (start == 1'b0 && ^(main_45_loii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_loii1_reg"); $finish; end
	end
	/* main: %45*/
	/*   %lo.i.i.1 = phi float [ %32, %27 ], [ %44, %35 ]*/
	if (((cur_state == LEGUP_F_main_BB__35_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_45_loii1_reg <= main_45_loii1;
		if (start == 1'b0 && ^(main_45_loii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_loii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %.pn = phi float [ %30, %27 ], [ %43, %35 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_45_pn = main_27_30;
	end
	/* main: %45*/
	/*   %.pn = phi float [ %30, %27 ], [ %43, %35 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__35_96) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_45_pn = main_35_43_reg;
	end
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %.pn = phi float [ %30, %27 ], [ %43, %35 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_45_pn_reg <= main_45_pn;
		if (start == 1'b0 && ^(main_45_pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_pn_reg"); $finish; end
	end
	/* main: %45*/
	/*   %.pn = phi float [ %30, %27 ], [ %43, %35 ]*/
	if (((cur_state == LEGUP_F_main_BB__35_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_45_pn_reg <= main_45_pn;
		if (start == 1'b0 && ^(main_45_pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_pn_reg"); $finish; end
	end
end
always @(*) begin
	main_45_hiii1 = main_altfp_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %hi.i.i.1 = fsub float %8, %.pn*/
	if ((cur_state == LEGUP_F_main_BB__45_111)) begin
		main_45_hiii1_reg <= main_45_hiii1;
		if (start == 1'b0 && ^(main_45_hiii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_hiii1_reg"); $finish; end
	end
	/* main: %45*/
	/*   %hi.i.i.1 = fsub float %8, %.pn*/
	if ((cur_state == LEGUP_F_main_BB__45_111)) begin
		main_45_hiii1_reg <= main_45_hiii1;
		if (start == 1'b0 && ^(main_45_hiii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_hiii1_reg"); $finish; end
	end
	/* main: %67*/
	/*   %71 = fsub float 1.000000e+00, %70*/
	if ((cur_state == LEGUP_F_main_BB__67_380)) begin
		main_45_hiii1_reg <= main_67_71;
		if (start == 1'b0 && ^(main_67_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_hiii1_reg"); $finish; end
	end
	/* main: %72*/
	/*   %76 = fsub float %75, %hi.i.i.2*/
	if ((cur_state == LEGUP_F_main_BB__72_456)) begin
		main_45_hiii1_reg <= main_72_76;
		if (start == 1'b0 && ^(main_72_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_hiii1_reg"); $finish; end
	end
end
always @(*) begin
	main_45_46 = main_altfp_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %46 = fsub float %hi.i.i.1, %lo.i.i.1*/
	if ((cur_state == LEGUP_F_main_BB__45_125)) begin
		main_45_46_reg <= main_45_46;
		if (start == 1'b0 && ^(main_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_46_reg"); $finish; end
	end
	/* main: %45*/
	/*   %46 = fsub float %hi.i.i.1, %lo.i.i.1*/
	if ((cur_state == LEGUP_F_main_BB__45_125)) begin
		main_45_46_reg <= main_45_46;
		if (start == 1'b0 && ^(main_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_46_reg"); $finish; end
	end
	/* main: %53*/
	/*   %64 = fsub float %.048, %63*/
	if ((cur_state == LEGUP_F_main_BB__53_293)) begin
		main_45_46_reg <= main_53_64;
		if (start == 1'b0 && ^(main_53_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %48 = icmp ult i32 %11, 830472192*/
		main_47_48 = (main_fusion1loop_bodydim1_11_reg < 32'd830472192);
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %48 = icmp ult i32 %11, 830472192*/
	if ((cur_state == LEGUP_F_main_BB__47_126)) begin
		main_47_48_reg <= main_47_48;
		if (start == 1'b0 && ^(main_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_48_reg"); $finish; end
	end
end
always @(*) begin
	main_47_49 = main_altfp_add_32_0;
end
always @(*) begin
	main_47_50 = altfp_compare32_1_main_47_50_out;
end
always @(*) begin
	/* main: %47*/
	/*   %or.cond52 = and i1 %48, %50*/
		main_47_orcond52 = (main_47_48_reg & main_47_50);
end
always @(*) begin
	main_51_52 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %53*/
	/*   %k.i.i.1 = phi i32 [ %k.i.i.0, %45 ], [ 0, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_125) & (memory_controller_waitrequest == 1'd0))) begin
		main_53_kii1 = main_45_kii0_reg;
	end
	/* main: %53*/
	/*   %k.i.i.1 = phi i32 [ %k.i.i.0, %45 ], [ 0, %47 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__47_141) & (memory_controller_waitrequest == 1'd0)) & (main_47_orcond52 == 1'd0))) */ begin
		main_53_kii1 = 32'd0;
	end
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %k.i.i.1 = phi i32 [ %k.i.i.0, %45 ], [ 0, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_125) & (memory_controller_waitrequest == 1'd0))) begin
		main_53_kii1_reg <= main_53_kii1;
		if (start == 1'b0 && ^(main_53_kii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_kii1_reg"); $finish; end
	end
	/* main: %53*/
	/*   %k.i.i.1 = phi i32 [ %k.i.i.0, %45 ], [ 0, %47 ]*/
	if ((((cur_state == LEGUP_F_main_BB__47_141) & (memory_controller_waitrequest == 1'd0)) & (main_47_orcond52 == 1'd0))) begin
		main_53_kii1_reg <= main_53_kii1;
		if (start == 1'b0 && ^(main_53_kii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_kii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %53*/
	/*   %lo.i.i.2 = phi float [ %lo.i.i.1, %45 ], [ %lo.i.i.0, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_125) & (memory_controller_waitrequest == 1'd0))) begin
		main_53_loii2 = main_45_loii1_reg;
	end
	/* main: %53*/
	/*   %lo.i.i.2 = phi float [ %lo.i.i.1, %45 ], [ %lo.i.i.0, %47 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__47_141) & (memory_controller_waitrequest == 1'd0)) & (main_47_orcond52 == 1'd0))) */ begin
		main_53_loii2 = main_fusion1loop_bodydim1_loii0_reg;
	end
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %lo.i.i.2 = phi float [ %lo.i.i.1, %45 ], [ %lo.i.i.0, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_125) & (memory_controller_waitrequest == 1'd0))) begin
		main_53_loii2_reg <= main_53_loii2;
		if (start == 1'b0 && ^(main_53_loii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_loii2_reg"); $finish; end
	end
	/* main: %53*/
	/*   %lo.i.i.2 = phi float [ %lo.i.i.1, %45 ], [ %lo.i.i.0, %47 ]*/
	if ((((cur_state == LEGUP_F_main_BB__47_141) & (memory_controller_waitrequest == 1'd0)) & (main_47_orcond52 == 1'd0))) begin
		main_53_loii2_reg <= main_53_loii2;
		if (start == 1'b0 && ^(main_53_loii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_loii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %53*/
	/*   %hi.i.i.2 = phi float [ %hi.i.i.1, %45 ], [ %hi.i.i.0, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_125) & (memory_controller_waitrequest == 1'd0))) begin
		main_53_hiii2 = main_45_hiii1_reg;
	end
	/* main: %53*/
	/*   %hi.i.i.2 = phi float [ %hi.i.i.1, %45 ], [ %hi.i.i.0, %47 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__47_141) & (memory_controller_waitrequest == 1'd0)) & (main_47_orcond52 == 1'd0))) */ begin
		main_53_hiii2 = main_fusion1loop_bodydim1_hiii0_reg;
	end
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %hi.i.i.2 = phi float [ %hi.i.i.1, %45 ], [ %hi.i.i.0, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_125) & (memory_controller_waitrequest == 1'd0))) begin
		main_53_hiii2_reg <= main_53_hiii2;
		if (start == 1'b0 && ^(main_53_hiii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_hiii2_reg"); $finish; end
	end
	/* main: %53*/
	/*   %hi.i.i.2 = phi float [ %hi.i.i.1, %45 ], [ %hi.i.i.0, %47 ]*/
	if ((((cur_state == LEGUP_F_main_BB__47_141) & (memory_controller_waitrequest == 1'd0)) & (main_47_orcond52 == 1'd0))) begin
		main_53_hiii2_reg <= main_53_hiii2;
		if (start == 1'b0 && ^(main_53_hiii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_hiii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %53*/
	/*   %.048 = phi float [ %46, %45 ], [ %8, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_125) & (memory_controller_waitrequest == 1'd0))) begin
		main_53_048 = main_45_46;
	end
	/* main: %53*/
	/*   %.048 = phi float [ %46, %45 ], [ %8, %47 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__47_141) & (memory_controller_waitrequest == 1'd0)) & (main_47_orcond52 == 1'd0))) */ begin
		main_53_048 = main_fusion1loop_bodydim1_8_reg;
	end
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %.048 = phi float [ %46, %45 ], [ %8, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_125) & (memory_controller_waitrequest == 1'd0))) begin
		main_53_048_reg <= main_53_048;
		if (start == 1'b0 && ^(main_53_048) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_048_reg"); $finish; end
	end
	/* main: %53*/
	/*   %.048 = phi float [ %46, %45 ], [ %8, %47 ]*/
	if ((((cur_state == LEGUP_F_main_BB__47_141) & (memory_controller_waitrequest == 1'd0)) & (main_47_orcond52 == 1'd0))) begin
		main_53_048_reg <= main_53_048;
		if (start == 1'b0 && ^(main_53_048) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_048_reg"); $finish; end
	end
end
always @(*) begin
	main_53_54 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %53*/
/*   %54 = fmul float %.048, %.048*/
	main_53_54_reg = main_35_36_reg;
end
always @(*) begin
	main_53_55 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_53_56 = main_altfp_add_32_0;
end
always @(*) begin
	main_53_57 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_53_58 = main_altfp_add_32_0;
end
always @(*) begin
	main_53_59 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_53_60 = main_altfp_add_32_0;
end
always @(*) begin
	main_53_61 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_53_62 = main_altfp_add_32_0;
end
always @(*) begin
	main_53_63 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_53_64 = main_altfp_subtract_32_0;
end
always @(*) begin
/* main: %53*/
/*   %64 = fsub float %.048, %63*/
	main_53_64_reg = main_45_46_reg;
end
always @(*) begin
	/* main: %53*/
	/*   %65 = icmp eq i32 %k.i.i.1, 0*/
		main_53_65 = (main_53_kii1_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %65 = icmp eq i32 %k.i.i.1, 0*/
	if ((cur_state == LEGUP_F_main_BB__53_157)) begin
		main_53_65_reg <= main_53_65;
		if (start == 1'b0 && ^(main_53_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_65_reg"); $finish; end
	end
end
always @(*) begin
	main_53_66 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %53*/
/*   %66 = fmul float %.048, %64*/
	main_53_66_reg = main_35_44_reg;
end
always @(*) begin
	main_67_68 = main_altfp_add_32_0;
end
always @(*) begin
	main_67_69 = main_altfp_divide_32_0;
end
always @(*) begin
	main_67_70 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_67_71 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_72_73 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_72_74 = main_altfp_divide_32_0;
end
always @(*) begin
	main_72_75 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_72_76 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_72_77 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %72*/
	/*   %78 = icmp sgt i32 %k.i.i.1, -126*/
		main_72_78 = ($signed(main_53_kii1_reg) > $signed(-32'd126));
end
always @(posedge clk) begin
	/* main: %72*/
	/*   %78 = icmp sgt i32 %k.i.i.1, -126*/
	if ((cur_state == LEGUP_F_main_BB__72_381)) begin
		main_72_78_reg <= main_72_78;
		if (start == 1'b0 && ^(main_72_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %72*/
	/*   %79 = bitcast float %77 to i32*/
		main_72_79 = main_72_77;
end
always @(posedge clk) begin
	/* main: %72*/
	/*   %79 = bitcast float %77 to i32*/
	if ((cur_state == LEGUP_F_main_BB__72_470)) begin
		main_72_79_reg <= main_72_79;
		if (start == 1'b0 && ^(main_72_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %72*/
	/*   %80 = shl i32 %k.i.i.1, 23*/
		main_72_80 = (main_53_kii1_reg <<< (32'd23 % 32));
end
always @(posedge clk) begin
	/* main: %72*/
	/*   %80 = shl i32 %k.i.i.1, 23*/
	if ((cur_state == LEGUP_F_main_BB__72_381)) begin
		main_72_80_reg <= main_72_80;
		if (start == 1'b0 && ^(main_72_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_72_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %81*/
	/*   %82 = add i32 %79, %80*/
		main_81_82 = (main_72_79_reg + main_72_80_reg);
end
always @(*) begin
	/* main: %81*/
	/*   %83 = bitcast i32 %82 to float*/
		main_81_83 = main_81_82;
end
always @(*) begin
	/* main: %84*/
	/*   %85 = add i32 %80, 838860800*/
		main_84_85 = (main_72_80_reg + 32'd838860800);
end
always @(*) begin
	/* main: %84*/
	/*   %86 = add i32 %79, %85*/
		main_84_86 = (main_72_79_reg + main_84_85);
end
always @(*) begin
	/* main: %84*/
	/*   %87 = bitcast i32 %86 to float*/
		main_84_87 = main_84_86;
end
always @(*) begin
	main_84_88 = main_altfp_multiply_32_0;
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3 = main_fusion1loop_bodydim1_loii0_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__17_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3 = main_fusion1loop_bodydim1_loii0_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__19_40) & (memory_controller_waitrequest == 1'd0)) & (main_19_20 == 1'd1))) begin
		main_expfexit_loii3 = main_fusion1loop_bodydim1_loii0_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__21_41) & (memory_controller_waitrequest == 1'd0)) & (main_21_orcond == 1'd1))) begin
		main_expfexit_loii3 = main_fusion1loop_bodydim1_loii0_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__51_156) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3 = main_fusion1loop_bodydim1_loii0_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__67_380) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3 = main_53_loii2_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__81_471) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3 = main_53_loii2_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__84_483) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_expfexit_loii3 = main_53_loii2_reg;
	end
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__17_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__19_40) & (memory_controller_waitrequest == 1'd0)) & (main_19_20 == 1'd1))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_41) & (memory_controller_waitrequest == 1'd0)) & (main_21_orcond == 1'd1))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__51_156) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__67_380) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__81_471) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %13 ], [ %lo.i.i.2, %67 ], [ %lo.i.i.2, %81 ], [ %lo.i.i.2, %84 ], [ %lo.i.i.0, %51 ], [ %lo.i.i.0, %19 ], [ %lo.i.i.0, %17 ], [ %lo.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__84_483) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3 = main_fusion1loop_bodydim1_hiii0_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__17_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3 = main_fusion1loop_bodydim1_hiii0_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__19_40) & (memory_controller_waitrequest == 1'd0)) & (main_19_20 == 1'd1))) begin
		main_expfexit_hiii3 = main_fusion1loop_bodydim1_hiii0_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__21_41) & (memory_controller_waitrequest == 1'd0)) & (main_21_orcond == 1'd1))) begin
		main_expfexit_hiii3 = main_fusion1loop_bodydim1_hiii0_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__51_156) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3 = main_fusion1loop_bodydim1_hiii0_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__67_380) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3 = main_53_hiii2_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__81_471) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3 = main_53_hiii2_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__84_483) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_expfexit_hiii3 = main_53_hiii2_reg;
	end
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__17_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__19_40) & (memory_controller_waitrequest == 1'd0)) & (main_19_20 == 1'd1))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_41) & (memory_controller_waitrequest == 1'd0)) & (main_21_orcond == 1'd1))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__51_156) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__67_380) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__81_471) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %13 ], [ %hi.i.i.2, %67 ], [ %hi.i.i.2, %81 ], [ %hi.i.i.2, %84 ], [ %hi.i.i.0, %51 ], [ %hi.i.i.0, %19 ], [ %hi.i.i.0, %17 ], [ %hi.i.i.0, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__84_483) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0 = main_13_14;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__17_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0 = main_17_;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__19_40) & (memory_controller_waitrequest == 1'd0)) & (main_19_20 == 1'd1))) begin
		main_expfexit_0 = 32'h7F800000;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__21_41) & (memory_controller_waitrequest == 1'd0)) & (main_21_orcond == 1'd1))) begin
		main_expfexit_0 = 32'h0;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__51_156) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0 = main_51_52;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__67_380) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0 = main_67_71;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	else if (((cur_state == LEGUP_F_main_BB__81_471) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0 = main_81_83;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__84_483) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_expfexit_0 = main_84_88;
	end
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__13_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__17_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__19_40) & (memory_controller_waitrequest == 1'd0)) & (main_19_20 == 1'd1))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_41) & (memory_controller_waitrequest == 1'd0)) & (main_21_orcond == 1'd1))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__51_156) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__67_380) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__81_471) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %14, %13 ], [ %71, %67 ], [ %83, %81 ], [ %88, %84 ], [ %52, %51 ], [ 0x7FF0000000000000, %19 ], [ %., %17 ], [ 0.000000e+00, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB__84_483) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %89 = add nuw nsw i64 %fusion.1.indvar.dim.18, 1*/
		main_expfexit_89 = (main_fusion1loop_bodydim1_fusion1indvardim18_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %89 = add nuw nsw i64 %fusion.1.indvar.dim.18, 1*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_484)) begin
		main_expfexit_89_reg <= main_expfexit_89;
		if (start == 1'b0 && ^(main_expfexit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %exitcond6 = icmp eq i64 %89, 64*/
		main_expfexit_exitcond6 = (main_expfexit_89 == 64'd64);
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %exitcond6 = icmp eq i64 %89, 64*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_484)) begin
		main_expfexit_exitcond6_reg <= main_expfexit_exitcond6;
		if (start == 1'b0 && ^(main_expfexit_exitcond6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_exitcond6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %90 = phi float [ %92, %reduce.1.inner.loop_body.reduction_dim.1 ], [ 0.000000e+00, %reduce.1.inner.loop_body.reduction_dim.1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1preheader_486) & (memory_controller_waitrequest == 1'd0))) begin
		main_reduce1innerloop_bodyreduction_dim1_90 = 32'h0;
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %90 = phi float [ %92, %reduce.1.inner.loop_body.reduction_dim.1 ], [ 0.000000e+00, %reduce.1.inner.loop_body.reduction_dim.1.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_503) & (memory_controller_waitrequest == 1'd0)) & (main_reduce1innerloop_bodyreduction_dim1_exitcond_reg == 1'd0))) */ begin
		main_reduce1innerloop_bodyreduction_dim1_90 = main_reduce1innerloop_bodyreduction_dim1_92;
	end
end
always @(posedge clk) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %90 = phi float [ %92, %reduce.1.inner.loop_body.reduction_dim.1 ], [ 0.000000e+00, %reduce.1.inner.loop_body.reduction_dim.1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1preheader_486) & (memory_controller_waitrequest == 1'd0))) begin
		main_reduce1innerloop_bodyreduction_dim1_90_reg <= main_reduce1innerloop_bodyreduction_dim1_90;
		if (start == 1'b0 && ^(main_reduce1innerloop_bodyreduction_dim1_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduce1innerloop_bodyreduction_dim1_90_reg"); $finish; end
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %90 = phi float [ %92, %reduce.1.inner.loop_body.reduction_dim.1 ], [ 0.000000e+00, %reduce.1.inner.loop_body.reduction_dim.1.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_503) & (memory_controller_waitrequest == 1'd0)) & (main_reduce1innerloop_bodyreduction_dim1_exitcond_reg == 1'd0))) begin
		main_reduce1innerloop_bodyreduction_dim1_90_reg <= main_reduce1innerloop_bodyreduction_dim1_90;
		if (start == 1'b0 && ^(main_reduce1innerloop_bodyreduction_dim1_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduce1innerloop_bodyreduction_dim1_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %reduce.1.inner.indvar.reduction_dim.14 = phi i64 [ %93, %reduce.1.inner.loop_body.reduction_dim.1 ], [ 0, %reduce.1.inner.loop_body.reduction_dim.1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1preheader_486) & (memory_controller_waitrequest == 1'd0))) begin
		main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14 = 64'd0;
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %reduce.1.inner.indvar.reduction_dim.14 = phi i64 [ %93, %reduce.1.inner.loop_body.reduction_dim.1 ], [ 0, %reduce.1.inner.loop_body.reduction_dim.1.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_503) & (memory_controller_waitrequest == 1'd0)) & (main_reduce1innerloop_bodyreduction_dim1_exitcond_reg == 1'd0))) */ begin
		main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14 = main_reduce1innerloop_bodyreduction_dim1_93_reg;
	end
end
always @(posedge clk) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %reduce.1.inner.indvar.reduction_dim.14 = phi i64 [ %93, %reduce.1.inner.loop_body.reduction_dim.1 ], [ 0, %reduce.1.inner.loop_body.reduction_dim.1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1preheader_486) & (memory_controller_waitrequest == 1'd0))) begin
		main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14_reg <= main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14;
		if (start == 1'b0 && ^(main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14_reg"); $finish; end
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %reduce.1.inner.indvar.reduction_dim.14 = phi i64 [ %93, %reduce.1.inner.loop_body.reduction_dim.1 ], [ 0, %reduce.1.inner.loop_body.reduction_dim.1.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_503) & (memory_controller_waitrequest == 1'd0)) & (main_reduce1innerloop_bodyreduction_dim1_exitcond_reg == 1'd0))) begin
		main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14_reg <= main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14;
		if (start == 1'b0 && ^(main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %scevgep3 = getelementptr [1 x [64 x float]]* @temp1, i64 0, i64 0, i64 %reduce.1.inner.indvar.reduction_dim.14*/
		main_reduce1innerloop_bodyreduction_dim1_scevgep3 = (`TAG_g_temp1_a + (64'd4 * main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14_reg));
end
always @(*) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %91 = load float* %scevgep3, align 4*/
		main_reduce1innerloop_bodyreduction_dim1_91 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_reduce1innerloop_bodyreduction_dim1_92 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %92 = fadd float %90, %91*/
	if ((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_503)) begin
		main_reduce1innerloop_bodyreduction_dim1_92_reg <= main_reduce1innerloop_bodyreduction_dim1_92;
		if (start == 1'b0 && ^(main_reduce1innerloop_bodyreduction_dim1_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduce1innerloop_bodyreduction_dim1_92_reg"); $finish; end
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %92 = fadd float %90, %91*/
	if ((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_503)) begin
		main_reduce1innerloop_bodyreduction_dim1_92_reg <= main_reduce1innerloop_bodyreduction_dim1_92;
		if (start == 1'b0 && ^(main_reduce1innerloop_bodyreduction_dim1_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduce1innerloop_bodyreduction_dim1_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %93 = add nuw nsw i64 %reduce.1.inner.indvar.reduction_dim.14, 1*/
		main_reduce1innerloop_bodyreduction_dim1_93 = (main_reduce1innerloop_bodyreduction_dim1_reduce1innerindvarreduction_dim14_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %93 = add nuw nsw i64 %reduce.1.inner.indvar.reduction_dim.14, 1*/
	if ((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_487)) begin
		main_reduce1innerloop_bodyreduction_dim1_93_reg <= main_reduce1innerloop_bodyreduction_dim1_93;
		if (start == 1'b0 && ^(main_reduce1innerloop_bodyreduction_dim1_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduce1innerloop_bodyreduction_dim1_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %exitcond = icmp eq i64 %93, 64*/
		main_reduce1innerloop_bodyreduction_dim1_exitcond = (main_reduce1innerloop_bodyreduction_dim1_93 == 64'd64);
end
always @(posedge clk) begin
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %exitcond = icmp eq i64 %93, 64*/
	if ((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_487)) begin
		main_reduce1innerloop_bodyreduction_dim1_exitcond_reg <= main_reduce1innerloop_bodyreduction_dim1_exitcond;
		if (start == 1'b0 && ^(main_reduce1innerloop_bodyreduction_dim1_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_reduce1innerloop_bodyreduction_dim1_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %fusion.indvar.dim.02 = phi i64 [ %96, %fusion.loop_body.dim.0 ], [ 0, %fusion.loop_body.dim.0.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0preheader_504) & (memory_controller_waitrequest == 1'd0))) begin
		main_fusionloop_bodydim0_fusionindvardim02 = 64'd0;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %fusion.indvar.dim.02 = phi i64 [ %96, %fusion.loop_body.dim.0 ], [ 0, %fusion.loop_body.dim.0.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_541) & (memory_controller_waitrequest == 1'd0)) & (main_fusionloop_bodydim0_exitcond1_reg == 1'd0))) */ begin
		main_fusionloop_bodydim0_fusionindvardim02 = main_fusionloop_bodydim0_96_reg;
	end
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %fusion.indvar.dim.02 = phi i64 [ %96, %fusion.loop_body.dim.0 ], [ 0, %fusion.loop_body.dim.0.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0preheader_504) & (memory_controller_waitrequest == 1'd0))) begin
		main_fusionloop_bodydim0_fusionindvardim02_reg <= main_fusionloop_bodydim0_fusionindvardim02;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_fusionindvardim02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_fusionindvardim02_reg"); $finish; end
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %fusion.indvar.dim.02 = phi i64 [ %96, %fusion.loop_body.dim.0 ], [ 0, %fusion.loop_body.dim.0.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_541) & (memory_controller_waitrequest == 1'd0)) & (main_fusionloop_bodydim0_exitcond1_reg == 1'd0))) begin
		main_fusionloop_bodydim0_fusionindvardim02_reg <= main_fusionloop_bodydim0_fusionindvardim02;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_fusionindvardim02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_fusionindvardim02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %scevgep = getelementptr [64 x float]* @temp3, i64 0, i64 %fusion.indvar.dim.02*/
		main_fusionloop_bodydim0_scevgep = (`TAG_g_temp3_a + (64'd4 * main_fusionloop_bodydim0_fusionindvardim02_reg));
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %scevgep = getelementptr [64 x float]* @temp3, i64 0, i64 %fusion.indvar.dim.02*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_505)) begin
		main_fusionloop_bodydim0_scevgep_reg <= main_fusionloop_bodydim0_scevgep;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %scevgep2 = getelementptr [1 x [64 x float]]* @temp1, i64 0, i64 0, i64 %fusion.indvar.dim.02*/
		main_fusionloop_bodydim0_scevgep2 = (`TAG_g_temp1_a + (64'd4 * main_fusionloop_bodydim0_fusionindvardim02_reg));
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %94 = load float* %scevgep2, align 4*/
		main_fusionloop_bodydim0_94 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_fusionloop_bodydim0_95 = main_altfp_divide_32_0;
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %96 = add nuw nsw i64 %fusion.indvar.dim.02, 1*/
		main_fusionloop_bodydim0_96 = (main_fusionloop_bodydim0_fusionindvardim02_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %96 = add nuw nsw i64 %fusion.indvar.dim.02, 1*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_505)) begin
		main_fusionloop_bodydim0_96_reg <= main_fusionloop_bodydim0_96;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %exitcond1 = icmp eq i64 %96, 64*/
		main_fusionloop_bodydim0_exitcond1 = (main_fusionloop_bodydim0_96 == 64'd64);
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %exitcond1 = icmp eq i64 %96, 64*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_505)) begin
		main_fusionloop_bodydim0_exitcond1_reg <= main_fusionloop_bodydim0_exitcond1;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp3, i64 0, i64 0), align 8*/
		main_fusionloop_exitdim0_leflow_retval = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %8 = fsub float %7, %5*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_8)) begin
		main_altfp_subtract_32_0_op0 = main_fusion1loop_bodydim1_7;
	end
	/* main: %45*/
	/*   %hi.i.i.1 = fsub float %8, %.pn*/
	else if ((cur_state == LEGUP_F_main_BB__45_97)) begin
		main_altfp_subtract_32_0_op0 = main_fusion1loop_bodydim1_8_reg;
	end
	/* main: %45*/
	/*   %46 = fsub float %hi.i.i.1, %lo.i.i.1*/
	else if ((cur_state == LEGUP_F_main_BB__45_111)) begin
		main_altfp_subtract_32_0_op0 = main_45_hiii1;
	end
	/* main: %53*/
	/*   %64 = fsub float %.048, %63*/
	else if ((cur_state == LEGUP_F_main_BB__53_279)) begin
		main_altfp_subtract_32_0_op0 = main_53_048_reg;
	end
	/* main: %67*/
	/*   %70 = fsub float %69, %.048*/
	else if ((cur_state == LEGUP_F_main_BB__67_352)) begin
		main_altfp_subtract_32_0_op0 = main_67_69;
	end
	/* main: %67*/
	/*   %71 = fsub float 1.000000e+00, %70*/
	else if ((cur_state == LEGUP_F_main_BB__67_366)) begin
		main_altfp_subtract_32_0_op0 = 32'h3F800000;
	end
	/* main: %72*/
	/*   %73 = fsub float 2.000000e+00, %64*/
	else if ((cur_state == LEGUP_F_main_BB__72_381)) begin
		main_altfp_subtract_32_0_op0 = 32'h40000000;
	end
	/* main: %72*/
	/*   %75 = fsub float %lo.i.i.2, %74*/
	else if ((cur_state == LEGUP_F_main_BB__72_428)) begin
		main_altfp_subtract_32_0_op0 = main_53_loii2_reg;
	end
	/* main: %72*/
	/*   %76 = fsub float %75, %hi.i.i.2*/
	else if ((cur_state == LEGUP_F_main_BB__72_442)) begin
		main_altfp_subtract_32_0_op0 = main_72_75;
	end
	/* main: %72*/
	/*   %77 = fsub float 1.000000e+00, %76*/
	else /* if ((cur_state == LEGUP_F_main_BB__72_456)) */ begin
		main_altfp_subtract_32_0_op0 = 32'h3F800000;
	end
end
always @(*) begin
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %8 = fsub float %7, %5*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_8)) begin
		main_altfp_subtract_32_0_op1 = main_reduceinnerloop_bodyreduction_dim1_5_reg;
	end
	/* main: %45*/
	/*   %hi.i.i.1 = fsub float %8, %.pn*/
	else if ((cur_state == LEGUP_F_main_BB__45_97)) begin
		main_altfp_subtract_32_0_op1 = main_45_pn_reg;
	end
	/* main: %45*/
	/*   %46 = fsub float %hi.i.i.1, %lo.i.i.1*/
	else if ((cur_state == LEGUP_F_main_BB__45_111)) begin
		main_altfp_subtract_32_0_op1 = main_45_loii1_reg;
	end
	/* main: %53*/
	/*   %64 = fsub float %.048, %63*/
	else if ((cur_state == LEGUP_F_main_BB__53_279)) begin
		main_altfp_subtract_32_0_op1 = main_53_63;
	end
	/* main: %67*/
	/*   %70 = fsub float %69, %.048*/
	else if ((cur_state == LEGUP_F_main_BB__67_352)) begin
		main_altfp_subtract_32_0_op1 = main_53_048_reg;
	end
	/* main: %67*/
	/*   %71 = fsub float 1.000000e+00, %70*/
	else if ((cur_state == LEGUP_F_main_BB__67_366)) begin
		main_altfp_subtract_32_0_op1 = main_67_70;
	end
	/* main: %72*/
	/*   %73 = fsub float 2.000000e+00, %64*/
	else if ((cur_state == LEGUP_F_main_BB__72_381)) begin
		main_altfp_subtract_32_0_op1 = main_53_64_reg;
	end
	/* main: %72*/
	/*   %75 = fsub float %lo.i.i.2, %74*/
	else if ((cur_state == LEGUP_F_main_BB__72_428)) begin
		main_altfp_subtract_32_0_op1 = main_72_74;
	end
	/* main: %72*/
	/*   %76 = fsub float %75, %hi.i.i.2*/
	else if ((cur_state == LEGUP_F_main_BB__72_442)) begin
		main_altfp_subtract_32_0_op1 = main_53_hiii2_reg;
	end
	/* main: %72*/
	/*   %77 = fsub float 1.000000e+00, %76*/
	else /* if ((cur_state == LEGUP_F_main_BB__72_456)) */ begin
		main_altfp_subtract_32_0_op1 = main_72_76;
	end
end
always @(*) begin
	altfp_main_fusion1loop_bodydim1_8_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_subtract_32_0 = altfp_subtractor_main_fusion1loop_bodydim1_8_out;
end
always @(*) begin
	/* main: %35*/
	/*   %36 = fmul float %8, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_main_BB__35_47)) begin
		main_altfp_multiply_32_0_op0 = main_fusion1loop_bodydim1_8_reg;
	end
	/* main: %35*/
	/*   %43 = fmul float %42, 0x3FE62E3000000000*/
	else if ((cur_state == LEGUP_F_main_BB__35_84)) begin
		main_altfp_multiply_32_0_op0 = main_35_42;
	end
	/* main: %35*/
	/*   %44 = fmul float %42, 0x3EE2FEFA20000000*/
	else if ((cur_state == LEGUP_F_main_BB__35_85)) begin
		main_altfp_multiply_32_0_op0 = main_35_42_reg;
	end
	/* main: %53*/
	/*   %54 = fmul float %.048, %.048*/
	else if ((cur_state == LEGUP_F_main_BB__53_157)) begin
		main_altfp_multiply_32_0_op0 = main_53_048_reg;
	end
	/* main: %53*/
	/*   %55 = fmul float %54, 0x3E66376980000000*/
	else if ((cur_state == LEGUP_F_main_BB__53_168)) begin
		main_altfp_multiply_32_0_op0 = main_53_54;
	end
	/* main: %53*/
	/*   %57 = fmul float %54, %56*/
	else if ((cur_state == LEGUP_F_main_BB__53_193)) begin
		main_altfp_multiply_32_0_op0 = main_53_54_reg;
	end
	/* main: %53*/
	/*   %59 = fmul float %54, %58*/
	else if ((cur_state == LEGUP_F_main_BB__53_218)) begin
		main_altfp_multiply_32_0_op0 = main_53_54_reg;
	end
	/* main: %53*/
	/*   %61 = fmul float %54, %60*/
	else if ((cur_state == LEGUP_F_main_BB__53_243)) begin
		main_altfp_multiply_32_0_op0 = main_53_54_reg;
	end
	/* main: %53*/
	/*   %63 = fmul float %54, %62*/
	else if ((cur_state == LEGUP_F_main_BB__53_268)) begin
		main_altfp_multiply_32_0_op0 = main_53_54_reg;
	end
	/* main: %53*/
	/*   %66 = fmul float %.048, %64*/
	else if ((cur_state == LEGUP_F_main_BB__53_293)) begin
		main_altfp_multiply_32_0_op0 = main_53_048_reg;
	end
	/* main: %84*/
	/*   %88 = fmul float %87, 0x39B0000000000000*/
	else /* if ((cur_state == LEGUP_F_main_BB__84_472)) */ begin
		main_altfp_multiply_32_0_op0 = main_84_87;
	end
end
always @(*) begin
	/* main: %35*/
	/*   %36 = fmul float %8, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_main_BB__35_47)) begin
		main_altfp_multiply_32_0_op1 = 32'h3FB8AA3B;
	end
	/* main: %35*/
	/*   %43 = fmul float %42, 0x3FE62E3000000000*/
	else if ((cur_state == LEGUP_F_main_BB__35_84)) begin
		main_altfp_multiply_32_0_op1 = 32'h3F317180;
	end
	/* main: %35*/
	/*   %44 = fmul float %42, 0x3EE2FEFA20000000*/
	else if ((cur_state == LEGUP_F_main_BB__35_85)) begin
		main_altfp_multiply_32_0_op1 = 32'h3717F7D1;
	end
	/* main: %53*/
	/*   %54 = fmul float %.048, %.048*/
	else if ((cur_state == LEGUP_F_main_BB__53_157)) begin
		main_altfp_multiply_32_0_op1 = main_53_048_reg;
	end
	/* main: %53*/
	/*   %55 = fmul float %54, 0x3E66376980000000*/
	else if ((cur_state == LEGUP_F_main_BB__53_168)) begin
		main_altfp_multiply_32_0_op1 = 32'h3331BB4C;
	end
	/* main: %53*/
	/*   %57 = fmul float %54, %56*/
	else if ((cur_state == LEGUP_F_main_BB__53_193)) begin
		main_altfp_multiply_32_0_op1 = main_53_56;
	end
	/* main: %53*/
	/*   %59 = fmul float %54, %58*/
	else if ((cur_state == LEGUP_F_main_BB__53_218)) begin
		main_altfp_multiply_32_0_op1 = main_53_58;
	end
	/* main: %53*/
	/*   %61 = fmul float %54, %60*/
	else if ((cur_state == LEGUP_F_main_BB__53_243)) begin
		main_altfp_multiply_32_0_op1 = main_53_60;
	end
	/* main: %53*/
	/*   %63 = fmul float %54, %62*/
	else if ((cur_state == LEGUP_F_main_BB__53_268)) begin
		main_altfp_multiply_32_0_op1 = main_53_62;
	end
	/* main: %53*/
	/*   %66 = fmul float %.048, %64*/
	else if ((cur_state == LEGUP_F_main_BB__53_293)) begin
		main_altfp_multiply_32_0_op1 = main_53_64;
	end
	/* main: %84*/
	/*   %88 = fmul float %87, 0x39B0000000000000*/
	else /* if ((cur_state == LEGUP_F_main_BB__84_472)) */ begin
		main_altfp_multiply_32_0_op1 = 32'hD800000;
	end
end
always @(*) begin
	altfp_main_35_36_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_multiply_32_0 = altfp_multiplier_main_35_36_out;
end
always @(*) begin
	/* main: %13*/
	/*   %14 = fadd float %8, %8*/
	if ((cur_state == LEGUP_F_main_BB__13_23)) begin
		main_altfp_add_32_0_op0 = main_fusion1loop_bodydim1_8_reg;
	end
	/* main: %35*/
	/*   %40 = fadd float %36, %39*/
	else if ((cur_state == LEGUP_F_main_BB__35_58)) begin
		main_altfp_add_32_0_op0 = main_35_36;
	end
	/* main: %47*/
	/*   %49 = fadd float %8, 0x46293E5940000000*/
	else if ((cur_state == LEGUP_F_main_BB__47_126)) begin
		main_altfp_add_32_0_op0 = main_fusion1loop_bodydim1_8_reg;
	end
	/* main: %51*/
	/*   %52 = fadd float %8, 1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__51_142)) begin
		main_altfp_add_32_0_op0 = main_fusion1loop_bodydim1_8_reg;
	end
	/* main: %53*/
	/*   %56 = fadd float %55, 0xBEBBBD41C0000000*/
	else if ((cur_state == LEGUP_F_main_BB__53_179)) begin
		main_altfp_add_32_0_op0 = main_53_55;
	end
	/* main: %53*/
	/*   %58 = fadd float %57, 0x3F11566AA0000000*/
	else if ((cur_state == LEGUP_F_main_BB__53_204)) begin
		main_altfp_add_32_0_op0 = main_53_57;
	end
	/* main: %53*/
	/*   %60 = fadd float %59, 0xBF66C16C20000000*/
	else if ((cur_state == LEGUP_F_main_BB__53_229)) begin
		main_altfp_add_32_0_op0 = main_53_59;
	end
	/* main: %53*/
	/*   %62 = fadd float %61, 0x3FC5555560000000*/
	else if ((cur_state == LEGUP_F_main_BB__53_254)) begin
		main_altfp_add_32_0_op0 = main_53_61;
	end
	/* main: %67*/
	/*   %68 = fadd float %64, -2.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__67_305)) begin
		main_altfp_add_32_0_op0 = main_53_64_reg;
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %92 = fadd float %90, %91*/
	else /* if ((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_489)) */ begin
		main_altfp_add_32_0_op0 = main_reduce1innerloop_bodyreduction_dim1_90_reg;
	end
end
always @(*) begin
	/* main: %13*/
	/*   %14 = fadd float %8, %8*/
	if ((cur_state == LEGUP_F_main_BB__13_23)) begin
		main_altfp_add_32_0_op1 = main_fusion1loop_bodydim1_8_reg;
	end
	/* main: %35*/
	/*   %40 = fadd float %36, %39*/
	else if ((cur_state == LEGUP_F_main_BB__35_58)) begin
		main_altfp_add_32_0_op1 = main_35_39_reg;
	end
	/* main: %47*/
	/*   %49 = fadd float %8, 0x46293E5940000000*/
	else if ((cur_state == LEGUP_F_main_BB__47_126)) begin
		main_altfp_add_32_0_op1 = 32'h7149F2CA;
	end
	/* main: %51*/
	/*   %52 = fadd float %8, 1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__51_142)) begin
		main_altfp_add_32_0_op1 = 32'h3F800000;
	end
	/* main: %53*/
	/*   %56 = fadd float %55, 0xBEBBBD41C0000000*/
	else if ((cur_state == LEGUP_F_main_BB__53_179)) begin
		main_altfp_add_32_0_op1 = 32'hB5DDEA0E;
	end
	/* main: %53*/
	/*   %58 = fadd float %57, 0x3F11566AA0000000*/
	else if ((cur_state == LEGUP_F_main_BB__53_204)) begin
		main_altfp_add_32_0_op1 = 32'h388AB355;
	end
	/* main: %53*/
	/*   %60 = fadd float %59, 0xBF66C16C20000000*/
	else if ((cur_state == LEGUP_F_main_BB__53_229)) begin
		main_altfp_add_32_0_op1 = 32'hBB360B61;
	end
	/* main: %53*/
	/*   %62 = fadd float %61, 0x3FC5555560000000*/
	else if ((cur_state == LEGUP_F_main_BB__53_254)) begin
		main_altfp_add_32_0_op1 = 32'h3E2AAAAB;
	end
	/* main: %67*/
	/*   %68 = fadd float %64, -2.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__67_305)) begin
		main_altfp_add_32_0_op1 = 32'hC0000000;
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %92 = fadd float %90, %91*/
	else /* if ((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_489)) */ begin
		main_altfp_add_32_0_op1 = main_reduce1innerloop_bodyreduction_dim1_91;
	end
end
always @(*) begin
	altfp_main_35_40_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_32_0 = altfp_adder_main_35_40_out;
end
always @(*) begin
	/* main: %35*/
	/*   %41 = fptosi float %40 to i32*/
		main_altfp_fptosi_32_0_op0 = main_35_40;
end
always @(*) begin
	altfp_main_35_41_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_fptosi_32_0 = altfp_fptosi32_main_35_41_out;
end
always @(*) begin
	/* main: %35*/
	/*   %42 = sitofp i32 %41 to float*/
		main_altfp_sitofp_32_0_op0 = main_35_41;
end
always @(*) begin
	altfp_main_35_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_sitofp_32_0 = altfp_sitofp32_main_35_42_out;
end
always @(*) begin
	/* main: %67*/
	/*   %69 = fdiv float %66, %68*/
	if ((cur_state == LEGUP_F_main_BB__67_319)) begin
		main_altfp_divide_32_0_op0 = main_53_66_reg;
	end
	/* main: %72*/
	/*   %74 = fdiv float %66, %73*/
	else if ((cur_state == LEGUP_F_main_BB__72_395)) begin
		main_altfp_divide_32_0_op0 = main_53_66_reg;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %95 = fdiv float %94, %92*/
	else /* if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_507)) */ begin
		main_altfp_divide_32_0_op0 = main_fusionloop_bodydim0_94;
	end
end
always @(*) begin
	/* main: %67*/
	/*   %69 = fdiv float %66, %68*/
	if ((cur_state == LEGUP_F_main_BB__67_319)) begin
		main_altfp_divide_32_0_op1 = main_67_68;
	end
	/* main: %72*/
	/*   %74 = fdiv float %66, %73*/
	else if ((cur_state == LEGUP_F_main_BB__72_395)) begin
		main_altfp_divide_32_0_op1 = main_72_73;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %95 = fdiv float %94, %92*/
	else /* if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_507)) */ begin
		main_altfp_divide_32_0_op1 = main_reduce1innerloop_bodyreduction_dim1_92_reg;
	end
end
always @(*) begin
	altfp_main_fusionloop_bodydim0_95_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_divide_32_0 = altfp_divider_main_fusionloop_bodydim0_95_out;
end
always @(*) begin
	altfp_main_reduceinnerloop_bodyreduction_dim1_3_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_reduceinnerloop_bodyreduction_dim1_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_47_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   ret float %leflow_retval*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_544)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %1 = load volatile float* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %7 = load volatile float* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %27*/
	/*   %30 = load float* %29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %91 = load float* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_487)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %94 = load float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_505)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp3, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_542)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %1 = load volatile float* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_1)) begin
		memory_controller_address_a = main_reduceinnerloop_bodyreduction_dim1_scevgep10;
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %7 = load volatile float* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_6)) begin
		memory_controller_address_a = main_fusion1loop_bodydim1_scevgep8;
	end
	/* main: %27*/
	/*   %30 = load float* %29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_44)) begin
		memory_controller_address_a = main_27_29;
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %91 = load float* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_487)) begin
		memory_controller_address_a = main_reduce1innerloop_bodyreduction_dim1_scevgep3;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %94 = load float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_505)) begin
		memory_controller_address_a = main_fusionloop_bodydim0_scevgep2;
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp3, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_542)) begin
		memory_controller_address_a = `TAG_g_temp3_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %1 = load volatile float* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %7 = load volatile float* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %27*/
	/*   %30 = load float* %29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_44)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %91 = load float* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_487)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %94 = load float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_505)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp3, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_542)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %reduce.inner.loop_body.reduction_dim.1*/
	/*   %1 = load volatile float* %scevgep10, align 4*/
	if ((cur_state == LEGUP_F_main_BB_reduceinnerloop_bodyreduction_dim1_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %fusion.1.loop_body.dim.1*/
	/*   %7 = load volatile float* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusion1loop_bodydim1_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %27*/
	/*   %30 = load float* %29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %reduce.1.inner.loop_body.reduction_dim.1*/
	/*   %91 = load float* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB_reduce1innerloop_bodyreduction_dim1_487)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %94 = load float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_505)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([64 x float]* @temp3, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_542)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %27*/
	/*   %32 = load float* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %35*/
	/*   %39 = load float* %38, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %expf.exit*/
	/*   store float %.0, float* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_484)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   store volatile float %95, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_540)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %27*/
	/*   %32 = load float* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_44)) begin
		memory_controller_address_b = main_27_31;
	end
	/* main: %35*/
	/*   %39 = load float* %38, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_47)) begin
		memory_controller_address_b = main_35_38;
	end
	/* main: %expf.exit*/
	/*   store float %.0, float* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_484)) begin
		memory_controller_address_b = main_fusion1loop_bodydim1_scevgep7_reg;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   store volatile float %95, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_540)) begin
		memory_controller_address_b = main_fusionloop_bodydim0_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %27*/
	/*   %32 = load float* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_44)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %35*/
	/*   %39 = load float* %38, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_47)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %expf.exit*/
	/*   store float %.0, float* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_484)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   store volatile float %95, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_540)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %expf.exit*/
	/*   store float %.0, float* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_484)) begin
		memory_controller_in_b = main_expfexit_0_reg;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   store volatile float %95, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_540)) begin
		memory_controller_in_b = main_fusionloop_bodydim0_95;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %27*/
	/*   %32 = load float* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_44)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %35*/
	/*   %39 = load float* %38, align 4*/
	if ((cur_state == LEGUP_F_main_BB__35_47)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %expf.exit*/
	/*   store float %.0, float* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_484)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   store volatile float %95, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_540)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   ret float %leflow_retval*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_544)) begin
		return_val <= main_fusionloop_exitdim0_leflow_retval;
		if (start == 1'b0 && ^(main_fusionloop_exitdim0_leflow_retval) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $writememh("memory_dump.txt",top_inst.memory_controller_inst.temp3.ram);
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
