//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Aug 11 21:36:19 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 64
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 5
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @halF33 = internal unnamed_addr constant [2 x float] [float 5.000000e-01, float -5.000000e-01], align 4
`define TAG_g_halF33 `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_halF33_a {`TAG_g_halF33, 55'd0}
// @ln2HI31 = internal unnamed_addr constant [2 x float] [float 0x3FE62E3000000000, float 0xBFE62E3000000000], align 4
`define TAG_g_ln2HI31 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_ln2HI31_a {`TAG_g_ln2HI31, 55'd0}
// @ln2LO32 = internal unnamed_addr constant [2 x float] [float 0x3EE2FEFA20000000, float 0xBEE2FEFA20000000], align 4
`define TAG_g_ln2LO32 `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_ln2LO32_a {`TAG_g_ln2LO32, 55'd0}
// @param0 = internal global [8 x float] zeroinitializer, align 8
`define TAG_g_param0 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_param0_a {`TAG_g_param0, 55'd0}
// @temp0 = internal global [8 x float] zeroinitializer, align 8
`define TAG_g_temp0 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_temp0_a {`TAG_g_temp0, 55'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] temp0_address_a;
reg [2:0] temp0_address_b;
reg temp0_write_enable_a;
reg temp0_write_enable_b;
reg [31:0] temp0_in_a;
reg [31:0] temp0_in_b;
wire [31:0] temp0_out_a;
wire [31:0] temp0_out_b;

// @temp0 = internal global [8 x float] zeroinitializer, align 8
ram_dual_port temp0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( temp0_address_a ),
	.address_b( temp0_address_b ),
	.wren_a( temp0_write_enable_a ),
	.wren_b( temp0_write_enable_b ),
	.data_a( temp0_in_a ),
	.data_b( temp0_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( temp0_out_a ),
	.q_b( temp0_out_b)
);
defparam temp0.width_a = 32;
defparam temp0.width_b = 32;
defparam temp0.widthad_a = 3;
defparam temp0.widthad_b = 3;
defparam temp0.width_be_a = 1;
defparam temp0.width_be_b = 1;
defparam temp0.numwords_a = 8;
defparam temp0.numwords_b = 8;
defparam temp0.latency = ram_latency;
defparam temp0.init_file = "temp0.mif";

reg [2:0] param0_address_a;
reg [2:0] param0_address_b;
reg param0_write_enable_a;
reg param0_write_enable_b;
reg [31:0] param0_in_a;
reg [31:0] param0_in_b;
wire [31:0] param0_out_a;
wire [31:0] param0_out_b;

// @param0 = internal global [8 x float] zeroinitializer, align 8
ram_dual_port param0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( param0_address_a ),
	.address_b( param0_address_b ),
	.wren_a( param0_write_enable_a ),
	.wren_b( param0_write_enable_b ),
	.data_a( param0_in_a ),
	.data_b( param0_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( param0_out_a ),
	.q_b( param0_out_b)
);
defparam param0.width_a = 32;
defparam param0.width_b = 32;
defparam param0.widthad_a = 3;
defparam param0.widthad_b = 3;
defparam param0.width_be_a = 1;
defparam param0.width_be_b = 1;
defparam param0.numwords_a = 8;
defparam param0.numwords_b = 8;
defparam param0.latency = ram_latency;
defparam param0.init_file = "param0.mif";

reg [0:0] ln2HI31_address_a;
reg [0:0] ln2HI31_address_b;
reg ln2HI31_write_enable_a;
reg ln2HI31_write_enable_b;
reg [31:0] ln2HI31_in_a;
reg [31:0] ln2HI31_in_b;
wire [31:0] ln2HI31_out_a;
wire [31:0] ln2HI31_out_b;

// @ln2HI31 = internal unnamed_addr constant [2 x float] [float 0x3FE62E3000000000, float 0xBFE62E3000000000], align 4
rom_dual_port ln2HI31 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ln2HI31_address_a ),
	.address_b( ln2HI31_address_b ),
	.q_a( ln2HI31_out_a ),
	.q_b( ln2HI31_out_b)
);
defparam ln2HI31.width_a = 32;
defparam ln2HI31.width_b = 32;
defparam ln2HI31.widthad_a = 1;
defparam ln2HI31.widthad_b = 1;
defparam ln2HI31.numwords_a = 2;
defparam ln2HI31.numwords_b = 2;
defparam ln2HI31.latency = ram_latency;
defparam ln2HI31.init_file = "ln2HI31.mif";

reg [0:0] ln2LO32_address_a;
reg [0:0] ln2LO32_address_b;
reg ln2LO32_write_enable_a;
reg ln2LO32_write_enable_b;
reg [31:0] ln2LO32_in_a;
reg [31:0] ln2LO32_in_b;
wire [31:0] ln2LO32_out_a;
wire [31:0] ln2LO32_out_b;

// @ln2LO32 = internal unnamed_addr constant [2 x float] [float 0x3EE2FEFA20000000, float 0xBEE2FEFA20000000], align 4
rom_dual_port ln2LO32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ln2LO32_address_a ),
	.address_b( ln2LO32_address_b ),
	.q_a( ln2LO32_out_a ),
	.q_b( ln2LO32_out_b)
);
defparam ln2LO32.width_a = 32;
defparam ln2LO32.width_b = 32;
defparam ln2LO32.widthad_a = 1;
defparam ln2LO32.widthad_b = 1;
defparam ln2LO32.numwords_a = 2;
defparam ln2LO32.numwords_b = 2;
defparam ln2LO32.latency = ram_latency;
defparam ln2LO32.init_file = "ln2LO32.mif";

reg [0:0] halF33_address_a;
reg [0:0] halF33_address_b;
reg halF33_write_enable_a;
reg halF33_write_enable_b;
reg [31:0] halF33_in_a;
reg [31:0] halF33_in_b;
wire [31:0] halF33_out_a;
wire [31:0] halF33_out_b;

// @halF33 = internal unnamed_addr constant [2 x float] [float 5.000000e-01, float -5.000000e-01], align 4
rom_dual_port halF33 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( halF33_address_a ),
	.address_b( halF33_address_b ),
	.q_a( halF33_out_a ),
	.q_b( halF33_out_b)
);
defparam halF33.width_a = 32;
defparam halF33.width_b = 32;
defparam halF33.widthad_a = 1;
defparam halF33.widthad_b = 1;
defparam halF33.numwords_a = 2;
defparam halF33.numwords_b = 2;
defparam halF33.latency = ram_latency;
defparam halF33.init_file = "halF33.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_temp0_a;
assign select_temp0_a = (tag_a == `TAG_g_temp0);
reg [ram_latency:0] select_temp0_reg_a;
wire [31:0] memory_controller_temp0_out_a;
assign memory_controller_temp0_out_a = {32{ select_temp0_reg_a[ram_latency]}} & temp0_out_a;

wire select_param0_a;
assign select_param0_a = (tag_a == `TAG_g_param0);
reg [ram_latency:0] select_param0_reg_a;
wire [31:0] memory_controller_param0_out_a;
assign memory_controller_param0_out_a = {32{ select_param0_reg_a[ram_latency]}} & param0_out_a;

wire select_ln2HI31_a;
assign select_ln2HI31_a = (tag_a == `TAG_g_ln2HI31);
reg [ram_latency:0] select_ln2HI31_reg_a;
wire [31:0] memory_controller_ln2HI31_out_a;
assign memory_controller_ln2HI31_out_a = {32{ select_ln2HI31_reg_a[ram_latency]}} & ln2HI31_out_a;

wire select_ln2LO32_a;
assign select_ln2LO32_a = (tag_a == `TAG_g_ln2LO32);
reg [ram_latency:0] select_ln2LO32_reg_a;
wire [31:0] memory_controller_ln2LO32_out_a;
assign memory_controller_ln2LO32_out_a = {32{ select_ln2LO32_reg_a[ram_latency]}} & ln2LO32_out_a;

wire select_halF33_a;
assign select_halF33_a = (tag_a == `TAG_g_halF33);
reg [ram_latency:0] select_halF33_reg_a;
wire [31:0] memory_controller_halF33_out_a;
assign memory_controller_halF33_out_a = {32{ select_halF33_reg_a[ram_latency]}} & halF33_out_a;

always @(*)
begin
	temp0_address_a = memory_controller_address_a [3-1+2:2] & {3{select_temp0_a}};
	temp0_write_enable_a = memory_controller_write_enable_a & select_temp0_a;
	temp0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	param0_address_a = memory_controller_address_a [3-1+2:2] & {3{select_param0_a}};
	param0_write_enable_a = memory_controller_write_enable_a & select_param0_a;
	param0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ln2HI31_address_a = memory_controller_address_a [1-1+2:2] & {1{select_ln2HI31_a}};
	ln2HI31_write_enable_a = memory_controller_write_enable_a & select_ln2HI31_a;
	ln2HI31_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ln2LO32_address_a = memory_controller_address_a [1-1+2:2] & {1{select_ln2LO32_a}};
	ln2LO32_write_enable_a = memory_controller_write_enable_a & select_ln2LO32_a;
	ln2LO32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	halF33_address_a = memory_controller_address_a [1-1+2:2] & {1{select_halF33_a}};
	halF33_write_enable_a = memory_controller_write_enable_a & select_halF33_a;
	halF33_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_temp0_reg_a[ram_latency]}} | {2{select_param0_reg_a[ram_latency]}} | {2{select_ln2HI31_reg_a[ram_latency]}} | {2{select_ln2LO32_reg_a[ram_latency]}} | {2{select_halF33_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_temp0_out_a | memory_controller_param0_out_a | memory_controller_ln2HI31_out_a | memory_controller_ln2LO32_out_a | memory_controller_halF33_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_temp0_reg_a[j+1] <= select_temp0_reg_a[j];
select_param0_reg_a[j+1] <= select_param0_reg_a[j];
select_ln2HI31_reg_a[j+1] <= select_ln2HI31_reg_a[j];
select_ln2LO32_reg_a[j+1] <= select_ln2LO32_reg_a[j];
select_halF33_reg_a[j+1] <= select_halF33_reg_a[j];
end
always @(*)
begin
select_temp0_reg_a[0] <= select_temp0_a;
select_param0_reg_a[0] <= select_param0_a;
select_ln2HI31_reg_a[0] <= select_ln2HI31_a;
select_ln2LO32_reg_a[0] <= select_ln2LO32_a;
select_halF33_reg_a[0] <= select_halF33_a;
end

reg [2:0] select_not_struct_b;

wire select_temp0_b;
assign select_temp0_b = (tag_b == `TAG_g_temp0);
reg [ram_latency:0] select_temp0_reg_b;
wire [31:0] memory_controller_temp0_out_b;
assign memory_controller_temp0_out_b = {32{ select_temp0_reg_b[ram_latency]}} & temp0_out_b;

wire select_param0_b;
assign select_param0_b = (tag_b == `TAG_g_param0);
reg [ram_latency:0] select_param0_reg_b;
wire [31:0] memory_controller_param0_out_b;
assign memory_controller_param0_out_b = {32{ select_param0_reg_b[ram_latency]}} & param0_out_b;

wire select_ln2HI31_b;
assign select_ln2HI31_b = (tag_b == `TAG_g_ln2HI31);
reg [ram_latency:0] select_ln2HI31_reg_b;
wire [31:0] memory_controller_ln2HI31_out_b;
assign memory_controller_ln2HI31_out_b = {32{ select_ln2HI31_reg_b[ram_latency]}} & ln2HI31_out_b;

wire select_ln2LO32_b;
assign select_ln2LO32_b = (tag_b == `TAG_g_ln2LO32);
reg [ram_latency:0] select_ln2LO32_reg_b;
wire [31:0] memory_controller_ln2LO32_out_b;
assign memory_controller_ln2LO32_out_b = {32{ select_ln2LO32_reg_b[ram_latency]}} & ln2LO32_out_b;

wire select_halF33_b;
assign select_halF33_b = (tag_b == `TAG_g_halF33);
reg [ram_latency:0] select_halF33_reg_b;
wire [31:0] memory_controller_halF33_out_b;
assign memory_controller_halF33_out_b = {32{ select_halF33_reg_b[ram_latency]}} & halF33_out_b;

always @(*)
begin
	temp0_address_b = memory_controller_address_b [3-1+2:2] & {3{select_temp0_b}};
	temp0_write_enable_b = memory_controller_write_enable_b & select_temp0_b;
	temp0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	param0_address_b = memory_controller_address_b [3-1+2:2] & {3{select_param0_b}};
	param0_write_enable_b = memory_controller_write_enable_b & select_param0_b;
	param0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ln2HI31_address_b = memory_controller_address_b [1-1+2:2] & {1{select_ln2HI31_b}};
	ln2HI31_write_enable_b = memory_controller_write_enable_b & select_ln2HI31_b;
	ln2HI31_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ln2LO32_address_b = memory_controller_address_b [1-1+2:2] & {1{select_ln2LO32_b}};
	ln2LO32_write_enable_b = memory_controller_write_enable_b & select_ln2LO32_b;
	ln2LO32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	halF33_address_b = memory_controller_address_b [1-1+2:2] & {1{select_halF33_b}};
	halF33_write_enable_b = memory_controller_write_enable_b & select_halF33_b;
	halF33_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_temp0_reg_b[ram_latency]}} | {2{select_param0_reg_b[ram_latency]}} | {2{select_ln2HI31_reg_b[ram_latency]}} | {2{select_ln2LO32_reg_b[ram_latency]}} | {2{select_halF33_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_temp0_out_b | memory_controller_param0_out_b | memory_controller_ln2HI31_out_b | memory_controller_ln2LO32_out_b | memory_controller_halF33_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_temp0_reg_b[j+1] <= select_temp0_reg_b[j];
select_param0_reg_b[j+1] <= select_param0_reg_b[j];
select_ln2HI31_reg_b[j+1] <= select_ln2HI31_reg_b[j];
select_ln2LO32_reg_b[j+1] <= select_ln2LO32_reg_b[j];
select_halF33_reg_b[j+1] <= select_halF33_reg_b[j];
end
always @(*)
begin
select_temp0_reg_b[0] <= select_temp0_b;
select_param0_reg_b[0] <= select_param0_b;
select_ln2HI31_reg_b[0] <= select_ln2HI31_b;
select_ln2LO32_reg_b[0] <= select_ln2LO32_b;
select_halF33_reg_b[0] <= select_halF33_b;
end

endmodule 

`timescale 1 ns / 1 ns
module expm1f
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_x
);

parameter [9:0] LEGUP_0 = 10'd0;
parameter [9:0] LEGUP_F_expm1f_BB__0_1 = 10'd1;
parameter [9:0] LEGUP_F_expm1f_BB__3_2 = 10'd2;
parameter [9:0] LEGUP_F_expm1f_BB__4_3 = 10'd3;
parameter [9:0] LEGUP_F_expm1f_BB__7_4 = 10'd4;
parameter [9:0] LEGUP_F_expm1f_BB__9_5 = 10'd5;
parameter [9:0] LEGUP_F_expm1f_BB__9_6 = 10'd6;
parameter [9:0] LEGUP_F_expm1f_BB__9_7 = 10'd7;
parameter [9:0] LEGUP_F_expm1f_BB__9_8 = 10'd8;
parameter [9:0] LEGUP_F_expm1f_BB__9_9 = 10'd9;
parameter [9:0] LEGUP_F_expm1f_BB__9_10 = 10'd10;
parameter [9:0] LEGUP_F_expm1f_BB__9_11 = 10'd11;
parameter [9:0] LEGUP_F_expm1f_BB__9_12 = 10'd12;
parameter [9:0] LEGUP_F_expm1f_BB__9_13 = 10'd13;
parameter [9:0] LEGUP_F_expm1f_BB__9_14 = 10'd14;
parameter [9:0] LEGUP_F_expm1f_BB__9_15 = 10'd15;
parameter [9:0] LEGUP_F_expm1f_BB__9_16 = 10'd16;
parameter [9:0] LEGUP_F_expm1f_BB__9_17 = 10'd17;
parameter [9:0] LEGUP_F_expm1f_BB__9_18 = 10'd18;
parameter [9:0] LEGUP_F_expm1f_BB__9_19 = 10'd19;
parameter [9:0] LEGUP_F_expm1f_BB__11_20 = 10'd20;
parameter [9:0] LEGUP_F_expm1f_BB__13_21 = 10'd21;
parameter [9:0] LEGUP_F_expm1f_BB__14_22 = 10'd22;
parameter [9:0] LEGUP_F_expm1f_BB__15_23 = 10'd23;
parameter [9:0] LEGUP_F_expm1f_BB_thread_24 = 10'd24;
parameter [9:0] LEGUP_F_expm1f_BB_thread_25 = 10'd25;
parameter [9:0] LEGUP_F_expm1f_BB_thread_26 = 10'd26;
parameter [9:0] LEGUP_F_expm1f_BB_thread_27 = 10'd27;
parameter [9:0] LEGUP_F_expm1f_BB_thread_28 = 10'd28;
parameter [9:0] LEGUP_F_expm1f_BB_thread_29 = 10'd29;
parameter [9:0] LEGUP_F_expm1f_BB_thread_30 = 10'd30;
parameter [9:0] LEGUP_F_expm1f_BB_thread_31 = 10'd31;
parameter [9:0] LEGUP_F_expm1f_BB_thread_32 = 10'd32;
parameter [9:0] LEGUP_F_expm1f_BB_thread_33 = 10'd33;
parameter [9:0] LEGUP_F_expm1f_BB_thread_34 = 10'd34;
parameter [9:0] LEGUP_F_expm1f_BB_thread_35 = 10'd35;
parameter [9:0] LEGUP_F_expm1f_BB_thread_36 = 10'd36;
parameter [9:0] LEGUP_F_expm1f_BB_thread_37 = 10'd37;
parameter [9:0] LEGUP_F_expm1f_BB_thread_38 = 10'd38;
parameter [9:0] LEGUP_F_expm1f_BB_thread_39 = 10'd39;
parameter [9:0] LEGUP_F_expm1f_BB_threadpresplit_40 = 10'd40;
parameter [9:0] LEGUP_F_expm1f_BB__20_41 = 10'd41;
parameter [9:0] LEGUP_F_expm1f_BB__22_42 = 10'd42;
parameter [9:0] LEGUP_F_expm1f_BB__23_43 = 10'd43;
parameter [9:0] LEGUP_F_expm1f_BB__23_44 = 10'd44;
parameter [9:0] LEGUP_F_expm1f_BB__23_45 = 10'd45;
parameter [9:0] LEGUP_F_expm1f_BB__23_46 = 10'd46;
parameter [9:0] LEGUP_F_expm1f_BB__23_47 = 10'd47;
parameter [9:0] LEGUP_F_expm1f_BB__23_48 = 10'd48;
parameter [9:0] LEGUP_F_expm1f_BB__23_49 = 10'd49;
parameter [9:0] LEGUP_F_expm1f_BB__23_50 = 10'd50;
parameter [9:0] LEGUP_F_expm1f_BB__23_51 = 10'd51;
parameter [9:0] LEGUP_F_expm1f_BB__23_52 = 10'd52;
parameter [9:0] LEGUP_F_expm1f_BB__23_53 = 10'd53;
parameter [9:0] LEGUP_F_expm1f_BB__23_54 = 10'd54;
parameter [9:0] LEGUP_F_expm1f_BB__23_55 = 10'd55;
parameter [9:0] LEGUP_F_expm1f_BB__23_56 = 10'd56;
parameter [9:0] LEGUP_F_expm1f_BB__23_57 = 10'd57;
parameter [9:0] LEGUP_F_expm1f_BB__25_58 = 10'd58;
parameter [9:0] LEGUP_F_expm1f_BB__25_59 = 10'd59;
parameter [9:0] LEGUP_F_expm1f_BB__25_60 = 10'd60;
parameter [9:0] LEGUP_F_expm1f_BB__25_61 = 10'd61;
parameter [9:0] LEGUP_F_expm1f_BB__25_62 = 10'd62;
parameter [9:0] LEGUP_F_expm1f_BB__25_63 = 10'd63;
parameter [9:0] LEGUP_F_expm1f_BB__25_64 = 10'd64;
parameter [9:0] LEGUP_F_expm1f_BB__25_65 = 10'd65;
parameter [9:0] LEGUP_F_expm1f_BB__25_66 = 10'd66;
parameter [9:0] LEGUP_F_expm1f_BB__25_67 = 10'd67;
parameter [9:0] LEGUP_F_expm1f_BB__25_68 = 10'd68;
parameter [9:0] LEGUP_F_expm1f_BB__25_69 = 10'd69;
parameter [9:0] LEGUP_F_expm1f_BB__25_70 = 10'd70;
parameter [9:0] LEGUP_F_expm1f_BB__25_71 = 10'd71;
parameter [9:0] LEGUP_F_expm1f_BB__25_72 = 10'd72;
parameter [9:0] LEGUP_F_expm1f_BB__27_73 = 10'd73;
parameter [9:0] LEGUP_F_expm1f_BB__27_74 = 10'd74;
parameter [9:0] LEGUP_F_expm1f_BB__27_75 = 10'd75;
parameter [9:0] LEGUP_F_expm1f_BB__27_76 = 10'd76;
parameter [9:0] LEGUP_F_expm1f_BB__27_77 = 10'd77;
parameter [9:0] LEGUP_F_expm1f_BB__27_78 = 10'd78;
parameter [9:0] LEGUP_F_expm1f_BB__27_79 = 10'd79;
parameter [9:0] LEGUP_F_expm1f_BB__27_80 = 10'd80;
parameter [9:0] LEGUP_F_expm1f_BB__27_81 = 10'd81;
parameter [9:0] LEGUP_F_expm1f_BB__27_82 = 10'd82;
parameter [9:0] LEGUP_F_expm1f_BB__27_83 = 10'd83;
parameter [9:0] LEGUP_F_expm1f_BB__27_84 = 10'd84;
parameter [9:0] LEGUP_F_expm1f_BB__27_85 = 10'd85;
parameter [9:0] LEGUP_F_expm1f_BB__27_86 = 10'd86;
parameter [9:0] LEGUP_F_expm1f_BB__27_87 = 10'd87;
parameter [9:0] LEGUP_F_expm1f_BB__27_88 = 10'd88;
parameter [9:0] LEGUP_F_expm1f_BB__27_89 = 10'd89;
parameter [9:0] LEGUP_F_expm1f_BB__27_90 = 10'd90;
parameter [9:0] LEGUP_F_expm1f_BB__27_91 = 10'd91;
parameter [9:0] LEGUP_F_expm1f_BB__27_92 = 10'd92;
parameter [9:0] LEGUP_F_expm1f_BB__27_93 = 10'd93;
parameter [9:0] LEGUP_F_expm1f_BB__27_94 = 10'd94;
parameter [9:0] LEGUP_F_expm1f_BB__27_95 = 10'd95;
parameter [9:0] LEGUP_F_expm1f_BB__27_96 = 10'd96;
parameter [9:0] LEGUP_F_expm1f_BB__27_97 = 10'd97;
parameter [9:0] LEGUP_F_expm1f_BB__27_98 = 10'd98;
parameter [9:0] LEGUP_F_expm1f_BB__27_99 = 10'd99;
parameter [9:0] LEGUP_F_expm1f_BB__27_100 = 10'd100;
parameter [9:0] LEGUP_F_expm1f_BB__27_101 = 10'd101;
parameter [9:0] LEGUP_F_expm1f_BB__27_102 = 10'd102;
parameter [9:0] LEGUP_F_expm1f_BB__27_103 = 10'd103;
parameter [9:0] LEGUP_F_expm1f_BB__27_104 = 10'd104;
parameter [9:0] LEGUP_F_expm1f_BB__27_105 = 10'd105;
parameter [9:0] LEGUP_F_expm1f_BB__27_106 = 10'd106;
parameter [9:0] LEGUP_F_expm1f_BB__27_107 = 10'd107;
parameter [9:0] LEGUP_F_expm1f_BB__27_108 = 10'd108;
parameter [9:0] LEGUP_F_expm1f_BB__27_109 = 10'd109;
parameter [9:0] LEGUP_F_expm1f_BB__27_110 = 10'd110;
parameter [9:0] LEGUP_F_expm1f_BB__27_111 = 10'd111;
parameter [9:0] LEGUP_F_expm1f_BB__27_112 = 10'd112;
parameter [9:0] LEGUP_F_expm1f_BB__27_113 = 10'd113;
parameter [9:0] LEGUP_F_expm1f_BB__27_114 = 10'd114;
parameter [9:0] LEGUP_F_expm1f_BB__27_115 = 10'd115;
parameter [9:0] LEGUP_F_expm1f_BB__27_116 = 10'd116;
parameter [9:0] LEGUP_F_expm1f_BB__27_117 = 10'd117;
parameter [9:0] LEGUP_F_expm1f_BB__27_118 = 10'd118;
parameter [9:0] LEGUP_F_expm1f_BB__27_119 = 10'd119;
parameter [9:0] LEGUP_F_expm1f_BB__27_120 = 10'd120;
parameter [9:0] LEGUP_F_expm1f_BB__27_121 = 10'd121;
parameter [9:0] LEGUP_F_expm1f_BB__27_122 = 10'd122;
parameter [9:0] LEGUP_F_expm1f_BB__27_123 = 10'd123;
parameter [9:0] LEGUP_F_expm1f_BB__27_124 = 10'd124;
parameter [9:0] LEGUP_F_expm1f_BB__27_125 = 10'd125;
parameter [9:0] LEGUP_F_expm1f_BB__27_126 = 10'd126;
parameter [9:0] LEGUP_F_expm1f_BB__27_127 = 10'd127;
parameter [9:0] LEGUP_F_expm1f_BB__27_128 = 10'd128;
parameter [9:0] LEGUP_F_expm1f_BB__27_129 = 10'd129;
parameter [9:0] LEGUP_F_expm1f_BB__27_130 = 10'd130;
parameter [9:0] LEGUP_F_expm1f_BB__27_131 = 10'd131;
parameter [9:0] LEGUP_F_expm1f_BB__27_132 = 10'd132;
parameter [9:0] LEGUP_F_expm1f_BB__27_133 = 10'd133;
parameter [9:0] LEGUP_F_expm1f_BB__27_134 = 10'd134;
parameter [9:0] LEGUP_F_expm1f_BB__27_135 = 10'd135;
parameter [9:0] LEGUP_F_expm1f_BB__36_136 = 10'd136;
parameter [9:0] LEGUP_F_expm1f_BB__36_137 = 10'd137;
parameter [9:0] LEGUP_F_expm1f_BB__36_138 = 10'd138;
parameter [9:0] LEGUP_F_expm1f_BB__36_139 = 10'd139;
parameter [9:0] LEGUP_F_expm1f_BB__36_140 = 10'd140;
parameter [9:0] LEGUP_F_expm1f_BB__36_141 = 10'd141;
parameter [9:0] LEGUP_F_expm1f_BB__36_142 = 10'd142;
parameter [9:0] LEGUP_F_expm1f_BB__36_143 = 10'd143;
parameter [9:0] LEGUP_F_expm1f_BB__36_144 = 10'd144;
parameter [9:0] LEGUP_F_expm1f_BB__36_145 = 10'd145;
parameter [9:0] LEGUP_F_expm1f_BB__36_146 = 10'd146;
parameter [9:0] LEGUP_F_expm1f_BB__36_147 = 10'd147;
parameter [9:0] LEGUP_F_expm1f_BB__36_148 = 10'd148;
parameter [9:0] LEGUP_F_expm1f_BB__36_149 = 10'd149;
parameter [9:0] LEGUP_F_expm1f_BB__36_150 = 10'd150;
parameter [9:0] LEGUP_F_expm1f_BB__36_151 = 10'd151;
parameter [9:0] LEGUP_F_expm1f_BB__36_152 = 10'd152;
parameter [9:0] LEGUP_F_expm1f_BB__36_153 = 10'd153;
parameter [9:0] LEGUP_F_expm1f_BB__36_154 = 10'd154;
parameter [9:0] LEGUP_F_expm1f_BB__36_155 = 10'd155;
parameter [9:0] LEGUP_F_expm1f_BB__36_156 = 10'd156;
parameter [9:0] LEGUP_F_expm1f_BB__36_157 = 10'd157;
parameter [9:0] LEGUP_F_expm1f_BB__36_158 = 10'd158;
parameter [9:0] LEGUP_F_expm1f_BB__36_159 = 10'd159;
parameter [9:0] LEGUP_F_expm1f_BB__36_160 = 10'd160;
parameter [9:0] LEGUP_F_expm1f_BB__36_161 = 10'd161;
parameter [9:0] LEGUP_F_expm1f_BB__36_162 = 10'd162;
parameter [9:0] LEGUP_F_expm1f_BB__36_163 = 10'd163;
parameter [9:0] LEGUP_F_expm1f_BB__36_164 = 10'd164;
parameter [9:0] LEGUP_F_expm1f_BB__36_165 = 10'd165;
parameter [9:0] LEGUP_F_expm1f_BB__36_166 = 10'd166;
parameter [9:0] LEGUP_F_expm1f_BB__36_167 = 10'd167;
parameter [9:0] LEGUP_F_expm1f_BB__36_168 = 10'd168;
parameter [9:0] LEGUP_F_expm1f_BB__36_169 = 10'd169;
parameter [9:0] LEGUP_F_expm1f_BB__36_170 = 10'd170;
parameter [9:0] LEGUP_F_expm1f_BB__36_171 = 10'd171;
parameter [9:0] LEGUP_F_expm1f_BB__36_172 = 10'd172;
parameter [9:0] LEGUP_F_expm1f_BB__36_173 = 10'd173;
parameter [9:0] LEGUP_F_expm1f_BB__36_174 = 10'd174;
parameter [9:0] LEGUP_F_expm1f_BB__36_175 = 10'd175;
parameter [9:0] LEGUP_F_expm1f_BB__36_176 = 10'd176;
parameter [9:0] LEGUP_F_expm1f_BB__36_177 = 10'd177;
parameter [9:0] LEGUP_F_expm1f_BB__36_178 = 10'd178;
parameter [9:0] LEGUP_F_expm1f_BB__40_179 = 10'd179;
parameter [9:0] LEGUP_F_expm1f_BB__42_180 = 10'd180;
parameter [9:0] LEGUP_F_expm1f_BB__42_181 = 10'd181;
parameter [9:0] LEGUP_F_expm1f_BB__42_182 = 10'd182;
parameter [9:0] LEGUP_F_expm1f_BB__42_183 = 10'd183;
parameter [9:0] LEGUP_F_expm1f_BB__42_184 = 10'd184;
parameter [9:0] LEGUP_F_expm1f_BB__42_185 = 10'd185;
parameter [9:0] LEGUP_F_expm1f_BB__42_186 = 10'd186;
parameter [9:0] LEGUP_F_expm1f_BB__42_187 = 10'd187;
parameter [9:0] LEGUP_F_expm1f_BB__42_188 = 10'd188;
parameter [9:0] LEGUP_F_expm1f_BB__42_189 = 10'd189;
parameter [9:0] LEGUP_F_expm1f_BB__42_190 = 10'd190;
parameter [9:0] LEGUP_F_expm1f_BB__42_191 = 10'd191;
parameter [9:0] LEGUP_F_expm1f_BB__42_192 = 10'd192;
parameter [9:0] LEGUP_F_expm1f_BB__42_193 = 10'd193;
parameter [9:0] LEGUP_F_expm1f_BB__42_194 = 10'd194;
parameter [9:0] LEGUP_F_expm1f_BB__42_195 = 10'd195;
parameter [9:0] LEGUP_F_expm1f_BB__42_196 = 10'd196;
parameter [9:0] LEGUP_F_expm1f_BB__42_197 = 10'd197;
parameter [9:0] LEGUP_F_expm1f_BB__42_198 = 10'd198;
parameter [9:0] LEGUP_F_expm1f_BB__42_199 = 10'd199;
parameter [9:0] LEGUP_F_expm1f_BB__42_200 = 10'd200;
parameter [9:0] LEGUP_F_expm1f_BB__42_201 = 10'd201;
parameter [9:0] LEGUP_F_expm1f_BB__42_202 = 10'd202;
parameter [9:0] LEGUP_F_expm1f_BB__42_203 = 10'd203;
parameter [9:0] LEGUP_F_expm1f_BB__42_204 = 10'd204;
parameter [9:0] LEGUP_F_expm1f_BB__42_205 = 10'd205;
parameter [9:0] LEGUP_F_expm1f_BB__42_206 = 10'd206;
parameter [9:0] LEGUP_F_expm1f_BB__42_207 = 10'd207;
parameter [9:0] LEGUP_F_expm1f_BB__42_208 = 10'd208;
parameter [9:0] LEGUP_F_expm1f_BB__42_209 = 10'd209;
parameter [9:0] LEGUP_F_expm1f_BB__42_210 = 10'd210;
parameter [9:0] LEGUP_F_expm1f_BB__42_211 = 10'd211;
parameter [9:0] LEGUP_F_expm1f_BB__42_212 = 10'd212;
parameter [9:0] LEGUP_F_expm1f_BB__42_213 = 10'd213;
parameter [9:0] LEGUP_F_expm1f_BB__42_214 = 10'd214;
parameter [9:0] LEGUP_F_expm1f_BB__42_215 = 10'd215;
parameter [9:0] LEGUP_F_expm1f_BB__42_216 = 10'd216;
parameter [9:0] LEGUP_F_expm1f_BB__42_217 = 10'd217;
parameter [9:0] LEGUP_F_expm1f_BB__42_218 = 10'd218;
parameter [9:0] LEGUP_F_expm1f_BB__42_219 = 10'd219;
parameter [9:0] LEGUP_F_expm1f_BB__42_220 = 10'd220;
parameter [9:0] LEGUP_F_expm1f_BB__42_221 = 10'd221;
parameter [9:0] LEGUP_F_expm1f_BB__42_222 = 10'd222;
parameter [9:0] LEGUP_F_expm1f_BB__46_223 = 10'd223;
parameter [9:0] LEGUP_F_expm1f_BB__46_224 = 10'd224;
parameter [9:0] LEGUP_F_expm1f_BB__46_225 = 10'd225;
parameter [9:0] LEGUP_F_expm1f_BB__46_226 = 10'd226;
parameter [9:0] LEGUP_F_expm1f_BB__46_227 = 10'd227;
parameter [9:0] LEGUP_F_expm1f_BB__46_228 = 10'd228;
parameter [9:0] LEGUP_F_expm1f_BB__46_229 = 10'd229;
parameter [9:0] LEGUP_F_expm1f_BB__46_230 = 10'd230;
parameter [9:0] LEGUP_F_expm1f_BB__46_231 = 10'd231;
parameter [9:0] LEGUP_F_expm1f_BB__46_232 = 10'd232;
parameter [9:0] LEGUP_F_expm1f_BB__46_233 = 10'd233;
parameter [9:0] LEGUP_F_expm1f_BB__46_234 = 10'd234;
parameter [9:0] LEGUP_F_expm1f_BB__46_235 = 10'd235;
parameter [9:0] LEGUP_F_expm1f_BB__46_236 = 10'd236;
parameter [9:0] LEGUP_F_expm1f_BB__46_237 = 10'd237;
parameter [9:0] LEGUP_F_expm1f_BB__46_238 = 10'd238;
parameter [9:0] LEGUP_F_expm1f_BB__46_239 = 10'd239;
parameter [9:0] LEGUP_F_expm1f_BB__46_240 = 10'd240;
parameter [9:0] LEGUP_F_expm1f_BB__46_241 = 10'd241;
parameter [9:0] LEGUP_F_expm1f_BB__46_242 = 10'd242;
parameter [9:0] LEGUP_F_expm1f_BB__46_243 = 10'd243;
parameter [9:0] LEGUP_F_expm1f_BB__46_244 = 10'd244;
parameter [9:0] LEGUP_F_expm1f_BB__46_245 = 10'd245;
parameter [9:0] LEGUP_F_expm1f_BB__46_246 = 10'd246;
parameter [9:0] LEGUP_F_expm1f_BB__46_247 = 10'd247;
parameter [9:0] LEGUP_F_expm1f_BB__46_248 = 10'd248;
parameter [9:0] LEGUP_F_expm1f_BB__46_249 = 10'd249;
parameter [9:0] LEGUP_F_expm1f_BB__46_250 = 10'd250;
parameter [9:0] LEGUP_F_expm1f_BB__46_251 = 10'd251;
parameter [9:0] LEGUP_F_expm1f_BB__46_252 = 10'd252;
parameter [9:0] LEGUP_F_expm1f_BB__46_253 = 10'd253;
parameter [9:0] LEGUP_F_expm1f_BB__46_254 = 10'd254;
parameter [9:0] LEGUP_F_expm1f_BB__46_255 = 10'd255;
parameter [9:0] LEGUP_F_expm1f_BB__46_256 = 10'd256;
parameter [9:0] LEGUP_F_expm1f_BB__46_257 = 10'd257;
parameter [9:0] LEGUP_F_expm1f_BB__46_258 = 10'd258;
parameter [9:0] LEGUP_F_expm1f_BB__46_259 = 10'd259;
parameter [9:0] LEGUP_F_expm1f_BB__46_260 = 10'd260;
parameter [9:0] LEGUP_F_expm1f_BB__46_261 = 10'd261;
parameter [9:0] LEGUP_F_expm1f_BB__46_262 = 10'd262;
parameter [9:0] LEGUP_F_expm1f_BB__46_263 = 10'd263;
parameter [9:0] LEGUP_F_expm1f_BB__46_264 = 10'd264;
parameter [9:0] LEGUP_F_expm1f_BB__46_265 = 10'd265;
parameter [9:0] LEGUP_F_expm1f_BB__46_266 = 10'd266;
parameter [9:0] LEGUP_F_expm1f_BB__46_267 = 10'd267;
parameter [9:0] LEGUP_F_expm1f_BB__46_268 = 10'd268;
parameter [9:0] LEGUP_F_expm1f_BB__46_269 = 10'd269;
parameter [9:0] LEGUP_F_expm1f_BB__46_270 = 10'd270;
parameter [9:0] LEGUP_F_expm1f_BB__46_271 = 10'd271;
parameter [9:0] LEGUP_F_expm1f_BB__46_272 = 10'd272;
parameter [9:0] LEGUP_F_expm1f_BB__46_273 = 10'd273;
parameter [9:0] LEGUP_F_expm1f_BB__46_274 = 10'd274;
parameter [9:0] LEGUP_F_expm1f_BB__46_275 = 10'd275;
parameter [9:0] LEGUP_F_expm1f_BB__46_276 = 10'd276;
parameter [9:0] LEGUP_F_expm1f_BB__46_277 = 10'd277;
parameter [9:0] LEGUP_F_expm1f_BB__46_278 = 10'd278;
parameter [9:0] LEGUP_F_expm1f_BB__46_279 = 10'd279;
parameter [9:0] LEGUP_F_expm1f_BB__46_280 = 10'd280;
parameter [9:0] LEGUP_F_expm1f_BB__46_281 = 10'd281;
parameter [9:0] LEGUP_F_expm1f_BB__46_282 = 10'd282;
parameter [9:0] LEGUP_F_expm1f_BB__46_283 = 10'd283;
parameter [9:0] LEGUP_F_expm1f_BB__46_284 = 10'd284;
parameter [9:0] LEGUP_F_expm1f_BB__46_285 = 10'd285;
parameter [9:0] LEGUP_F_expm1f_BB__46_286 = 10'd286;
parameter [9:0] LEGUP_F_expm1f_BB__46_287 = 10'd287;
parameter [9:0] LEGUP_F_expm1f_BB__46_288 = 10'd288;
parameter [9:0] LEGUP_F_expm1f_BB__46_289 = 10'd289;
parameter [9:0] LEGUP_F_expm1f_BB__46_290 = 10'd290;
parameter [9:0] LEGUP_F_expm1f_BB__46_291 = 10'd291;
parameter [9:0] LEGUP_F_expm1f_BB__46_292 = 10'd292;
parameter [9:0] LEGUP_F_expm1f_BB__46_293 = 10'd293;
parameter [9:0] LEGUP_F_expm1f_BB__46_294 = 10'd294;
parameter [9:0] LEGUP_F_expm1f_BB__46_295 = 10'd295;
parameter [9:0] LEGUP_F_expm1f_BB__46_296 = 10'd296;
parameter [9:0] LEGUP_F_expm1f_BB__46_297 = 10'd297;
parameter [9:0] LEGUP_F_expm1f_BB__46_298 = 10'd298;
parameter [9:0] LEGUP_F_expm1f_BB__46_299 = 10'd299;
parameter [9:0] LEGUP_F_expm1f_BB__46_300 = 10'd300;
parameter [9:0] LEGUP_F_expm1f_BB__46_301 = 10'd301;
parameter [9:0] LEGUP_F_expm1f_BB__46_302 = 10'd302;
parameter [9:0] LEGUP_F_expm1f_BB__46_303 = 10'd303;
parameter [9:0] LEGUP_F_expm1f_BB__46_304 = 10'd304;
parameter [9:0] LEGUP_F_expm1f_BB__46_305 = 10'd305;
parameter [9:0] LEGUP_F_expm1f_BB__46_306 = 10'd306;
parameter [9:0] LEGUP_F_expm1f_BB__46_307 = 10'd307;
parameter [9:0] LEGUP_F_expm1f_BB__46_308 = 10'd308;
parameter [9:0] LEGUP_F_expm1f_BB__46_309 = 10'd309;
parameter [9:0] LEGUP_F_expm1f_BB__46_310 = 10'd310;
parameter [9:0] LEGUP_F_expm1f_BB__46_311 = 10'd311;
parameter [9:0] LEGUP_F_expm1f_BB__46_312 = 10'd312;
parameter [9:0] LEGUP_F_expm1f_BB__46_313 = 10'd313;
parameter [9:0] LEGUP_F_expm1f_BB__46_314 = 10'd314;
parameter [9:0] LEGUP_F_expm1f_BB__46_315 = 10'd315;
parameter [9:0] LEGUP_F_expm1f_BB__46_316 = 10'd316;
parameter [9:0] LEGUP_F_expm1f_BB__46_317 = 10'd317;
parameter [9:0] LEGUP_F_expm1f_BB__46_318 = 10'd318;
parameter [9:0] LEGUP_F_expm1f_BB__46_319 = 10'd319;
parameter [9:0] LEGUP_F_expm1f_BB__46_320 = 10'd320;
parameter [9:0] LEGUP_F_expm1f_BB__46_321 = 10'd321;
parameter [9:0] LEGUP_F_expm1f_BB__46_322 = 10'd322;
parameter [9:0] LEGUP_F_expm1f_BB__46_323 = 10'd323;
parameter [9:0] LEGUP_F_expm1f_BB__46_324 = 10'd324;
parameter [9:0] LEGUP_F_expm1f_BB__46_325 = 10'd325;
parameter [9:0] LEGUP_F_expm1f_BB__46_326 = 10'd326;
parameter [9:0] LEGUP_F_expm1f_BB__46_327 = 10'd327;
parameter [9:0] LEGUP_F_expm1f_BB__46_328 = 10'd328;
parameter [9:0] LEGUP_F_expm1f_BB__46_329 = 10'd329;
parameter [9:0] LEGUP_F_expm1f_BB__46_330 = 10'd330;
parameter [9:0] LEGUP_F_expm1f_BB__46_331 = 10'd331;
parameter [9:0] LEGUP_F_expm1f_BB__46_332 = 10'd332;
parameter [9:0] LEGUP_F_expm1f_BB__46_333 = 10'd333;
parameter [9:0] LEGUP_F_expm1f_BB__46_334 = 10'd334;
parameter [9:0] LEGUP_F_expm1f_BB__46_335 = 10'd335;
parameter [9:0] LEGUP_F_expm1f_BB__46_336 = 10'd336;
parameter [9:0] LEGUP_F_expm1f_BB__46_337 = 10'd337;
parameter [9:0] LEGUP_F_expm1f_BB__46_338 = 10'd338;
parameter [9:0] LEGUP_F_expm1f_BB__46_339 = 10'd339;
parameter [9:0] LEGUP_F_expm1f_BB__46_340 = 10'd340;
parameter [9:0] LEGUP_F_expm1f_BB__46_341 = 10'd341;
parameter [9:0] LEGUP_F_expm1f_BB__46_342 = 10'd342;
parameter [9:0] LEGUP_F_expm1f_BB__46_343 = 10'd343;
parameter [9:0] LEGUP_F_expm1f_BB__46_344 = 10'd344;
parameter [9:0] LEGUP_F_expm1f_BB__46_345 = 10'd345;
parameter [9:0] LEGUP_F_expm1f_BB__46_346 = 10'd346;
parameter [9:0] LEGUP_F_expm1f_BB__46_347 = 10'd347;
parameter [9:0] LEGUP_F_expm1f_BB__46_348 = 10'd348;
parameter [9:0] LEGUP_F_expm1f_BB__46_349 = 10'd349;
parameter [9:0] LEGUP_F_expm1f_BB__46_350 = 10'd350;
parameter [9:0] LEGUP_F_expm1f_BB__46_351 = 10'd351;
parameter [9:0] LEGUP_F_expm1f_BB__46_352 = 10'd352;
parameter [9:0] LEGUP_F_expm1f_BB__46_353 = 10'd353;
parameter [9:0] LEGUP_F_expm1f_BB__46_354 = 10'd354;
parameter [9:0] LEGUP_F_expm1f_BB__46_355 = 10'd355;
parameter [9:0] LEGUP_F_expm1f_BB__46_356 = 10'd356;
parameter [9:0] LEGUP_F_expm1f_BB__46_357 = 10'd357;
parameter [9:0] LEGUP_F_expm1f_BB__46_358 = 10'd358;
parameter [9:0] LEGUP_F_expm1f_BB__46_359 = 10'd359;
parameter [9:0] LEGUP_F_expm1f_BB__46_360 = 10'd360;
parameter [9:0] LEGUP_F_expm1f_BB__46_361 = 10'd361;
parameter [9:0] LEGUP_F_expm1f_BB__46_362 = 10'd362;
parameter [9:0] LEGUP_F_expm1f_BB__46_363 = 10'd363;
parameter [9:0] LEGUP_F_expm1f_BB__46_364 = 10'd364;
parameter [9:0] LEGUP_F_expm1f_BB__46_365 = 10'd365;
parameter [9:0] LEGUP_F_expm1f_BB__46_366 = 10'd366;
parameter [9:0] LEGUP_F_expm1f_BB__46_367 = 10'd367;
parameter [9:0] LEGUP_F_expm1f_BB__46_368 = 10'd368;
parameter [9:0] LEGUP_F_expm1f_BB__46_369 = 10'd369;
parameter [9:0] LEGUP_F_expm1f_BB__46_370 = 10'd370;
parameter [9:0] LEGUP_F_expm1f_BB__46_371 = 10'd371;
parameter [9:0] LEGUP_F_expm1f_BB__46_372 = 10'd372;
parameter [9:0] LEGUP_F_expm1f_BB__46_373 = 10'd373;
parameter [9:0] LEGUP_F_expm1f_BB__46_374 = 10'd374;
parameter [9:0] LEGUP_F_expm1f_BB__46_375 = 10'd375;
parameter [9:0] LEGUP_F_expm1f_BB__46_376 = 10'd376;
parameter [9:0] LEGUP_F_expm1f_BB__46_377 = 10'd377;
parameter [9:0] LEGUP_F_expm1f_BB__46_378 = 10'd378;
parameter [9:0] LEGUP_F_expm1f_BB__46_379 = 10'd379;
parameter [9:0] LEGUP_F_expm1f_BB__46_380 = 10'd380;
parameter [9:0] LEGUP_F_expm1f_BB__46_381 = 10'd381;
parameter [9:0] LEGUP_F_expm1f_BB__46_382 = 10'd382;
parameter [9:0] LEGUP_F_expm1f_BB__46_383 = 10'd383;
parameter [9:0] LEGUP_F_expm1f_BB__46_384 = 10'd384;
parameter [9:0] LEGUP_F_expm1f_BB__46_385 = 10'd385;
parameter [9:0] LEGUP_F_expm1f_BB__46_386 = 10'd386;
parameter [9:0] LEGUP_F_expm1f_BB__46_387 = 10'd387;
parameter [9:0] LEGUP_F_expm1f_BB__46_388 = 10'd388;
parameter [9:0] LEGUP_F_expm1f_BB__46_389 = 10'd389;
parameter [9:0] LEGUP_F_expm1f_BB__46_390 = 10'd390;
parameter [9:0] LEGUP_F_expm1f_BB__46_391 = 10'd391;
parameter [9:0] LEGUP_F_expm1f_BB__46_392 = 10'd392;
parameter [9:0] LEGUP_F_expm1f_BB__46_393 = 10'd393;
parameter [9:0] LEGUP_F_expm1f_BB__46_394 = 10'd394;
parameter [9:0] LEGUP_F_expm1f_BB__46_395 = 10'd395;
parameter [9:0] LEGUP_F_expm1f_BB__46_396 = 10'd396;
parameter [9:0] LEGUP_F_expm1f_BB__46_397 = 10'd397;
parameter [9:0] LEGUP_F_expm1f_BB__46_398 = 10'd398;
parameter [9:0] LEGUP_F_expm1f_BB__46_399 = 10'd399;
parameter [9:0] LEGUP_F_expm1f_BB__46_400 = 10'd400;
parameter [9:0] LEGUP_F_expm1f_BB__46_401 = 10'd401;
parameter [9:0] LEGUP_F_expm1f_BB__46_402 = 10'd402;
parameter [9:0] LEGUP_F_expm1f_BB__46_403 = 10'd403;
parameter [9:0] LEGUP_F_expm1f_BB__46_404 = 10'd404;
parameter [9:0] LEGUP_F_expm1f_BB__46_405 = 10'd405;
parameter [9:0] LEGUP_F_expm1f_BB__46_406 = 10'd406;
parameter [9:0] LEGUP_F_expm1f_BB__46_407 = 10'd407;
parameter [9:0] LEGUP_F_expm1f_BB__46_408 = 10'd408;
parameter [9:0] LEGUP_F_expm1f_BB__46_409 = 10'd409;
parameter [9:0] LEGUP_F_expm1f_BB__46_410 = 10'd410;
parameter [9:0] LEGUP_F_expm1f_BB__46_411 = 10'd411;
parameter [9:0] LEGUP_F_expm1f_BB__46_412 = 10'd412;
parameter [9:0] LEGUP_F_expm1f_BB__46_413 = 10'd413;
parameter [9:0] LEGUP_F_expm1f_BB__46_414 = 10'd414;
parameter [9:0] LEGUP_F_expm1f_BB__46_415 = 10'd415;
parameter [9:0] LEGUP_F_expm1f_BB__46_416 = 10'd416;
parameter [9:0] LEGUP_F_expm1f_BB__46_417 = 10'd417;
parameter [9:0] LEGUP_F_expm1f_BB__46_418 = 10'd418;
parameter [9:0] LEGUP_F_expm1f_BB__46_419 = 10'd419;
parameter [9:0] LEGUP_F_expm1f_BB__46_420 = 10'd420;
parameter [9:0] LEGUP_F_expm1f_BB__46_421 = 10'd421;
parameter [9:0] LEGUP_F_expm1f_BB__46_422 = 10'd422;
parameter [9:0] LEGUP_F_expm1f_BB__46_423 = 10'd423;
parameter [9:0] LEGUP_F_expm1f_BB__46_424 = 10'd424;
parameter [9:0] LEGUP_F_expm1f_BB__46_425 = 10'd425;
parameter [9:0] LEGUP_F_expm1f_BB__46_426 = 10'd426;
parameter [9:0] LEGUP_F_expm1f_BB__46_427 = 10'd427;
parameter [9:0] LEGUP_F_expm1f_BB__46_428 = 10'd428;
parameter [9:0] LEGUP_F_expm1f_BB__46_429 = 10'd429;
parameter [9:0] LEGUP_F_expm1f_BB__46_430 = 10'd430;
parameter [9:0] LEGUP_F_expm1f_BB__46_431 = 10'd431;
parameter [9:0] LEGUP_F_expm1f_BB__46_432 = 10'd432;
parameter [9:0] LEGUP_F_expm1f_BB__46_433 = 10'd433;
parameter [9:0] LEGUP_F_expm1f_BB__46_434 = 10'd434;
parameter [9:0] LEGUP_F_expm1f_BB__46_435 = 10'd435;
parameter [9:0] LEGUP_F_expm1f_BB__46_436 = 10'd436;
parameter [9:0] LEGUP_F_expm1f_BB__46_437 = 10'd437;
parameter [9:0] LEGUP_F_expm1f_BB__46_438 = 10'd438;
parameter [9:0] LEGUP_F_expm1f_BB__46_439 = 10'd439;
parameter [9:0] LEGUP_F_expm1f_BB__46_440 = 10'd440;
parameter [9:0] LEGUP_F_expm1f_BB__46_441 = 10'd441;
parameter [9:0] LEGUP_F_expm1f_BB__46_442 = 10'd442;
parameter [9:0] LEGUP_F_expm1f_BB__46_443 = 10'd443;
parameter [9:0] LEGUP_F_expm1f_BB__46_444 = 10'd444;
parameter [9:0] LEGUP_F_expm1f_BB__46_445 = 10'd445;
parameter [9:0] LEGUP_F_expm1f_BB__46_446 = 10'd446;
parameter [9:0] LEGUP_F_expm1f_BB__46_447 = 10'd447;
parameter [9:0] LEGUP_F_expm1f_BB__46_448 = 10'd448;
parameter [9:0] LEGUP_F_expm1f_BB__46_449 = 10'd449;
parameter [9:0] LEGUP_F_expm1f_BB__46_450 = 10'd450;
parameter [9:0] LEGUP_F_expm1f_BB__46_451 = 10'd451;
parameter [9:0] LEGUP_F_expm1f_BB__46_452 = 10'd452;
parameter [9:0] LEGUP_F_expm1f_BB__46_453 = 10'd453;
parameter [9:0] LEGUP_F_expm1f_BB__46_454 = 10'd454;
parameter [9:0] LEGUP_F_expm1f_BB__46_455 = 10'd455;
parameter [9:0] LEGUP_F_expm1f_BB__46_456 = 10'd456;
parameter [9:0] LEGUP_F_expm1f_BB__46_457 = 10'd457;
parameter [9:0] LEGUP_F_expm1f_BB__46_458 = 10'd458;
parameter [9:0] LEGUP_F_expm1f_BB__46_459 = 10'd459;
parameter [9:0] LEGUP_F_expm1f_BB__46_460 = 10'd460;
parameter [9:0] LEGUP_F_expm1f_BB__46_461 = 10'd461;
parameter [9:0] LEGUP_F_expm1f_BB__46_462 = 10'd462;
parameter [9:0] LEGUP_F_expm1f_BB__46_463 = 10'd463;
parameter [9:0] LEGUP_F_expm1f_BB__46_464 = 10'd464;
parameter [9:0] LEGUP_F_expm1f_BB__67_465 = 10'd465;
parameter [9:0] LEGUP_F_expm1f_BB__67_466 = 10'd466;
parameter [9:0] LEGUP_F_expm1f_BB__67_467 = 10'd467;
parameter [9:0] LEGUP_F_expm1f_BB__67_468 = 10'd468;
parameter [9:0] LEGUP_F_expm1f_BB__67_469 = 10'd469;
parameter [9:0] LEGUP_F_expm1f_BB__67_470 = 10'd470;
parameter [9:0] LEGUP_F_expm1f_BB__67_471 = 10'd471;
parameter [9:0] LEGUP_F_expm1f_BB__67_472 = 10'd472;
parameter [9:0] LEGUP_F_expm1f_BB__67_473 = 10'd473;
parameter [9:0] LEGUP_F_expm1f_BB__67_474 = 10'd474;
parameter [9:0] LEGUP_F_expm1f_BB__67_475 = 10'd475;
parameter [9:0] LEGUP_F_expm1f_BB__67_476 = 10'd476;
parameter [9:0] LEGUP_F_expm1f_BB__67_477 = 10'd477;
parameter [9:0] LEGUP_F_expm1f_BB__67_478 = 10'd478;
parameter [9:0] LEGUP_F_expm1f_BB__67_479 = 10'd479;
parameter [9:0] LEGUP_F_expm1f_BB__67_480 = 10'd480;
parameter [9:0] LEGUP_F_expm1f_BB__67_481 = 10'd481;
parameter [9:0] LEGUP_F_expm1f_BB__67_482 = 10'd482;
parameter [9:0] LEGUP_F_expm1f_BB__67_483 = 10'd483;
parameter [9:0] LEGUP_F_expm1f_BB__67_484 = 10'd484;
parameter [9:0] LEGUP_F_expm1f_BB__67_485 = 10'd485;
parameter [9:0] LEGUP_F_expm1f_BB__67_486 = 10'd486;
parameter [9:0] LEGUP_F_expm1f_BB__67_487 = 10'd487;
parameter [9:0] LEGUP_F_expm1f_BB__67_488 = 10'd488;
parameter [9:0] LEGUP_F_expm1f_BB__67_489 = 10'd489;
parameter [9:0] LEGUP_F_expm1f_BB__67_490 = 10'd490;
parameter [9:0] LEGUP_F_expm1f_BB__67_491 = 10'd491;
parameter [9:0] LEGUP_F_expm1f_BB__67_492 = 10'd492;
parameter [9:0] LEGUP_F_expm1f_BB__67_493 = 10'd493;
parameter [9:0] LEGUP_F_expm1f_BB__67_494 = 10'd494;
parameter [9:0] LEGUP_F_expm1f_BB__67_495 = 10'd495;
parameter [9:0] LEGUP_F_expm1f_BB__67_496 = 10'd496;
parameter [9:0] LEGUP_F_expm1f_BB__67_497 = 10'd497;
parameter [9:0] LEGUP_F_expm1f_BB__67_498 = 10'd498;
parameter [9:0] LEGUP_F_expm1f_BB__67_499 = 10'd499;
parameter [9:0] LEGUP_F_expm1f_BB__67_500 = 10'd500;
parameter [9:0] LEGUP_F_expm1f_BB__67_501 = 10'd501;
parameter [9:0] LEGUP_F_expm1f_BB__67_502 = 10'd502;
parameter [9:0] LEGUP_F_expm1f_BB__67_503 = 10'd503;
parameter [9:0] LEGUP_F_expm1f_BB__67_504 = 10'd504;
parameter [9:0] LEGUP_F_expm1f_BB__71_505 = 10'd505;
parameter [9:0] LEGUP_F_expm1f_BB__71_506 = 10'd506;
parameter [9:0] LEGUP_F_expm1f_BB__71_507 = 10'd507;
parameter [9:0] LEGUP_F_expm1f_BB__71_508 = 10'd508;
parameter [9:0] LEGUP_F_expm1f_BB__71_509 = 10'd509;
parameter [9:0] LEGUP_F_expm1f_BB__71_510 = 10'd510;
parameter [9:0] LEGUP_F_expm1f_BB__71_511 = 10'd511;
parameter [9:0] LEGUP_F_expm1f_BB__71_512 = 10'd512;
parameter [9:0] LEGUP_F_expm1f_BB__71_513 = 10'd513;
parameter [9:0] LEGUP_F_expm1f_BB__71_514 = 10'd514;
parameter [9:0] LEGUP_F_expm1f_BB__71_515 = 10'd515;
parameter [9:0] LEGUP_F_expm1f_BB__71_516 = 10'd516;
parameter [9:0] LEGUP_F_expm1f_BB__71_517 = 10'd517;
parameter [9:0] LEGUP_F_expm1f_BB__71_518 = 10'd518;
parameter [9:0] LEGUP_F_expm1f_BB__71_519 = 10'd519;
parameter [9:0] LEGUP_F_expm1f_BB__71_520 = 10'd520;
parameter [9:0] LEGUP_F_expm1f_BB__71_521 = 10'd521;
parameter [9:0] LEGUP_F_expm1f_BB__71_522 = 10'd522;
parameter [9:0] LEGUP_F_expm1f_BB__71_523 = 10'd523;
parameter [9:0] LEGUP_F_expm1f_BB__71_524 = 10'd524;
parameter [9:0] LEGUP_F_expm1f_BB__71_525 = 10'd525;
parameter [9:0] LEGUP_F_expm1f_BB__71_526 = 10'd526;
parameter [9:0] LEGUP_F_expm1f_BB__71_527 = 10'd527;
parameter [9:0] LEGUP_F_expm1f_BB__71_528 = 10'd528;
parameter [9:0] LEGUP_F_expm1f_BB__71_529 = 10'd529;
parameter [9:0] LEGUP_F_expm1f_BB__71_530 = 10'd530;
parameter [9:0] LEGUP_F_expm1f_BB__71_531 = 10'd531;
parameter [9:0] LEGUP_F_expm1f_BB__71_532 = 10'd532;
parameter [9:0] LEGUP_F_expm1f_BB__71_533 = 10'd533;
parameter [9:0] LEGUP_F_expm1f_BB__71_534 = 10'd534;
parameter [9:0] LEGUP_F_expm1f_BB__71_535 = 10'd535;
parameter [9:0] LEGUP_F_expm1f_BB__71_536 = 10'd536;
parameter [9:0] LEGUP_F_expm1f_BB__71_537 = 10'd537;
parameter [9:0] LEGUP_F_expm1f_BB__71_538 = 10'd538;
parameter [9:0] LEGUP_F_expm1f_BB__71_539 = 10'd539;
parameter [9:0] LEGUP_F_expm1f_BB__71_540 = 10'd540;
parameter [9:0] LEGUP_F_expm1f_BB__71_541 = 10'd541;
parameter [9:0] LEGUP_F_expm1f_BB__71_542 = 10'd542;
parameter [9:0] LEGUP_F_expm1f_BB__71_543 = 10'd543;
parameter [9:0] LEGUP_F_expm1f_BB__71_544 = 10'd544;
parameter [9:0] LEGUP_F_expm1f_BB__71_545 = 10'd545;
parameter [9:0] LEGUP_F_expm1f_BB__71_546 = 10'd546;
parameter [9:0] LEGUP_F_expm1f_BB__71_547 = 10'd547;
parameter [9:0] LEGUP_F_expm1f_BB__71_548 = 10'd548;
parameter [9:0] LEGUP_F_expm1f_BB__71_549 = 10'd549;
parameter [9:0] LEGUP_F_expm1f_BB__71_550 = 10'd550;
parameter [9:0] LEGUP_F_expm1f_BB__71_551 = 10'd551;
parameter [9:0] LEGUP_F_expm1f_BB__71_552 = 10'd552;
parameter [9:0] LEGUP_F_expm1f_BB__71_553 = 10'd553;
parameter [9:0] LEGUP_F_expm1f_BB__71_554 = 10'd554;
parameter [9:0] LEGUP_F_expm1f_BB__71_555 = 10'd555;
parameter [9:0] LEGUP_F_expm1f_BB__71_556 = 10'd556;
parameter [9:0] LEGUP_F_expm1f_BB__71_557 = 10'd557;
parameter [9:0] LEGUP_F_expm1f_BB__71_558 = 10'd558;
parameter [9:0] LEGUP_F_expm1f_BB__76_559 = 10'd559;
parameter [9:0] LEGUP_F_expm1f_BB__76_560 = 10'd560;
parameter [9:0] LEGUP_F_expm1f_BB__76_561 = 10'd561;
parameter [9:0] LEGUP_F_expm1f_BB__76_562 = 10'd562;
parameter [9:0] LEGUP_F_expm1f_BB__76_563 = 10'd563;
parameter [9:0] LEGUP_F_expm1f_BB__76_564 = 10'd564;
parameter [9:0] LEGUP_F_expm1f_BB__76_565 = 10'd565;
parameter [9:0] LEGUP_F_expm1f_BB__76_566 = 10'd566;
parameter [9:0] LEGUP_F_expm1f_BB__76_567 = 10'd567;
parameter [9:0] LEGUP_F_expm1f_BB__76_568 = 10'd568;
parameter [9:0] LEGUP_F_expm1f_BB__76_569 = 10'd569;
parameter [9:0] LEGUP_F_expm1f_BB__76_570 = 10'd570;
parameter [9:0] LEGUP_F_expm1f_BB__76_571 = 10'd571;
parameter [9:0] LEGUP_F_expm1f_BB__76_572 = 10'd572;
parameter [9:0] LEGUP_F_expm1f_BB__76_573 = 10'd573;
parameter [9:0] LEGUP_F_expm1f_BB__76_574 = 10'd574;
parameter [9:0] LEGUP_F_expm1f_BB__76_575 = 10'd575;
parameter [9:0] LEGUP_F_expm1f_BB__76_576 = 10'd576;
parameter [9:0] LEGUP_F_expm1f_BB__76_577 = 10'd577;
parameter [9:0] LEGUP_F_expm1f_BB__76_578 = 10'd578;
parameter [9:0] LEGUP_F_expm1f_BB__76_579 = 10'd579;
parameter [9:0] LEGUP_F_expm1f_BB__76_580 = 10'd580;
parameter [9:0] LEGUP_F_expm1f_BB__76_581 = 10'd581;
parameter [9:0] LEGUP_F_expm1f_BB__76_582 = 10'd582;
parameter [9:0] LEGUP_F_expm1f_BB__76_583 = 10'd583;
parameter [9:0] LEGUP_F_expm1f_BB__76_584 = 10'd584;
parameter [9:0] LEGUP_F_expm1f_BB__76_585 = 10'd585;
parameter [9:0] LEGUP_F_expm1f_BB__76_586 = 10'd586;
parameter [9:0] LEGUP_F_expm1f_BB__76_587 = 10'd587;
parameter [9:0] LEGUP_F_expm1f_BB__76_588 = 10'd588;
parameter [9:0] LEGUP_F_expm1f_BB__76_589 = 10'd589;
parameter [9:0] LEGUP_F_expm1f_BB__76_590 = 10'd590;
parameter [9:0] LEGUP_F_expm1f_BB__76_591 = 10'd591;
parameter [9:0] LEGUP_F_expm1f_BB__76_592 = 10'd592;
parameter [9:0] LEGUP_F_expm1f_BB__76_593 = 10'd593;
parameter [9:0] LEGUP_F_expm1f_BB__76_594 = 10'd594;
parameter [9:0] LEGUP_F_expm1f_BB__76_595 = 10'd595;
parameter [9:0] LEGUP_F_expm1f_BB__76_596 = 10'd596;
parameter [9:0] LEGUP_F_expm1f_BB__76_597 = 10'd597;
parameter [9:0] LEGUP_F_expm1f_BB__76_598 = 10'd598;
parameter [9:0] LEGUP_F_expm1f_BB__80_599 = 10'd599;
parameter [9:0] LEGUP_F_expm1f_BB__80_600 = 10'd600;
parameter [9:0] LEGUP_F_expm1f_BB__82_601 = 10'd601;
parameter [9:0] LEGUP_F_expm1f_BB__82_602 = 10'd602;
parameter [9:0] LEGUP_F_expm1f_BB__82_603 = 10'd603;
parameter [9:0] LEGUP_F_expm1f_BB__82_604 = 10'd604;
parameter [9:0] LEGUP_F_expm1f_BB__82_605 = 10'd605;
parameter [9:0] LEGUP_F_expm1f_BB__82_606 = 10'd606;
parameter [9:0] LEGUP_F_expm1f_BB__82_607 = 10'd607;
parameter [9:0] LEGUP_F_expm1f_BB__82_608 = 10'd608;
parameter [9:0] LEGUP_F_expm1f_BB__82_609 = 10'd609;
parameter [9:0] LEGUP_F_expm1f_BB__82_610 = 10'd610;
parameter [9:0] LEGUP_F_expm1f_BB__82_611 = 10'd611;
parameter [9:0] LEGUP_F_expm1f_BB__82_612 = 10'd612;
parameter [9:0] LEGUP_F_expm1f_BB__82_613 = 10'd613;
parameter [9:0] LEGUP_F_expm1f_BB__82_614 = 10'd614;
parameter [9:0] LEGUP_F_expm1f_BB__82_615 = 10'd615;
parameter [9:0] LEGUP_F_expm1f_BB__82_616 = 10'd616;
parameter [9:0] LEGUP_F_expm1f_BB__82_617 = 10'd617;
parameter [9:0] LEGUP_F_expm1f_BB__82_618 = 10'd618;
parameter [9:0] LEGUP_F_expm1f_BB__82_619 = 10'd619;
parameter [9:0] LEGUP_F_expm1f_BB__82_620 = 10'd620;
parameter [9:0] LEGUP_F_expm1f_BB__82_621 = 10'd621;
parameter [9:0] LEGUP_F_expm1f_BB__82_622 = 10'd622;
parameter [9:0] LEGUP_F_expm1f_BB__82_623 = 10'd623;
parameter [9:0] LEGUP_F_expm1f_BB__82_624 = 10'd624;
parameter [9:0] LEGUP_F_expm1f_BB__82_625 = 10'd625;
parameter [9:0] LEGUP_F_expm1f_BB__82_626 = 10'd626;
parameter [9:0] LEGUP_F_expm1f_BB__82_627 = 10'd627;
parameter [9:0] LEGUP_F_expm1f_BB__82_628 = 10'd628;
parameter [9:0] LEGUP_F_expm1f_BB__82_629 = 10'd629;
parameter [9:0] LEGUP_F_expm1f_BB__82_630 = 10'd630;
parameter [9:0] LEGUP_F_expm1f_BB__82_631 = 10'd631;
parameter [9:0] LEGUP_F_expm1f_BB__82_632 = 10'd632;
parameter [9:0] LEGUP_F_expm1f_BB__82_633 = 10'd633;
parameter [9:0] LEGUP_F_expm1f_BB__82_634 = 10'd634;
parameter [9:0] LEGUP_F_expm1f_BB__82_635 = 10'd635;
parameter [9:0] LEGUP_F_expm1f_BB__82_636 = 10'd636;
parameter [9:0] LEGUP_F_expm1f_BB__82_637 = 10'd637;
parameter [9:0] LEGUP_F_expm1f_BB__82_638 = 10'd638;
parameter [9:0] LEGUP_F_expm1f_BB__82_639 = 10'd639;
parameter [9:0] LEGUP_F_expm1f_BB__82_640 = 10'd640;
parameter [9:0] LEGUP_F_expm1f_BB__86_641 = 10'd641;
parameter [9:0] LEGUP_F_expm1f_BB__86_642 = 10'd642;
parameter [9:0] LEGUP_F_expm1f_BB__86_643 = 10'd643;
parameter [9:0] LEGUP_F_expm1f_BB__86_644 = 10'd644;
parameter [9:0] LEGUP_F_expm1f_BB__86_645 = 10'd645;
parameter [9:0] LEGUP_F_expm1f_BB__86_646 = 10'd646;
parameter [9:0] LEGUP_F_expm1f_BB__86_647 = 10'd647;
parameter [9:0] LEGUP_F_expm1f_BB__86_648 = 10'd648;
parameter [9:0] LEGUP_F_expm1f_BB__86_649 = 10'd649;
parameter [9:0] LEGUP_F_expm1f_BB__86_650 = 10'd650;
parameter [9:0] LEGUP_F_expm1f_BB__86_651 = 10'd651;
parameter [9:0] LEGUP_F_expm1f_BB__86_652 = 10'd652;
parameter [9:0] LEGUP_F_expm1f_BB__86_653 = 10'd653;
parameter [9:0] LEGUP_F_expm1f_BB__86_654 = 10'd654;
parameter [9:0] LEGUP_F_expm1f_BB__86_655 = 10'd655;
parameter [9:0] LEGUP_F_expm1f_BB__86_656 = 10'd656;
parameter [9:0] LEGUP_F_expm1f_BB__86_657 = 10'd657;
parameter [9:0] LEGUP_F_expm1f_BB__86_658 = 10'd658;
parameter [9:0] LEGUP_F_expm1f_BB__86_659 = 10'd659;
parameter [9:0] LEGUP_F_expm1f_BB__86_660 = 10'd660;
parameter [9:0] LEGUP_F_expm1f_BB__86_661 = 10'd661;
parameter [9:0] LEGUP_F_expm1f_BB__86_662 = 10'd662;
parameter [9:0] LEGUP_F_expm1f_BB__86_663 = 10'd663;
parameter [9:0] LEGUP_F_expm1f_BB__86_664 = 10'd664;
parameter [9:0] LEGUP_F_expm1f_BB__86_665 = 10'd665;
parameter [9:0] LEGUP_F_expm1f_BB__86_666 = 10'd666;
parameter [9:0] LEGUP_F_expm1f_BB__86_667 = 10'd667;
parameter [9:0] LEGUP_F_expm1f_BB__86_668 = 10'd668;
parameter [9:0] LEGUP_F_expm1f_BB__86_669 = 10'd669;
parameter [9:0] LEGUP_F_expm1f_BB__86_670 = 10'd670;
parameter [9:0] LEGUP_F_expm1f_BB__86_671 = 10'd671;
parameter [9:0] LEGUP_F_expm1f_BB__86_672 = 10'd672;
parameter [9:0] LEGUP_F_expm1f_BB__86_673 = 10'd673;
parameter [9:0] LEGUP_F_expm1f_BB__86_674 = 10'd674;
parameter [9:0] LEGUP_F_expm1f_BB__86_675 = 10'd675;
parameter [9:0] LEGUP_F_expm1f_BB__86_676 = 10'd676;
parameter [9:0] LEGUP_F_expm1f_BB__86_677 = 10'd677;
parameter [9:0] LEGUP_F_expm1f_BB__86_678 = 10'd678;
parameter [9:0] LEGUP_F_expm1f_BB__86_679 = 10'd679;
parameter [9:0] LEGUP_F_expm1f_BB__86_680 = 10'd680;
parameter [9:0] LEGUP_F_expm1f_BB__90_681 = 10'd681;
parameter [9:0] LEGUP_F_expm1f_BB__92_682 = 10'd682;
parameter [9:0] LEGUP_F_expm1f_BB__92_683 = 10'd683;
parameter [9:0] LEGUP_F_expm1f_BB__92_684 = 10'd684;
parameter [9:0] LEGUP_F_expm1f_BB__92_685 = 10'd685;
parameter [9:0] LEGUP_F_expm1f_BB__92_686 = 10'd686;
parameter [9:0] LEGUP_F_expm1f_BB__92_687 = 10'd687;
parameter [9:0] LEGUP_F_expm1f_BB__92_688 = 10'd688;
parameter [9:0] LEGUP_F_expm1f_BB__92_689 = 10'd689;
parameter [9:0] LEGUP_F_expm1f_BB__92_690 = 10'd690;
parameter [9:0] LEGUP_F_expm1f_BB__92_691 = 10'd691;
parameter [9:0] LEGUP_F_expm1f_BB__92_692 = 10'd692;
parameter [9:0] LEGUP_F_expm1f_BB__92_693 = 10'd693;
parameter [9:0] LEGUP_F_expm1f_BB__92_694 = 10'd694;
parameter [9:0] LEGUP_F_expm1f_BB__92_695 = 10'd695;
parameter [9:0] LEGUP_F_expm1f_BB__92_696 = 10'd696;
parameter [9:0] LEGUP_F_expm1f_BB__92_697 = 10'd697;
parameter [9:0] LEGUP_F_expm1f_BB__92_698 = 10'd698;
parameter [9:0] LEGUP_F_expm1f_BB__92_699 = 10'd699;
parameter [9:0] LEGUP_F_expm1f_BB__92_700 = 10'd700;
parameter [9:0] LEGUP_F_expm1f_BB__92_701 = 10'd701;
parameter [9:0] LEGUP_F_expm1f_BB__92_702 = 10'd702;
parameter [9:0] LEGUP_F_expm1f_BB__92_703 = 10'd703;
parameter [9:0] LEGUP_F_expm1f_BB__92_704 = 10'd704;
parameter [9:0] LEGUP_F_expm1f_BB__92_705 = 10'd705;
parameter [9:0] LEGUP_F_expm1f_BB__92_706 = 10'd706;
parameter [9:0] LEGUP_F_expm1f_BB__92_707 = 10'd707;
parameter [9:0] LEGUP_F_expm1f_BB__92_708 = 10'd708;
parameter [9:0] LEGUP_F_expm1f_BB__92_709 = 10'd709;
parameter [9:0] LEGUP_F_expm1f_BB__92_710 = 10'd710;
parameter [9:0] LEGUP_F_expm1f_BB__92_711 = 10'd711;
parameter [9:0] LEGUP_F_expm1f_BB__92_712 = 10'd712;
parameter [9:0] LEGUP_F_expm1f_BB__92_713 = 10'd713;
parameter [9:0] LEGUP_F_expm1f_BB__92_714 = 10'd714;
parameter [9:0] LEGUP_F_expm1f_BB__92_715 = 10'd715;
parameter [9:0] LEGUP_F_expm1f_BB__92_716 = 10'd716;
parameter [9:0] LEGUP_F_expm1f_BB__92_717 = 10'd717;
parameter [9:0] LEGUP_F_expm1f_BB__92_718 = 10'd718;
parameter [9:0] LEGUP_F_expm1f_BB__92_719 = 10'd719;
parameter [9:0] LEGUP_F_expm1f_BB__92_720 = 10'd720;
parameter [9:0] LEGUP_F_expm1f_BB__92_721 = 10'd721;
parameter [9:0] LEGUP_F_expm1f_BB__92_722 = 10'd722;
parameter [9:0] LEGUP_F_expm1f_BB__92_723 = 10'd723;
parameter [9:0] LEGUP_F_expm1f_BB__92_724 = 10'd724;
parameter [9:0] LEGUP_F_expm1f_BB__100_725 = 10'd725;
parameter [9:0] LEGUP_F_expm1f_BB__102_726 = 10'd726;
parameter [9:0] LEGUP_F_expm1f_BB__102_727 = 10'd727;
parameter [9:0] LEGUP_F_expm1f_BB__102_728 = 10'd728;
parameter [9:0] LEGUP_F_expm1f_BB__102_729 = 10'd729;
parameter [9:0] LEGUP_F_expm1f_BB__102_730 = 10'd730;
parameter [9:0] LEGUP_F_expm1f_BB__102_731 = 10'd731;
parameter [9:0] LEGUP_F_expm1f_BB__102_732 = 10'd732;
parameter [9:0] LEGUP_F_expm1f_BB__102_733 = 10'd733;
parameter [9:0] LEGUP_F_expm1f_BB__102_734 = 10'd734;
parameter [9:0] LEGUP_F_expm1f_BB__102_735 = 10'd735;
parameter [9:0] LEGUP_F_expm1f_BB__102_736 = 10'd736;
parameter [9:0] LEGUP_F_expm1f_BB__102_737 = 10'd737;
parameter [9:0] LEGUP_F_expm1f_BB__102_738 = 10'd738;
parameter [9:0] LEGUP_F_expm1f_BB__102_739 = 10'd739;
parameter [9:0] LEGUP_F_expm1f_BB__102_740 = 10'd740;
parameter [9:0] LEGUP_F_expm1f_BB__102_741 = 10'd741;
parameter [9:0] LEGUP_F_expm1f_BB__102_742 = 10'd742;
parameter [9:0] LEGUP_F_expm1f_BB__102_743 = 10'd743;
parameter [9:0] LEGUP_F_expm1f_BB__102_744 = 10'd744;
parameter [9:0] LEGUP_F_expm1f_BB__102_745 = 10'd745;
parameter [9:0] LEGUP_F_expm1f_BB__102_746 = 10'd746;
parameter [9:0] LEGUP_F_expm1f_BB__102_747 = 10'd747;
parameter [9:0] LEGUP_F_expm1f_BB__102_748 = 10'd748;
parameter [9:0] LEGUP_F_expm1f_BB__102_749 = 10'd749;
parameter [9:0] LEGUP_F_expm1f_BB__102_750 = 10'd750;
parameter [9:0] LEGUP_F_expm1f_BB__102_751 = 10'd751;
parameter [9:0] LEGUP_F_expm1f_BB__102_752 = 10'd752;
parameter [9:0] LEGUP_F_expm1f_BB__102_753 = 10'd753;
parameter [9:0] LEGUP_F_expm1f_BB__102_754 = 10'd754;
parameter [9:0] LEGUP_F_expm1f_BB__112_755 = 10'd755;
parameter [9:0] LEGUP_F_expm1f_BB__112_756 = 10'd756;
parameter [9:0] LEGUP_F_expm1f_BB__112_757 = 10'd757;
parameter [9:0] LEGUP_F_expm1f_BB__112_758 = 10'd758;
parameter [9:0] LEGUP_F_expm1f_BB__112_759 = 10'd759;
parameter [9:0] LEGUP_F_expm1f_BB__112_760 = 10'd760;
parameter [9:0] LEGUP_F_expm1f_BB__112_761 = 10'd761;
parameter [9:0] LEGUP_F_expm1f_BB__112_762 = 10'd762;
parameter [9:0] LEGUP_F_expm1f_BB__112_763 = 10'd763;
parameter [9:0] LEGUP_F_expm1f_BB__112_764 = 10'd764;
parameter [9:0] LEGUP_F_expm1f_BB__112_765 = 10'd765;
parameter [9:0] LEGUP_F_expm1f_BB__112_766 = 10'd766;
parameter [9:0] LEGUP_F_expm1f_BB__112_767 = 10'd767;
parameter [9:0] LEGUP_F_expm1f_BB__112_768 = 10'd768;
parameter [9:0] LEGUP_F_expm1f_BB__112_769 = 10'd769;
parameter [9:0] LEGUP_F_expm1f_BB__112_770 = 10'd770;
parameter [9:0] LEGUP_F_expm1f_BB__112_771 = 10'd771;
parameter [9:0] LEGUP_F_expm1f_BB__112_772 = 10'd772;
parameter [9:0] LEGUP_F_expm1f_BB__112_773 = 10'd773;
parameter [9:0] LEGUP_F_expm1f_BB__112_774 = 10'd774;
parameter [9:0] LEGUP_F_expm1f_BB__112_775 = 10'd775;
parameter [9:0] LEGUP_F_expm1f_BB__112_776 = 10'd776;
parameter [9:0] LEGUP_F_expm1f_BB__112_777 = 10'd777;
parameter [9:0] LEGUP_F_expm1f_BB__112_778 = 10'd778;
parameter [9:0] LEGUP_F_expm1f_BB__112_779 = 10'd779;
parameter [9:0] LEGUP_F_expm1f_BB__112_780 = 10'd780;
parameter [9:0] LEGUP_F_expm1f_BB__112_781 = 10'd781;
parameter [9:0] LEGUP_F_expm1f_BB__112_782 = 10'd782;
parameter [9:0] LEGUP_F_expm1f_BB__112_783 = 10'd783;
parameter [9:0] LEGUP_F_expm1f_BB__112_784 = 10'd784;
parameter [9:0] LEGUP_F_expm1f_BB__112_785 = 10'd785;
parameter [9:0] LEGUP_F_expm1f_BB__112_786 = 10'd786;
parameter [9:0] LEGUP_F_expm1f_BB__112_787 = 10'd787;
parameter [9:0] LEGUP_F_expm1f_BB__112_788 = 10'd788;
parameter [9:0] LEGUP_F_expm1f_BB__112_789 = 10'd789;
parameter [9:0] LEGUP_F_expm1f_BB__112_790 = 10'd790;
parameter [9:0] LEGUP_F_expm1f_BB__112_791 = 10'd791;
parameter [9:0] LEGUP_F_expm1f_BB__112_792 = 10'd792;
parameter [9:0] LEGUP_F_expm1f_BB__112_793 = 10'd793;
parameter [9:0] LEGUP_F_expm1f_BB__112_794 = 10'd794;
parameter [9:0] LEGUP_F_expm1f_BB__112_795 = 10'd795;
parameter [9:0] LEGUP_F_expm1f_BB__112_796 = 10'd796;
parameter [9:0] LEGUP_F_expm1f_BB__112_797 = 10'd797;
parameter [9:0] LEGUP_F_expm1f_BB__123_798 = 10'd798;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 55'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_x;
reg [9:0] cur_state;
reg [9:0] next_state;
reg [31:0] expm1f_0_1;
reg [31:0] expm1f_0_1_reg;
reg  expm1f_0_2;
reg  expm1f_0_2_reg;
reg [31:0] expm1f_4_5;
reg [31:0] expm1f_4_5_reg;
reg  expm1f_4_6;
reg  expm1f_7_8;
reg [31:0] expm1f_9_10;
reg [31:0] expm1f_9_10_reg;
reg  expm1f_11_12;
reg [31:0] expm1f_13_x;
reg  expm1f_15_16;
reg [31:0] expm1f_thread_17;
reg  expm1f_thread_18;
reg  expm1f_threadpresplit_19;
reg  expm1f_20_21;
reg [31:0] expm1f_23_24;
reg [31:0] expm1f_25_26;
reg [31:0] expm1f_27_28;
reg [31:0] expm1f_27_28_reg;
reg [31:0] expm1f_27_29;
reg [31:0] expm1f_27_29_reg;
reg [31:0] expm1f_27_30;
reg [31:0] expm1f_27_31;
reg [31:0] expm1f_27_31_reg;
reg [31:0] expm1f_27_32;
reg [31:0] expm1f_27_32_reg;
reg [31:0] expm1f_27_33;
reg [31:0] expm1f_27_34;
reg [31:0] expm1f_27_35;
reg [31:0] expm1f_27_35_reg;
reg [31:0] expm1f_36_k0;
reg [31:0] expm1f_36_k0_reg;
reg [31:0] expm1f_36_lo0;
reg [31:0] expm1f_36_lo0_reg;
reg [31:0] expm1f_36_hi0;
reg [31:0] expm1f_36_hi0_reg;
reg [31:0] expm1f_36_37;
reg [31:0] expm1f_36_37_reg;
reg [31:0] expm1f_36_38;
reg [31:0] expm1f_36_39;
reg  expm1f_40_41;
reg [31:0] expm1f_42_43;
reg [31:0] expm1f_42_44;
reg [31:0] expm1f_42_45;
reg [31:0] expm1f_46_k1;
reg [31:0] expm1f_46_k1_reg;
reg [31:0] expm1f_46_c0;
reg [31:0] expm1f_46_c0_reg;
reg [31:0] expm1f_46_062;
reg [31:0] expm1f_46_062_reg;
reg [31:0] expm1f_46_47;
reg [31:0] expm1f_46_47_reg;
reg [31:0] expm1f_46_48;
reg [31:0] expm1f_46_48_reg;
reg [31:0] expm1f_46_49;
reg [31:0] expm1f_46_50;
reg [31:0] expm1f_46_51;
reg [31:0] expm1f_46_52;
reg [31:0] expm1f_46_53;
reg [31:0] expm1f_46_54;
reg [31:0] expm1f_46_55;
reg [31:0] expm1f_46_56;
reg [31:0] expm1f_46_57;
reg [31:0] expm1f_46_58;
reg [31:0] expm1f_46_58_reg;
reg [31:0] expm1f_46_59;
reg [31:0] expm1f_46_60;
reg [31:0] expm1f_46_61;
reg [31:0] expm1f_46_61_reg;
reg [31:0] expm1f_46_62;
reg [31:0] expm1f_46_63;
reg [31:0] expm1f_46_64;
reg [31:0] expm1f_46_65;
reg [31:0] expm1f_46_65_reg;
reg  expm1f_46_66;
reg  expm1f_46_66_reg;
reg [31:0] expm1f_67_68;
reg [31:0] expm1f_67_69;
reg [31:0] expm1f_67_70;
reg [31:0] expm1f_71_72;
reg [31:0] expm1f_71_73;
reg [31:0] expm1f_71_74;
reg [31:0] expm1f_71_75;
reg [31:0] expm1f_71_75_reg;
reg [31:0] expm1f_76_77;
reg [31:0] expm1f_76_78;
reg [31:0] expm1f_76_79;
reg  expm1f_80_81;
reg [31:0] expm1f_82_83;
reg [31:0] expm1f_82_84;
reg [31:0] expm1f_82_85;
reg [31:0] expm1f_86_87;
reg [31:0] expm1f_86_88;
reg [31:0] expm1f_86_89;
reg [31:0] expm1f_90_k1off;
reg  expm1f_90_91;
reg [31:0] expm1f_92_93;
reg [31:0] expm1f_92_94;
reg [31:0] expm1f_92_95;
reg [31:0] expm1f_92_96;
reg [31:0] expm1f_92_96_reg;
reg [31:0] expm1f_92_97;
reg [31:0] expm1f_92_98;
reg [31:0] expm1f_92_99;
reg  expm1f_100_101;
reg [31:0] expm1f_102_103;
reg [31:0] expm1f_102_104;
reg [31:0] expm1f_102_105;
reg [31:0] expm1f_102_105_reg;
reg [31:0] expm1f_102_106;
reg [31:0] expm1f_102_107;
reg [31:0] expm1f_102_108;
reg [31:0] expm1f_102_109;
reg [31:0] expm1f_102_109_reg;
reg [31:0] expm1f_102_110;
reg [31:0] expm1f_102_111;
reg [31:0] expm1f_112_113;
reg [31:0] expm1f_112_114;
reg [31:0] expm1f_112_115;
reg [31:0] expm1f_112_116;
reg [31:0] expm1f_112_117;
reg [31:0] expm1f_112_118;
reg [31:0] expm1f_112_119;
reg [31:0] expm1f_112_120;
reg [31:0] expm1f_112_120_reg;
reg [31:0] expm1f_112_121;
reg [31:0] expm1f_112_122;
reg [31:0] expm1f_123_0;
reg [31:0] expm1f_123_0_reg;
reg [31:0] expm1f_altfp_add_32_0_op0;
reg [31:0] expm1f_altfp_add_32_0_op1;
wire [31:0] altfp_adder_expm1f_9_10_out;
reg  altfp_expm1f_9_10_en;
reg [31:0] expm1f_altfp_add_32_0;
reg [31:0] expm1f_altfp_multiply_32_0_op0;
reg [31:0] expm1f_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_expm1f_27_28_out;
reg  altfp_expm1f_27_28_en;
reg [31:0] expm1f_altfp_multiply_32_0;
reg [31:0] expm1f_altfp_fptosi_32_0_op0;
wire [31:0] altfp_fptosi32_expm1f_27_31_out;
reg  altfp_expm1f_27_31_en;
reg [31:0] expm1f_altfp_fptosi_32_0;
reg [31:0] expm1f_altfp_sitofp_32_0_op0;
wire [31:0] altfp_sitofp32_expm1f_27_32_out;
reg  altfp_expm1f_27_32_en;
reg [31:0] expm1f_altfp_sitofp_32_0;
reg [31:0] expm1f_altfp_subtract_32_0_op0;
reg [31:0] expm1f_altfp_subtract_32_0_op1;
wire [31:0] altfp_subtractor_expm1f_27_34_out;
reg  altfp_expm1f_27_34_en;
reg [31:0] expm1f_altfp_subtract_32_0;
reg [31:0] expm1f_altfp_divide_32_0_op0;
reg [31:0] expm1f_altfp_divide_32_0_op1;
wire [31:0] altfp_divider_expm1f_46_64_out;
reg  altfp_expm1f_46_64_en;
reg [31:0] expm1f_altfp_divide_32_0;
wire  altfp_compare32_1_expm1f_thread_18_out;
reg  altfp_expm1f_thread_18_en;
wire  expm1f_thread_18_unused;
wire  altfp_compare32_1_expm1f_80_81_out;
reg  altfp_expm1f_80_81_en;
wire  expm1f_80_81_unused;

/*   %10 = fadd float %x, %x*/
altfp_adder_14 altfp_adder_14_expm1f_9_10 (
	.result (altfp_adder_expm1f_9_10_out),
	.dataa (expm1f_altfp_add_32_0_op0),
	.datab (expm1f_altfp_add_32_0_op1),
	.clock (clk),
	.clk_en (altfp_expm1f_9_10_en)
);


/*   %28 = fmul float %x, 0x3FF7154760000000*/
altfp_multiplier_11 altfp_multiplier_11_expm1f_27_28 (
	.result (altfp_multiplier_expm1f_27_28_out),
	.dataa (expm1f_altfp_multiply_32_0_op0),
	.datab (expm1f_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_expm1f_27_28_en)
);


/*   %31 = fptosi float %30 to i32*/
altfp_fptosi32_6 altfp_fptosi32_6_expm1f_27_31 (
	.result (altfp_fptosi32_expm1f_27_31_out),
	.dataa (expm1f_altfp_fptosi_32_0_op0),
	.clock (clk),
	.clk_en (altfp_expm1f_27_31_en)
);


/*   %32 = sitofp i32 %31 to float*/
altfp_sitofp32_6 altfp_sitofp32_6_expm1f_27_32 (
	.result (altfp_sitofp32_expm1f_27_32_out),
	.dataa (expm1f_altfp_sitofp_32_0_op0),
	.clock (clk),
	.clk_en (altfp_expm1f_27_32_en)
);


/*   %34 = fsub float %x, %33*/
altfp_subtractor_14 altfp_subtractor_14_expm1f_27_34 (
	.result (altfp_subtractor_expm1f_27_34_out),
	.dataa (expm1f_altfp_subtract_32_0_op0),
	.datab (expm1f_altfp_subtract_32_0_op1),
	.clock (clk),
	.clk_en (altfp_expm1f_27_34_en)
);


/*   %64 = fdiv float %61, %63*/
altfp_divider_33 altfp_divider_33_expm1f_46_64 (
	.result (altfp_divider_expm1f_46_64_out),
	.dataa (expm1f_altfp_divide_32_0_op0),
	.datab (expm1f_altfp_divide_32_0_op1),
	.clock (clk),
	.clk_en (altfp_expm1f_46_64_en)
);


/*   %18 = fcmp olt float %17, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_expm1f_thread_18 (
	.dataa (expm1f_thread_17),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_expm1f_thread_18_en),
	.aeb (expm1f_thread_18_unused),
	.aneb (expm1f_thread_18_unused),
	.alb (altfp_compare32_1_expm1f_thread_18_out),
	.aleb (expm1f_thread_18_unused),
	.agb (expm1f_thread_18_unused),
	.ageb (expm1f_thread_18_unused),
	.unordered (expm1f_thread_18_unused)
);


/*   %81 = fcmp olt float %.062, -2.500000e-01*/
altfp_compare32_1 altfp_compare32_1_expm1f_80_81 (
	.dataa (expm1f_46_062_reg),
	.datab (32'hBE800000),
	.clock (clk),
	.clk_en (altfp_expm1f_80_81_en),
	.aeb (expm1f_80_81_unused),
	.aneb (expm1f_80_81_unused),
	.alb (altfp_compare32_1_expm1f_80_81_out),
	.aleb (expm1f_80_81_unused),
	.agb (expm1f_80_81_unused),
	.ageb (expm1f_80_81_unused),
	.unordered (expm1f_80_81_unused)
);



always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_expm1f_BB__0_1;
LEGUP_F_expm1f_BB__0_1:
	if ((expm1f_0_2 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__4_3;
	else if ((expm1f_0_2 == 1'd0))
		next_state = LEGUP_F_expm1f_BB__3_2;
LEGUP_F_expm1f_BB__100_725:
	if ((expm1f_100_101 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__102_726;
	else if ((expm1f_100_101 == 1'd0))
		next_state = LEGUP_F_expm1f_BB__112_755;
LEGUP_F_expm1f_BB__102_726:
		next_state = LEGUP_F_expm1f_BB__102_727;
LEGUP_F_expm1f_BB__102_727:
		next_state = LEGUP_F_expm1f_BB__102_728;
LEGUP_F_expm1f_BB__102_728:
		next_state = LEGUP_F_expm1f_BB__102_729;
LEGUP_F_expm1f_BB__102_729:
		next_state = LEGUP_F_expm1f_BB__102_730;
LEGUP_F_expm1f_BB__102_730:
		next_state = LEGUP_F_expm1f_BB__102_731;
LEGUP_F_expm1f_BB__102_731:
		next_state = LEGUP_F_expm1f_BB__102_732;
LEGUP_F_expm1f_BB__102_732:
		next_state = LEGUP_F_expm1f_BB__102_733;
LEGUP_F_expm1f_BB__102_733:
		next_state = LEGUP_F_expm1f_BB__102_734;
LEGUP_F_expm1f_BB__102_734:
		next_state = LEGUP_F_expm1f_BB__102_735;
LEGUP_F_expm1f_BB__102_735:
		next_state = LEGUP_F_expm1f_BB__102_736;
LEGUP_F_expm1f_BB__102_736:
		next_state = LEGUP_F_expm1f_BB__102_737;
LEGUP_F_expm1f_BB__102_737:
		next_state = LEGUP_F_expm1f_BB__102_738;
LEGUP_F_expm1f_BB__102_738:
		next_state = LEGUP_F_expm1f_BB__102_739;
LEGUP_F_expm1f_BB__102_739:
		next_state = LEGUP_F_expm1f_BB__102_740;
LEGUP_F_expm1f_BB__102_740:
		next_state = LEGUP_F_expm1f_BB__102_741;
LEGUP_F_expm1f_BB__102_741:
		next_state = LEGUP_F_expm1f_BB__102_742;
LEGUP_F_expm1f_BB__102_742:
		next_state = LEGUP_F_expm1f_BB__102_743;
LEGUP_F_expm1f_BB__102_743:
		next_state = LEGUP_F_expm1f_BB__102_744;
LEGUP_F_expm1f_BB__102_744:
		next_state = LEGUP_F_expm1f_BB__102_745;
LEGUP_F_expm1f_BB__102_745:
		next_state = LEGUP_F_expm1f_BB__102_746;
LEGUP_F_expm1f_BB__102_746:
		next_state = LEGUP_F_expm1f_BB__102_747;
LEGUP_F_expm1f_BB__102_747:
		next_state = LEGUP_F_expm1f_BB__102_748;
LEGUP_F_expm1f_BB__102_748:
		next_state = LEGUP_F_expm1f_BB__102_749;
LEGUP_F_expm1f_BB__102_749:
		next_state = LEGUP_F_expm1f_BB__102_750;
LEGUP_F_expm1f_BB__102_750:
		next_state = LEGUP_F_expm1f_BB__102_751;
LEGUP_F_expm1f_BB__102_751:
		next_state = LEGUP_F_expm1f_BB__102_752;
LEGUP_F_expm1f_BB__102_752:
		next_state = LEGUP_F_expm1f_BB__102_753;
LEGUP_F_expm1f_BB__102_753:
		next_state = LEGUP_F_expm1f_BB__102_754;
LEGUP_F_expm1f_BB__102_754:
		next_state = LEGUP_F_expm1f_BB__123_798;
LEGUP_F_expm1f_BB__112_755:
		next_state = LEGUP_F_expm1f_BB__112_756;
LEGUP_F_expm1f_BB__112_756:
		next_state = LEGUP_F_expm1f_BB__112_757;
LEGUP_F_expm1f_BB__112_757:
		next_state = LEGUP_F_expm1f_BB__112_758;
LEGUP_F_expm1f_BB__112_758:
		next_state = LEGUP_F_expm1f_BB__112_759;
LEGUP_F_expm1f_BB__112_759:
		next_state = LEGUP_F_expm1f_BB__112_760;
LEGUP_F_expm1f_BB__112_760:
		next_state = LEGUP_F_expm1f_BB__112_761;
LEGUP_F_expm1f_BB__112_761:
		next_state = LEGUP_F_expm1f_BB__112_762;
LEGUP_F_expm1f_BB__112_762:
		next_state = LEGUP_F_expm1f_BB__112_763;
LEGUP_F_expm1f_BB__112_763:
		next_state = LEGUP_F_expm1f_BB__112_764;
LEGUP_F_expm1f_BB__112_764:
		next_state = LEGUP_F_expm1f_BB__112_765;
LEGUP_F_expm1f_BB__112_765:
		next_state = LEGUP_F_expm1f_BB__112_766;
LEGUP_F_expm1f_BB__112_766:
		next_state = LEGUP_F_expm1f_BB__112_767;
LEGUP_F_expm1f_BB__112_767:
		next_state = LEGUP_F_expm1f_BB__112_768;
LEGUP_F_expm1f_BB__112_768:
		next_state = LEGUP_F_expm1f_BB__112_769;
LEGUP_F_expm1f_BB__112_769:
		next_state = LEGUP_F_expm1f_BB__112_770;
LEGUP_F_expm1f_BB__112_770:
		next_state = LEGUP_F_expm1f_BB__112_771;
LEGUP_F_expm1f_BB__112_771:
		next_state = LEGUP_F_expm1f_BB__112_772;
LEGUP_F_expm1f_BB__112_772:
		next_state = LEGUP_F_expm1f_BB__112_773;
LEGUP_F_expm1f_BB__112_773:
		next_state = LEGUP_F_expm1f_BB__112_774;
LEGUP_F_expm1f_BB__112_774:
		next_state = LEGUP_F_expm1f_BB__112_775;
LEGUP_F_expm1f_BB__112_775:
		next_state = LEGUP_F_expm1f_BB__112_776;
LEGUP_F_expm1f_BB__112_776:
		next_state = LEGUP_F_expm1f_BB__112_777;
LEGUP_F_expm1f_BB__112_777:
		next_state = LEGUP_F_expm1f_BB__112_778;
LEGUP_F_expm1f_BB__112_778:
		next_state = LEGUP_F_expm1f_BB__112_779;
LEGUP_F_expm1f_BB__112_779:
		next_state = LEGUP_F_expm1f_BB__112_780;
LEGUP_F_expm1f_BB__112_780:
		next_state = LEGUP_F_expm1f_BB__112_781;
LEGUP_F_expm1f_BB__112_781:
		next_state = LEGUP_F_expm1f_BB__112_782;
LEGUP_F_expm1f_BB__112_782:
		next_state = LEGUP_F_expm1f_BB__112_783;
LEGUP_F_expm1f_BB__112_783:
		next_state = LEGUP_F_expm1f_BB__112_784;
LEGUP_F_expm1f_BB__112_784:
		next_state = LEGUP_F_expm1f_BB__112_785;
LEGUP_F_expm1f_BB__112_785:
		next_state = LEGUP_F_expm1f_BB__112_786;
LEGUP_F_expm1f_BB__112_786:
		next_state = LEGUP_F_expm1f_BB__112_787;
LEGUP_F_expm1f_BB__112_787:
		next_state = LEGUP_F_expm1f_BB__112_788;
LEGUP_F_expm1f_BB__112_788:
		next_state = LEGUP_F_expm1f_BB__112_789;
LEGUP_F_expm1f_BB__112_789:
		next_state = LEGUP_F_expm1f_BB__112_790;
LEGUP_F_expm1f_BB__112_790:
		next_state = LEGUP_F_expm1f_BB__112_791;
LEGUP_F_expm1f_BB__112_791:
		next_state = LEGUP_F_expm1f_BB__112_792;
LEGUP_F_expm1f_BB__112_792:
		next_state = LEGUP_F_expm1f_BB__112_793;
LEGUP_F_expm1f_BB__112_793:
		next_state = LEGUP_F_expm1f_BB__112_794;
LEGUP_F_expm1f_BB__112_794:
		next_state = LEGUP_F_expm1f_BB__112_795;
LEGUP_F_expm1f_BB__112_795:
		next_state = LEGUP_F_expm1f_BB__112_796;
LEGUP_F_expm1f_BB__112_796:
		next_state = LEGUP_F_expm1f_BB__112_797;
LEGUP_F_expm1f_BB__112_797:
		next_state = LEGUP_F_expm1f_BB__123_798;
LEGUP_F_expm1f_BB__11_20:
	if ((expm1f_11_12 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__13_21;
	else if ((expm1f_11_12 == 1'd0))
		next_state = LEGUP_F_expm1f_BB__14_22;
LEGUP_F_expm1f_BB__123_798:
		next_state = LEGUP_0;
LEGUP_F_expm1f_BB__13_21:
		next_state = LEGUP_0;
LEGUP_F_expm1f_BB__14_22:
	if ((expm1f_0_2_reg == 1'd1))
		next_state = LEGUP_F_expm1f_BB__15_23;
	else if ((expm1f_0_2_reg == 1'd0))
		next_state = LEGUP_F_expm1f_BB_thread_24;
LEGUP_F_expm1f_BB__15_23:
	if ((expm1f_15_16 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__123_798;
	else if ((expm1f_15_16 == 1'd0))
		next_state = LEGUP_F_expm1f_BB_threadpresplit_40;
LEGUP_F_expm1f_BB__20_41:
	if ((expm1f_20_21 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__22_42;
	else if ((expm1f_20_21 == 1'd0))
		next_state = LEGUP_F_expm1f_BB__27_73;
LEGUP_F_expm1f_BB__22_42:
	if ((expm1f_0_2_reg == 1'd1))
		next_state = LEGUP_F_expm1f_BB__23_43;
	else if ((expm1f_0_2_reg == 1'd0))
		next_state = LEGUP_F_expm1f_BB__25_58;
LEGUP_F_expm1f_BB__23_43:
		next_state = LEGUP_F_expm1f_BB__23_44;
LEGUP_F_expm1f_BB__23_44:
		next_state = LEGUP_F_expm1f_BB__23_45;
LEGUP_F_expm1f_BB__23_45:
		next_state = LEGUP_F_expm1f_BB__23_46;
LEGUP_F_expm1f_BB__23_46:
		next_state = LEGUP_F_expm1f_BB__23_47;
LEGUP_F_expm1f_BB__23_47:
		next_state = LEGUP_F_expm1f_BB__23_48;
LEGUP_F_expm1f_BB__23_48:
		next_state = LEGUP_F_expm1f_BB__23_49;
LEGUP_F_expm1f_BB__23_49:
		next_state = LEGUP_F_expm1f_BB__23_50;
LEGUP_F_expm1f_BB__23_50:
		next_state = LEGUP_F_expm1f_BB__23_51;
LEGUP_F_expm1f_BB__23_51:
		next_state = LEGUP_F_expm1f_BB__23_52;
LEGUP_F_expm1f_BB__23_52:
		next_state = LEGUP_F_expm1f_BB__23_53;
LEGUP_F_expm1f_BB__23_53:
		next_state = LEGUP_F_expm1f_BB__23_54;
LEGUP_F_expm1f_BB__23_54:
		next_state = LEGUP_F_expm1f_BB__23_55;
LEGUP_F_expm1f_BB__23_55:
		next_state = LEGUP_F_expm1f_BB__23_56;
LEGUP_F_expm1f_BB__23_56:
		next_state = LEGUP_F_expm1f_BB__23_57;
LEGUP_F_expm1f_BB__23_57:
		next_state = LEGUP_F_expm1f_BB__36_136;
LEGUP_F_expm1f_BB__25_58:
		next_state = LEGUP_F_expm1f_BB__25_59;
LEGUP_F_expm1f_BB__25_59:
		next_state = LEGUP_F_expm1f_BB__25_60;
LEGUP_F_expm1f_BB__25_60:
		next_state = LEGUP_F_expm1f_BB__25_61;
LEGUP_F_expm1f_BB__25_61:
		next_state = LEGUP_F_expm1f_BB__25_62;
LEGUP_F_expm1f_BB__25_62:
		next_state = LEGUP_F_expm1f_BB__25_63;
LEGUP_F_expm1f_BB__25_63:
		next_state = LEGUP_F_expm1f_BB__25_64;
LEGUP_F_expm1f_BB__25_64:
		next_state = LEGUP_F_expm1f_BB__25_65;
LEGUP_F_expm1f_BB__25_65:
		next_state = LEGUP_F_expm1f_BB__25_66;
LEGUP_F_expm1f_BB__25_66:
		next_state = LEGUP_F_expm1f_BB__25_67;
LEGUP_F_expm1f_BB__25_67:
		next_state = LEGUP_F_expm1f_BB__25_68;
LEGUP_F_expm1f_BB__25_68:
		next_state = LEGUP_F_expm1f_BB__25_69;
LEGUP_F_expm1f_BB__25_69:
		next_state = LEGUP_F_expm1f_BB__25_70;
LEGUP_F_expm1f_BB__25_70:
		next_state = LEGUP_F_expm1f_BB__25_71;
LEGUP_F_expm1f_BB__25_71:
		next_state = LEGUP_F_expm1f_BB__25_72;
LEGUP_F_expm1f_BB__25_72:
		next_state = LEGUP_F_expm1f_BB__36_136;
LEGUP_F_expm1f_BB__27_100:
		next_state = LEGUP_F_expm1f_BB__27_101;
LEGUP_F_expm1f_BB__27_101:
		next_state = LEGUP_F_expm1f_BB__27_102;
LEGUP_F_expm1f_BB__27_102:
		next_state = LEGUP_F_expm1f_BB__27_103;
LEGUP_F_expm1f_BB__27_103:
		next_state = LEGUP_F_expm1f_BB__27_104;
LEGUP_F_expm1f_BB__27_104:
		next_state = LEGUP_F_expm1f_BB__27_105;
LEGUP_F_expm1f_BB__27_105:
		next_state = LEGUP_F_expm1f_BB__27_106;
LEGUP_F_expm1f_BB__27_106:
		next_state = LEGUP_F_expm1f_BB__27_107;
LEGUP_F_expm1f_BB__27_107:
		next_state = LEGUP_F_expm1f_BB__27_108;
LEGUP_F_expm1f_BB__27_108:
		next_state = LEGUP_F_expm1f_BB__27_109;
LEGUP_F_expm1f_BB__27_109:
		next_state = LEGUP_F_expm1f_BB__27_110;
LEGUP_F_expm1f_BB__27_110:
		next_state = LEGUP_F_expm1f_BB__27_111;
LEGUP_F_expm1f_BB__27_111:
		next_state = LEGUP_F_expm1f_BB__27_112;
LEGUP_F_expm1f_BB__27_112:
		next_state = LEGUP_F_expm1f_BB__27_113;
LEGUP_F_expm1f_BB__27_113:
		next_state = LEGUP_F_expm1f_BB__27_114;
LEGUP_F_expm1f_BB__27_114:
		next_state = LEGUP_F_expm1f_BB__27_115;
LEGUP_F_expm1f_BB__27_115:
		next_state = LEGUP_F_expm1f_BB__27_116;
LEGUP_F_expm1f_BB__27_116:
		next_state = LEGUP_F_expm1f_BB__27_117;
LEGUP_F_expm1f_BB__27_117:
		next_state = LEGUP_F_expm1f_BB__27_118;
LEGUP_F_expm1f_BB__27_118:
		next_state = LEGUP_F_expm1f_BB__27_119;
LEGUP_F_expm1f_BB__27_119:
		next_state = LEGUP_F_expm1f_BB__27_120;
LEGUP_F_expm1f_BB__27_120:
		next_state = LEGUP_F_expm1f_BB__27_121;
LEGUP_F_expm1f_BB__27_121:
		next_state = LEGUP_F_expm1f_BB__27_122;
LEGUP_F_expm1f_BB__27_122:
		next_state = LEGUP_F_expm1f_BB__27_123;
LEGUP_F_expm1f_BB__27_123:
		next_state = LEGUP_F_expm1f_BB__27_124;
LEGUP_F_expm1f_BB__27_124:
		next_state = LEGUP_F_expm1f_BB__27_125;
LEGUP_F_expm1f_BB__27_125:
		next_state = LEGUP_F_expm1f_BB__27_126;
LEGUP_F_expm1f_BB__27_126:
		next_state = LEGUP_F_expm1f_BB__27_127;
LEGUP_F_expm1f_BB__27_127:
		next_state = LEGUP_F_expm1f_BB__27_128;
LEGUP_F_expm1f_BB__27_128:
		next_state = LEGUP_F_expm1f_BB__27_129;
LEGUP_F_expm1f_BB__27_129:
		next_state = LEGUP_F_expm1f_BB__27_130;
LEGUP_F_expm1f_BB__27_130:
		next_state = LEGUP_F_expm1f_BB__27_131;
LEGUP_F_expm1f_BB__27_131:
		next_state = LEGUP_F_expm1f_BB__27_132;
LEGUP_F_expm1f_BB__27_132:
		next_state = LEGUP_F_expm1f_BB__27_133;
LEGUP_F_expm1f_BB__27_133:
		next_state = LEGUP_F_expm1f_BB__27_134;
LEGUP_F_expm1f_BB__27_134:
		next_state = LEGUP_F_expm1f_BB__27_135;
LEGUP_F_expm1f_BB__27_135:
		next_state = LEGUP_F_expm1f_BB__36_136;
LEGUP_F_expm1f_BB__27_73:
		next_state = LEGUP_F_expm1f_BB__27_74;
LEGUP_F_expm1f_BB__27_74:
		next_state = LEGUP_F_expm1f_BB__27_75;
LEGUP_F_expm1f_BB__27_75:
		next_state = LEGUP_F_expm1f_BB__27_76;
LEGUP_F_expm1f_BB__27_76:
		next_state = LEGUP_F_expm1f_BB__27_77;
LEGUP_F_expm1f_BB__27_77:
		next_state = LEGUP_F_expm1f_BB__27_78;
LEGUP_F_expm1f_BB__27_78:
		next_state = LEGUP_F_expm1f_BB__27_79;
LEGUP_F_expm1f_BB__27_79:
		next_state = LEGUP_F_expm1f_BB__27_80;
LEGUP_F_expm1f_BB__27_80:
		next_state = LEGUP_F_expm1f_BB__27_81;
LEGUP_F_expm1f_BB__27_81:
		next_state = LEGUP_F_expm1f_BB__27_82;
LEGUP_F_expm1f_BB__27_82:
		next_state = LEGUP_F_expm1f_BB__27_83;
LEGUP_F_expm1f_BB__27_83:
		next_state = LEGUP_F_expm1f_BB__27_84;
LEGUP_F_expm1f_BB__27_84:
		next_state = LEGUP_F_expm1f_BB__27_85;
LEGUP_F_expm1f_BB__27_85:
		next_state = LEGUP_F_expm1f_BB__27_86;
LEGUP_F_expm1f_BB__27_86:
		next_state = LEGUP_F_expm1f_BB__27_87;
LEGUP_F_expm1f_BB__27_87:
		next_state = LEGUP_F_expm1f_BB__27_88;
LEGUP_F_expm1f_BB__27_88:
		next_state = LEGUP_F_expm1f_BB__27_89;
LEGUP_F_expm1f_BB__27_89:
		next_state = LEGUP_F_expm1f_BB__27_90;
LEGUP_F_expm1f_BB__27_90:
		next_state = LEGUP_F_expm1f_BB__27_91;
LEGUP_F_expm1f_BB__27_91:
		next_state = LEGUP_F_expm1f_BB__27_92;
LEGUP_F_expm1f_BB__27_92:
		next_state = LEGUP_F_expm1f_BB__27_93;
LEGUP_F_expm1f_BB__27_93:
		next_state = LEGUP_F_expm1f_BB__27_94;
LEGUP_F_expm1f_BB__27_94:
		next_state = LEGUP_F_expm1f_BB__27_95;
LEGUP_F_expm1f_BB__27_95:
		next_state = LEGUP_F_expm1f_BB__27_96;
LEGUP_F_expm1f_BB__27_96:
		next_state = LEGUP_F_expm1f_BB__27_97;
LEGUP_F_expm1f_BB__27_97:
		next_state = LEGUP_F_expm1f_BB__27_98;
LEGUP_F_expm1f_BB__27_98:
		next_state = LEGUP_F_expm1f_BB__27_99;
LEGUP_F_expm1f_BB__27_99:
		next_state = LEGUP_F_expm1f_BB__27_100;
LEGUP_F_expm1f_BB__36_136:
		next_state = LEGUP_F_expm1f_BB__36_137;
LEGUP_F_expm1f_BB__36_137:
		next_state = LEGUP_F_expm1f_BB__36_138;
LEGUP_F_expm1f_BB__36_138:
		next_state = LEGUP_F_expm1f_BB__36_139;
LEGUP_F_expm1f_BB__36_139:
		next_state = LEGUP_F_expm1f_BB__36_140;
LEGUP_F_expm1f_BB__36_140:
		next_state = LEGUP_F_expm1f_BB__36_141;
LEGUP_F_expm1f_BB__36_141:
		next_state = LEGUP_F_expm1f_BB__36_142;
LEGUP_F_expm1f_BB__36_142:
		next_state = LEGUP_F_expm1f_BB__36_143;
LEGUP_F_expm1f_BB__36_143:
		next_state = LEGUP_F_expm1f_BB__36_144;
LEGUP_F_expm1f_BB__36_144:
		next_state = LEGUP_F_expm1f_BB__36_145;
LEGUP_F_expm1f_BB__36_145:
		next_state = LEGUP_F_expm1f_BB__36_146;
LEGUP_F_expm1f_BB__36_146:
		next_state = LEGUP_F_expm1f_BB__36_147;
LEGUP_F_expm1f_BB__36_147:
		next_state = LEGUP_F_expm1f_BB__36_148;
LEGUP_F_expm1f_BB__36_148:
		next_state = LEGUP_F_expm1f_BB__36_149;
LEGUP_F_expm1f_BB__36_149:
		next_state = LEGUP_F_expm1f_BB__36_150;
LEGUP_F_expm1f_BB__36_150:
		next_state = LEGUP_F_expm1f_BB__36_151;
LEGUP_F_expm1f_BB__36_151:
		next_state = LEGUP_F_expm1f_BB__36_152;
LEGUP_F_expm1f_BB__36_152:
		next_state = LEGUP_F_expm1f_BB__36_153;
LEGUP_F_expm1f_BB__36_153:
		next_state = LEGUP_F_expm1f_BB__36_154;
LEGUP_F_expm1f_BB__36_154:
		next_state = LEGUP_F_expm1f_BB__36_155;
LEGUP_F_expm1f_BB__36_155:
		next_state = LEGUP_F_expm1f_BB__36_156;
LEGUP_F_expm1f_BB__36_156:
		next_state = LEGUP_F_expm1f_BB__36_157;
LEGUP_F_expm1f_BB__36_157:
		next_state = LEGUP_F_expm1f_BB__36_158;
LEGUP_F_expm1f_BB__36_158:
		next_state = LEGUP_F_expm1f_BB__36_159;
LEGUP_F_expm1f_BB__36_159:
		next_state = LEGUP_F_expm1f_BB__36_160;
LEGUP_F_expm1f_BB__36_160:
		next_state = LEGUP_F_expm1f_BB__36_161;
LEGUP_F_expm1f_BB__36_161:
		next_state = LEGUP_F_expm1f_BB__36_162;
LEGUP_F_expm1f_BB__36_162:
		next_state = LEGUP_F_expm1f_BB__36_163;
LEGUP_F_expm1f_BB__36_163:
		next_state = LEGUP_F_expm1f_BB__36_164;
LEGUP_F_expm1f_BB__36_164:
		next_state = LEGUP_F_expm1f_BB__36_165;
LEGUP_F_expm1f_BB__36_165:
		next_state = LEGUP_F_expm1f_BB__36_166;
LEGUP_F_expm1f_BB__36_166:
		next_state = LEGUP_F_expm1f_BB__36_167;
LEGUP_F_expm1f_BB__36_167:
		next_state = LEGUP_F_expm1f_BB__36_168;
LEGUP_F_expm1f_BB__36_168:
		next_state = LEGUP_F_expm1f_BB__36_169;
LEGUP_F_expm1f_BB__36_169:
		next_state = LEGUP_F_expm1f_BB__36_170;
LEGUP_F_expm1f_BB__36_170:
		next_state = LEGUP_F_expm1f_BB__36_171;
LEGUP_F_expm1f_BB__36_171:
		next_state = LEGUP_F_expm1f_BB__36_172;
LEGUP_F_expm1f_BB__36_172:
		next_state = LEGUP_F_expm1f_BB__36_173;
LEGUP_F_expm1f_BB__36_173:
		next_state = LEGUP_F_expm1f_BB__36_174;
LEGUP_F_expm1f_BB__36_174:
		next_state = LEGUP_F_expm1f_BB__36_175;
LEGUP_F_expm1f_BB__36_175:
		next_state = LEGUP_F_expm1f_BB__36_176;
LEGUP_F_expm1f_BB__36_176:
		next_state = LEGUP_F_expm1f_BB__36_177;
LEGUP_F_expm1f_BB__36_177:
		next_state = LEGUP_F_expm1f_BB__36_178;
LEGUP_F_expm1f_BB__36_178:
		next_state = LEGUP_F_expm1f_BB__46_223;
LEGUP_F_expm1f_BB__3_2:
		next_state = LEGUP_F_expm1f_BB__4_3;
LEGUP_F_expm1f_BB__40_179:
	if ((expm1f_40_41 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__42_180;
	else if ((expm1f_40_41 == 1'd0))
		next_state = LEGUP_F_expm1f_BB__46_223;
LEGUP_F_expm1f_BB__42_180:
		next_state = LEGUP_F_expm1f_BB__42_181;
LEGUP_F_expm1f_BB__42_181:
		next_state = LEGUP_F_expm1f_BB__42_182;
LEGUP_F_expm1f_BB__42_182:
		next_state = LEGUP_F_expm1f_BB__42_183;
LEGUP_F_expm1f_BB__42_183:
		next_state = LEGUP_F_expm1f_BB__42_184;
LEGUP_F_expm1f_BB__42_184:
		next_state = LEGUP_F_expm1f_BB__42_185;
LEGUP_F_expm1f_BB__42_185:
		next_state = LEGUP_F_expm1f_BB__42_186;
LEGUP_F_expm1f_BB__42_186:
		next_state = LEGUP_F_expm1f_BB__42_187;
LEGUP_F_expm1f_BB__42_187:
		next_state = LEGUP_F_expm1f_BB__42_188;
LEGUP_F_expm1f_BB__42_188:
		next_state = LEGUP_F_expm1f_BB__42_189;
LEGUP_F_expm1f_BB__42_189:
		next_state = LEGUP_F_expm1f_BB__42_190;
LEGUP_F_expm1f_BB__42_190:
		next_state = LEGUP_F_expm1f_BB__42_191;
LEGUP_F_expm1f_BB__42_191:
		next_state = LEGUP_F_expm1f_BB__42_192;
LEGUP_F_expm1f_BB__42_192:
		next_state = LEGUP_F_expm1f_BB__42_193;
LEGUP_F_expm1f_BB__42_193:
		next_state = LEGUP_F_expm1f_BB__42_194;
LEGUP_F_expm1f_BB__42_194:
		next_state = LEGUP_F_expm1f_BB__42_195;
LEGUP_F_expm1f_BB__42_195:
		next_state = LEGUP_F_expm1f_BB__42_196;
LEGUP_F_expm1f_BB__42_196:
		next_state = LEGUP_F_expm1f_BB__42_197;
LEGUP_F_expm1f_BB__42_197:
		next_state = LEGUP_F_expm1f_BB__42_198;
LEGUP_F_expm1f_BB__42_198:
		next_state = LEGUP_F_expm1f_BB__42_199;
LEGUP_F_expm1f_BB__42_199:
		next_state = LEGUP_F_expm1f_BB__42_200;
LEGUP_F_expm1f_BB__42_200:
		next_state = LEGUP_F_expm1f_BB__42_201;
LEGUP_F_expm1f_BB__42_201:
		next_state = LEGUP_F_expm1f_BB__42_202;
LEGUP_F_expm1f_BB__42_202:
		next_state = LEGUP_F_expm1f_BB__42_203;
LEGUP_F_expm1f_BB__42_203:
		next_state = LEGUP_F_expm1f_BB__42_204;
LEGUP_F_expm1f_BB__42_204:
		next_state = LEGUP_F_expm1f_BB__42_205;
LEGUP_F_expm1f_BB__42_205:
		next_state = LEGUP_F_expm1f_BB__42_206;
LEGUP_F_expm1f_BB__42_206:
		next_state = LEGUP_F_expm1f_BB__42_207;
LEGUP_F_expm1f_BB__42_207:
		next_state = LEGUP_F_expm1f_BB__42_208;
LEGUP_F_expm1f_BB__42_208:
		next_state = LEGUP_F_expm1f_BB__42_209;
LEGUP_F_expm1f_BB__42_209:
		next_state = LEGUP_F_expm1f_BB__42_210;
LEGUP_F_expm1f_BB__42_210:
		next_state = LEGUP_F_expm1f_BB__42_211;
LEGUP_F_expm1f_BB__42_211:
		next_state = LEGUP_F_expm1f_BB__42_212;
LEGUP_F_expm1f_BB__42_212:
		next_state = LEGUP_F_expm1f_BB__42_213;
LEGUP_F_expm1f_BB__42_213:
		next_state = LEGUP_F_expm1f_BB__42_214;
LEGUP_F_expm1f_BB__42_214:
		next_state = LEGUP_F_expm1f_BB__42_215;
LEGUP_F_expm1f_BB__42_215:
		next_state = LEGUP_F_expm1f_BB__42_216;
LEGUP_F_expm1f_BB__42_216:
		next_state = LEGUP_F_expm1f_BB__42_217;
LEGUP_F_expm1f_BB__42_217:
		next_state = LEGUP_F_expm1f_BB__42_218;
LEGUP_F_expm1f_BB__42_218:
		next_state = LEGUP_F_expm1f_BB__42_219;
LEGUP_F_expm1f_BB__42_219:
		next_state = LEGUP_F_expm1f_BB__42_220;
LEGUP_F_expm1f_BB__42_220:
		next_state = LEGUP_F_expm1f_BB__42_221;
LEGUP_F_expm1f_BB__42_221:
		next_state = LEGUP_F_expm1f_BB__42_222;
LEGUP_F_expm1f_BB__42_222:
		next_state = LEGUP_F_expm1f_BB__123_798;
LEGUP_F_expm1f_BB__46_223:
		next_state = LEGUP_F_expm1f_BB__46_224;
LEGUP_F_expm1f_BB__46_224:
		next_state = LEGUP_F_expm1f_BB__46_225;
LEGUP_F_expm1f_BB__46_225:
		next_state = LEGUP_F_expm1f_BB__46_226;
LEGUP_F_expm1f_BB__46_226:
		next_state = LEGUP_F_expm1f_BB__46_227;
LEGUP_F_expm1f_BB__46_227:
		next_state = LEGUP_F_expm1f_BB__46_228;
LEGUP_F_expm1f_BB__46_228:
		next_state = LEGUP_F_expm1f_BB__46_229;
LEGUP_F_expm1f_BB__46_229:
		next_state = LEGUP_F_expm1f_BB__46_230;
LEGUP_F_expm1f_BB__46_230:
		next_state = LEGUP_F_expm1f_BB__46_231;
LEGUP_F_expm1f_BB__46_231:
		next_state = LEGUP_F_expm1f_BB__46_232;
LEGUP_F_expm1f_BB__46_232:
		next_state = LEGUP_F_expm1f_BB__46_233;
LEGUP_F_expm1f_BB__46_233:
		next_state = LEGUP_F_expm1f_BB__46_234;
LEGUP_F_expm1f_BB__46_234:
		next_state = LEGUP_F_expm1f_BB__46_235;
LEGUP_F_expm1f_BB__46_235:
		next_state = LEGUP_F_expm1f_BB__46_236;
LEGUP_F_expm1f_BB__46_236:
		next_state = LEGUP_F_expm1f_BB__46_237;
LEGUP_F_expm1f_BB__46_237:
		next_state = LEGUP_F_expm1f_BB__46_238;
LEGUP_F_expm1f_BB__46_238:
		next_state = LEGUP_F_expm1f_BB__46_239;
LEGUP_F_expm1f_BB__46_239:
		next_state = LEGUP_F_expm1f_BB__46_240;
LEGUP_F_expm1f_BB__46_240:
		next_state = LEGUP_F_expm1f_BB__46_241;
LEGUP_F_expm1f_BB__46_241:
		next_state = LEGUP_F_expm1f_BB__46_242;
LEGUP_F_expm1f_BB__46_242:
		next_state = LEGUP_F_expm1f_BB__46_243;
LEGUP_F_expm1f_BB__46_243:
		next_state = LEGUP_F_expm1f_BB__46_244;
LEGUP_F_expm1f_BB__46_244:
		next_state = LEGUP_F_expm1f_BB__46_245;
LEGUP_F_expm1f_BB__46_245:
		next_state = LEGUP_F_expm1f_BB__46_246;
LEGUP_F_expm1f_BB__46_246:
		next_state = LEGUP_F_expm1f_BB__46_247;
LEGUP_F_expm1f_BB__46_247:
		next_state = LEGUP_F_expm1f_BB__46_248;
LEGUP_F_expm1f_BB__46_248:
		next_state = LEGUP_F_expm1f_BB__46_249;
LEGUP_F_expm1f_BB__46_249:
		next_state = LEGUP_F_expm1f_BB__46_250;
LEGUP_F_expm1f_BB__46_250:
		next_state = LEGUP_F_expm1f_BB__46_251;
LEGUP_F_expm1f_BB__46_251:
		next_state = LEGUP_F_expm1f_BB__46_252;
LEGUP_F_expm1f_BB__46_252:
		next_state = LEGUP_F_expm1f_BB__46_253;
LEGUP_F_expm1f_BB__46_253:
		next_state = LEGUP_F_expm1f_BB__46_254;
LEGUP_F_expm1f_BB__46_254:
		next_state = LEGUP_F_expm1f_BB__46_255;
LEGUP_F_expm1f_BB__46_255:
		next_state = LEGUP_F_expm1f_BB__46_256;
LEGUP_F_expm1f_BB__46_256:
		next_state = LEGUP_F_expm1f_BB__46_257;
LEGUP_F_expm1f_BB__46_257:
		next_state = LEGUP_F_expm1f_BB__46_258;
LEGUP_F_expm1f_BB__46_258:
		next_state = LEGUP_F_expm1f_BB__46_259;
LEGUP_F_expm1f_BB__46_259:
		next_state = LEGUP_F_expm1f_BB__46_260;
LEGUP_F_expm1f_BB__46_260:
		next_state = LEGUP_F_expm1f_BB__46_261;
LEGUP_F_expm1f_BB__46_261:
		next_state = LEGUP_F_expm1f_BB__46_262;
LEGUP_F_expm1f_BB__46_262:
		next_state = LEGUP_F_expm1f_BB__46_263;
LEGUP_F_expm1f_BB__46_263:
		next_state = LEGUP_F_expm1f_BB__46_264;
LEGUP_F_expm1f_BB__46_264:
		next_state = LEGUP_F_expm1f_BB__46_265;
LEGUP_F_expm1f_BB__46_265:
		next_state = LEGUP_F_expm1f_BB__46_266;
LEGUP_F_expm1f_BB__46_266:
		next_state = LEGUP_F_expm1f_BB__46_267;
LEGUP_F_expm1f_BB__46_267:
		next_state = LEGUP_F_expm1f_BB__46_268;
LEGUP_F_expm1f_BB__46_268:
		next_state = LEGUP_F_expm1f_BB__46_269;
LEGUP_F_expm1f_BB__46_269:
		next_state = LEGUP_F_expm1f_BB__46_270;
LEGUP_F_expm1f_BB__46_270:
		next_state = LEGUP_F_expm1f_BB__46_271;
LEGUP_F_expm1f_BB__46_271:
		next_state = LEGUP_F_expm1f_BB__46_272;
LEGUP_F_expm1f_BB__46_272:
		next_state = LEGUP_F_expm1f_BB__46_273;
LEGUP_F_expm1f_BB__46_273:
		next_state = LEGUP_F_expm1f_BB__46_274;
LEGUP_F_expm1f_BB__46_274:
		next_state = LEGUP_F_expm1f_BB__46_275;
LEGUP_F_expm1f_BB__46_275:
		next_state = LEGUP_F_expm1f_BB__46_276;
LEGUP_F_expm1f_BB__46_276:
		next_state = LEGUP_F_expm1f_BB__46_277;
LEGUP_F_expm1f_BB__46_277:
		next_state = LEGUP_F_expm1f_BB__46_278;
LEGUP_F_expm1f_BB__46_278:
		next_state = LEGUP_F_expm1f_BB__46_279;
LEGUP_F_expm1f_BB__46_279:
		next_state = LEGUP_F_expm1f_BB__46_280;
LEGUP_F_expm1f_BB__46_280:
		next_state = LEGUP_F_expm1f_BB__46_281;
LEGUP_F_expm1f_BB__46_281:
		next_state = LEGUP_F_expm1f_BB__46_282;
LEGUP_F_expm1f_BB__46_282:
		next_state = LEGUP_F_expm1f_BB__46_283;
LEGUP_F_expm1f_BB__46_283:
		next_state = LEGUP_F_expm1f_BB__46_284;
LEGUP_F_expm1f_BB__46_284:
		next_state = LEGUP_F_expm1f_BB__46_285;
LEGUP_F_expm1f_BB__46_285:
		next_state = LEGUP_F_expm1f_BB__46_286;
LEGUP_F_expm1f_BB__46_286:
		next_state = LEGUP_F_expm1f_BB__46_287;
LEGUP_F_expm1f_BB__46_287:
		next_state = LEGUP_F_expm1f_BB__46_288;
LEGUP_F_expm1f_BB__46_288:
		next_state = LEGUP_F_expm1f_BB__46_289;
LEGUP_F_expm1f_BB__46_289:
		next_state = LEGUP_F_expm1f_BB__46_290;
LEGUP_F_expm1f_BB__46_290:
		next_state = LEGUP_F_expm1f_BB__46_291;
LEGUP_F_expm1f_BB__46_291:
		next_state = LEGUP_F_expm1f_BB__46_292;
LEGUP_F_expm1f_BB__46_292:
		next_state = LEGUP_F_expm1f_BB__46_293;
LEGUP_F_expm1f_BB__46_293:
		next_state = LEGUP_F_expm1f_BB__46_294;
LEGUP_F_expm1f_BB__46_294:
		next_state = LEGUP_F_expm1f_BB__46_295;
LEGUP_F_expm1f_BB__46_295:
		next_state = LEGUP_F_expm1f_BB__46_296;
LEGUP_F_expm1f_BB__46_296:
		next_state = LEGUP_F_expm1f_BB__46_297;
LEGUP_F_expm1f_BB__46_297:
		next_state = LEGUP_F_expm1f_BB__46_298;
LEGUP_F_expm1f_BB__46_298:
		next_state = LEGUP_F_expm1f_BB__46_299;
LEGUP_F_expm1f_BB__46_299:
		next_state = LEGUP_F_expm1f_BB__46_300;
LEGUP_F_expm1f_BB__46_300:
		next_state = LEGUP_F_expm1f_BB__46_301;
LEGUP_F_expm1f_BB__46_301:
		next_state = LEGUP_F_expm1f_BB__46_302;
LEGUP_F_expm1f_BB__46_302:
		next_state = LEGUP_F_expm1f_BB__46_303;
LEGUP_F_expm1f_BB__46_303:
		next_state = LEGUP_F_expm1f_BB__46_304;
LEGUP_F_expm1f_BB__46_304:
		next_state = LEGUP_F_expm1f_BB__46_305;
LEGUP_F_expm1f_BB__46_305:
		next_state = LEGUP_F_expm1f_BB__46_306;
LEGUP_F_expm1f_BB__46_306:
		next_state = LEGUP_F_expm1f_BB__46_307;
LEGUP_F_expm1f_BB__46_307:
		next_state = LEGUP_F_expm1f_BB__46_308;
LEGUP_F_expm1f_BB__46_308:
		next_state = LEGUP_F_expm1f_BB__46_309;
LEGUP_F_expm1f_BB__46_309:
		next_state = LEGUP_F_expm1f_BB__46_310;
LEGUP_F_expm1f_BB__46_310:
		next_state = LEGUP_F_expm1f_BB__46_311;
LEGUP_F_expm1f_BB__46_311:
		next_state = LEGUP_F_expm1f_BB__46_312;
LEGUP_F_expm1f_BB__46_312:
		next_state = LEGUP_F_expm1f_BB__46_313;
LEGUP_F_expm1f_BB__46_313:
		next_state = LEGUP_F_expm1f_BB__46_314;
LEGUP_F_expm1f_BB__46_314:
		next_state = LEGUP_F_expm1f_BB__46_315;
LEGUP_F_expm1f_BB__46_315:
		next_state = LEGUP_F_expm1f_BB__46_316;
LEGUP_F_expm1f_BB__46_316:
		next_state = LEGUP_F_expm1f_BB__46_317;
LEGUP_F_expm1f_BB__46_317:
		next_state = LEGUP_F_expm1f_BB__46_318;
LEGUP_F_expm1f_BB__46_318:
		next_state = LEGUP_F_expm1f_BB__46_319;
LEGUP_F_expm1f_BB__46_319:
		next_state = LEGUP_F_expm1f_BB__46_320;
LEGUP_F_expm1f_BB__46_320:
		next_state = LEGUP_F_expm1f_BB__46_321;
LEGUP_F_expm1f_BB__46_321:
		next_state = LEGUP_F_expm1f_BB__46_322;
LEGUP_F_expm1f_BB__46_322:
		next_state = LEGUP_F_expm1f_BB__46_323;
LEGUP_F_expm1f_BB__46_323:
		next_state = LEGUP_F_expm1f_BB__46_324;
LEGUP_F_expm1f_BB__46_324:
		next_state = LEGUP_F_expm1f_BB__46_325;
LEGUP_F_expm1f_BB__46_325:
		next_state = LEGUP_F_expm1f_BB__46_326;
LEGUP_F_expm1f_BB__46_326:
		next_state = LEGUP_F_expm1f_BB__46_327;
LEGUP_F_expm1f_BB__46_327:
		next_state = LEGUP_F_expm1f_BB__46_328;
LEGUP_F_expm1f_BB__46_328:
		next_state = LEGUP_F_expm1f_BB__46_329;
LEGUP_F_expm1f_BB__46_329:
		next_state = LEGUP_F_expm1f_BB__46_330;
LEGUP_F_expm1f_BB__46_330:
		next_state = LEGUP_F_expm1f_BB__46_331;
LEGUP_F_expm1f_BB__46_331:
		next_state = LEGUP_F_expm1f_BB__46_332;
LEGUP_F_expm1f_BB__46_332:
		next_state = LEGUP_F_expm1f_BB__46_333;
LEGUP_F_expm1f_BB__46_333:
		next_state = LEGUP_F_expm1f_BB__46_334;
LEGUP_F_expm1f_BB__46_334:
		next_state = LEGUP_F_expm1f_BB__46_335;
LEGUP_F_expm1f_BB__46_335:
		next_state = LEGUP_F_expm1f_BB__46_336;
LEGUP_F_expm1f_BB__46_336:
		next_state = LEGUP_F_expm1f_BB__46_337;
LEGUP_F_expm1f_BB__46_337:
		next_state = LEGUP_F_expm1f_BB__46_338;
LEGUP_F_expm1f_BB__46_338:
		next_state = LEGUP_F_expm1f_BB__46_339;
LEGUP_F_expm1f_BB__46_339:
		next_state = LEGUP_F_expm1f_BB__46_340;
LEGUP_F_expm1f_BB__46_340:
		next_state = LEGUP_F_expm1f_BB__46_341;
LEGUP_F_expm1f_BB__46_341:
		next_state = LEGUP_F_expm1f_BB__46_342;
LEGUP_F_expm1f_BB__46_342:
		next_state = LEGUP_F_expm1f_BB__46_343;
LEGUP_F_expm1f_BB__46_343:
		next_state = LEGUP_F_expm1f_BB__46_344;
LEGUP_F_expm1f_BB__46_344:
		next_state = LEGUP_F_expm1f_BB__46_345;
LEGUP_F_expm1f_BB__46_345:
		next_state = LEGUP_F_expm1f_BB__46_346;
LEGUP_F_expm1f_BB__46_346:
		next_state = LEGUP_F_expm1f_BB__46_347;
LEGUP_F_expm1f_BB__46_347:
		next_state = LEGUP_F_expm1f_BB__46_348;
LEGUP_F_expm1f_BB__46_348:
		next_state = LEGUP_F_expm1f_BB__46_349;
LEGUP_F_expm1f_BB__46_349:
		next_state = LEGUP_F_expm1f_BB__46_350;
LEGUP_F_expm1f_BB__46_350:
		next_state = LEGUP_F_expm1f_BB__46_351;
LEGUP_F_expm1f_BB__46_351:
		next_state = LEGUP_F_expm1f_BB__46_352;
LEGUP_F_expm1f_BB__46_352:
		next_state = LEGUP_F_expm1f_BB__46_353;
LEGUP_F_expm1f_BB__46_353:
		next_state = LEGUP_F_expm1f_BB__46_354;
LEGUP_F_expm1f_BB__46_354:
		next_state = LEGUP_F_expm1f_BB__46_355;
LEGUP_F_expm1f_BB__46_355:
		next_state = LEGUP_F_expm1f_BB__46_356;
LEGUP_F_expm1f_BB__46_356:
		next_state = LEGUP_F_expm1f_BB__46_357;
LEGUP_F_expm1f_BB__46_357:
		next_state = LEGUP_F_expm1f_BB__46_358;
LEGUP_F_expm1f_BB__46_358:
		next_state = LEGUP_F_expm1f_BB__46_359;
LEGUP_F_expm1f_BB__46_359:
		next_state = LEGUP_F_expm1f_BB__46_360;
LEGUP_F_expm1f_BB__46_360:
		next_state = LEGUP_F_expm1f_BB__46_361;
LEGUP_F_expm1f_BB__46_361:
		next_state = LEGUP_F_expm1f_BB__46_362;
LEGUP_F_expm1f_BB__46_362:
		next_state = LEGUP_F_expm1f_BB__46_363;
LEGUP_F_expm1f_BB__46_363:
		next_state = LEGUP_F_expm1f_BB__46_364;
LEGUP_F_expm1f_BB__46_364:
		next_state = LEGUP_F_expm1f_BB__46_365;
LEGUP_F_expm1f_BB__46_365:
		next_state = LEGUP_F_expm1f_BB__46_366;
LEGUP_F_expm1f_BB__46_366:
		next_state = LEGUP_F_expm1f_BB__46_367;
LEGUP_F_expm1f_BB__46_367:
		next_state = LEGUP_F_expm1f_BB__46_368;
LEGUP_F_expm1f_BB__46_368:
		next_state = LEGUP_F_expm1f_BB__46_369;
LEGUP_F_expm1f_BB__46_369:
		next_state = LEGUP_F_expm1f_BB__46_370;
LEGUP_F_expm1f_BB__46_370:
		next_state = LEGUP_F_expm1f_BB__46_371;
LEGUP_F_expm1f_BB__46_371:
		next_state = LEGUP_F_expm1f_BB__46_372;
LEGUP_F_expm1f_BB__46_372:
		next_state = LEGUP_F_expm1f_BB__46_373;
LEGUP_F_expm1f_BB__46_373:
		next_state = LEGUP_F_expm1f_BB__46_374;
LEGUP_F_expm1f_BB__46_374:
		next_state = LEGUP_F_expm1f_BB__46_375;
LEGUP_F_expm1f_BB__46_375:
		next_state = LEGUP_F_expm1f_BB__46_376;
LEGUP_F_expm1f_BB__46_376:
		next_state = LEGUP_F_expm1f_BB__46_377;
LEGUP_F_expm1f_BB__46_377:
		next_state = LEGUP_F_expm1f_BB__46_378;
LEGUP_F_expm1f_BB__46_378:
		next_state = LEGUP_F_expm1f_BB__46_379;
LEGUP_F_expm1f_BB__46_379:
		next_state = LEGUP_F_expm1f_BB__46_380;
LEGUP_F_expm1f_BB__46_380:
		next_state = LEGUP_F_expm1f_BB__46_381;
LEGUP_F_expm1f_BB__46_381:
		next_state = LEGUP_F_expm1f_BB__46_382;
LEGUP_F_expm1f_BB__46_382:
		next_state = LEGUP_F_expm1f_BB__46_383;
LEGUP_F_expm1f_BB__46_383:
		next_state = LEGUP_F_expm1f_BB__46_384;
LEGUP_F_expm1f_BB__46_384:
		next_state = LEGUP_F_expm1f_BB__46_385;
LEGUP_F_expm1f_BB__46_385:
		next_state = LEGUP_F_expm1f_BB__46_386;
LEGUP_F_expm1f_BB__46_386:
		next_state = LEGUP_F_expm1f_BB__46_387;
LEGUP_F_expm1f_BB__46_387:
		next_state = LEGUP_F_expm1f_BB__46_388;
LEGUP_F_expm1f_BB__46_388:
		next_state = LEGUP_F_expm1f_BB__46_389;
LEGUP_F_expm1f_BB__46_389:
		next_state = LEGUP_F_expm1f_BB__46_390;
LEGUP_F_expm1f_BB__46_390:
		next_state = LEGUP_F_expm1f_BB__46_391;
LEGUP_F_expm1f_BB__46_391:
		next_state = LEGUP_F_expm1f_BB__46_392;
LEGUP_F_expm1f_BB__46_392:
		next_state = LEGUP_F_expm1f_BB__46_393;
LEGUP_F_expm1f_BB__46_393:
		next_state = LEGUP_F_expm1f_BB__46_394;
LEGUP_F_expm1f_BB__46_394:
		next_state = LEGUP_F_expm1f_BB__46_395;
LEGUP_F_expm1f_BB__46_395:
		next_state = LEGUP_F_expm1f_BB__46_396;
LEGUP_F_expm1f_BB__46_396:
		next_state = LEGUP_F_expm1f_BB__46_397;
LEGUP_F_expm1f_BB__46_397:
		next_state = LEGUP_F_expm1f_BB__46_398;
LEGUP_F_expm1f_BB__46_398:
		next_state = LEGUP_F_expm1f_BB__46_399;
LEGUP_F_expm1f_BB__46_399:
		next_state = LEGUP_F_expm1f_BB__46_400;
LEGUP_F_expm1f_BB__46_400:
		next_state = LEGUP_F_expm1f_BB__46_401;
LEGUP_F_expm1f_BB__46_401:
		next_state = LEGUP_F_expm1f_BB__46_402;
LEGUP_F_expm1f_BB__46_402:
		next_state = LEGUP_F_expm1f_BB__46_403;
LEGUP_F_expm1f_BB__46_403:
		next_state = LEGUP_F_expm1f_BB__46_404;
LEGUP_F_expm1f_BB__46_404:
		next_state = LEGUP_F_expm1f_BB__46_405;
LEGUP_F_expm1f_BB__46_405:
		next_state = LEGUP_F_expm1f_BB__46_406;
LEGUP_F_expm1f_BB__46_406:
		next_state = LEGUP_F_expm1f_BB__46_407;
LEGUP_F_expm1f_BB__46_407:
		next_state = LEGUP_F_expm1f_BB__46_408;
LEGUP_F_expm1f_BB__46_408:
		next_state = LEGUP_F_expm1f_BB__46_409;
LEGUP_F_expm1f_BB__46_409:
		next_state = LEGUP_F_expm1f_BB__46_410;
LEGUP_F_expm1f_BB__46_410:
		next_state = LEGUP_F_expm1f_BB__46_411;
LEGUP_F_expm1f_BB__46_411:
		next_state = LEGUP_F_expm1f_BB__46_412;
LEGUP_F_expm1f_BB__46_412:
		next_state = LEGUP_F_expm1f_BB__46_413;
LEGUP_F_expm1f_BB__46_413:
		next_state = LEGUP_F_expm1f_BB__46_414;
LEGUP_F_expm1f_BB__46_414:
		next_state = LEGUP_F_expm1f_BB__46_415;
LEGUP_F_expm1f_BB__46_415:
		next_state = LEGUP_F_expm1f_BB__46_416;
LEGUP_F_expm1f_BB__46_416:
		next_state = LEGUP_F_expm1f_BB__46_417;
LEGUP_F_expm1f_BB__46_417:
		next_state = LEGUP_F_expm1f_BB__46_418;
LEGUP_F_expm1f_BB__46_418:
		next_state = LEGUP_F_expm1f_BB__46_419;
LEGUP_F_expm1f_BB__46_419:
		next_state = LEGUP_F_expm1f_BB__46_420;
LEGUP_F_expm1f_BB__46_420:
		next_state = LEGUP_F_expm1f_BB__46_421;
LEGUP_F_expm1f_BB__46_421:
		next_state = LEGUP_F_expm1f_BB__46_422;
LEGUP_F_expm1f_BB__46_422:
		next_state = LEGUP_F_expm1f_BB__46_423;
LEGUP_F_expm1f_BB__46_423:
		next_state = LEGUP_F_expm1f_BB__46_424;
LEGUP_F_expm1f_BB__46_424:
		next_state = LEGUP_F_expm1f_BB__46_425;
LEGUP_F_expm1f_BB__46_425:
		next_state = LEGUP_F_expm1f_BB__46_426;
LEGUP_F_expm1f_BB__46_426:
		next_state = LEGUP_F_expm1f_BB__46_427;
LEGUP_F_expm1f_BB__46_427:
		next_state = LEGUP_F_expm1f_BB__46_428;
LEGUP_F_expm1f_BB__46_428:
		next_state = LEGUP_F_expm1f_BB__46_429;
LEGUP_F_expm1f_BB__46_429:
		next_state = LEGUP_F_expm1f_BB__46_430;
LEGUP_F_expm1f_BB__46_430:
		next_state = LEGUP_F_expm1f_BB__46_431;
LEGUP_F_expm1f_BB__46_431:
		next_state = LEGUP_F_expm1f_BB__46_432;
LEGUP_F_expm1f_BB__46_432:
		next_state = LEGUP_F_expm1f_BB__46_433;
LEGUP_F_expm1f_BB__46_433:
		next_state = LEGUP_F_expm1f_BB__46_434;
LEGUP_F_expm1f_BB__46_434:
		next_state = LEGUP_F_expm1f_BB__46_435;
LEGUP_F_expm1f_BB__46_435:
		next_state = LEGUP_F_expm1f_BB__46_436;
LEGUP_F_expm1f_BB__46_436:
		next_state = LEGUP_F_expm1f_BB__46_437;
LEGUP_F_expm1f_BB__46_437:
		next_state = LEGUP_F_expm1f_BB__46_438;
LEGUP_F_expm1f_BB__46_438:
		next_state = LEGUP_F_expm1f_BB__46_439;
LEGUP_F_expm1f_BB__46_439:
		next_state = LEGUP_F_expm1f_BB__46_440;
LEGUP_F_expm1f_BB__46_440:
		next_state = LEGUP_F_expm1f_BB__46_441;
LEGUP_F_expm1f_BB__46_441:
		next_state = LEGUP_F_expm1f_BB__46_442;
LEGUP_F_expm1f_BB__46_442:
		next_state = LEGUP_F_expm1f_BB__46_443;
LEGUP_F_expm1f_BB__46_443:
		next_state = LEGUP_F_expm1f_BB__46_444;
LEGUP_F_expm1f_BB__46_444:
		next_state = LEGUP_F_expm1f_BB__46_445;
LEGUP_F_expm1f_BB__46_445:
		next_state = LEGUP_F_expm1f_BB__46_446;
LEGUP_F_expm1f_BB__46_446:
		next_state = LEGUP_F_expm1f_BB__46_447;
LEGUP_F_expm1f_BB__46_447:
		next_state = LEGUP_F_expm1f_BB__46_448;
LEGUP_F_expm1f_BB__46_448:
		next_state = LEGUP_F_expm1f_BB__46_449;
LEGUP_F_expm1f_BB__46_449:
		next_state = LEGUP_F_expm1f_BB__46_450;
LEGUP_F_expm1f_BB__46_450:
		next_state = LEGUP_F_expm1f_BB__46_451;
LEGUP_F_expm1f_BB__46_451:
		next_state = LEGUP_F_expm1f_BB__46_452;
LEGUP_F_expm1f_BB__46_452:
		next_state = LEGUP_F_expm1f_BB__46_453;
LEGUP_F_expm1f_BB__46_453:
		next_state = LEGUP_F_expm1f_BB__46_454;
LEGUP_F_expm1f_BB__46_454:
		next_state = LEGUP_F_expm1f_BB__46_455;
LEGUP_F_expm1f_BB__46_455:
		next_state = LEGUP_F_expm1f_BB__46_456;
LEGUP_F_expm1f_BB__46_456:
		next_state = LEGUP_F_expm1f_BB__46_457;
LEGUP_F_expm1f_BB__46_457:
		next_state = LEGUP_F_expm1f_BB__46_458;
LEGUP_F_expm1f_BB__46_458:
		next_state = LEGUP_F_expm1f_BB__46_459;
LEGUP_F_expm1f_BB__46_459:
		next_state = LEGUP_F_expm1f_BB__46_460;
LEGUP_F_expm1f_BB__46_460:
		next_state = LEGUP_F_expm1f_BB__46_461;
LEGUP_F_expm1f_BB__46_461:
		next_state = LEGUP_F_expm1f_BB__46_462;
LEGUP_F_expm1f_BB__46_462:
		next_state = LEGUP_F_expm1f_BB__46_463;
LEGUP_F_expm1f_BB__46_463:
		next_state = LEGUP_F_expm1f_BB__46_464;
LEGUP_F_expm1f_BB__46_464:
	if ((expm1f_46_66_reg == 1'd1))
		next_state = LEGUP_F_expm1f_BB__67_465;
	else if ((expm1f_46_66_reg == 1'd0))
		next_state = LEGUP_F_expm1f_BB__71_505;
LEGUP_F_expm1f_BB__4_3:
	if ((expm1f_4_6 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__7_4;
	else if ((expm1f_4_6 == 1'd0))
		next_state = LEGUP_F_expm1f_BB_threadpresplit_40;
LEGUP_F_expm1f_BB__67_465:
		next_state = LEGUP_F_expm1f_BB__67_466;
LEGUP_F_expm1f_BB__67_466:
		next_state = LEGUP_F_expm1f_BB__67_467;
LEGUP_F_expm1f_BB__67_467:
		next_state = LEGUP_F_expm1f_BB__67_468;
LEGUP_F_expm1f_BB__67_468:
		next_state = LEGUP_F_expm1f_BB__67_469;
LEGUP_F_expm1f_BB__67_469:
		next_state = LEGUP_F_expm1f_BB__67_470;
LEGUP_F_expm1f_BB__67_470:
		next_state = LEGUP_F_expm1f_BB__67_471;
LEGUP_F_expm1f_BB__67_471:
		next_state = LEGUP_F_expm1f_BB__67_472;
LEGUP_F_expm1f_BB__67_472:
		next_state = LEGUP_F_expm1f_BB__67_473;
LEGUP_F_expm1f_BB__67_473:
		next_state = LEGUP_F_expm1f_BB__67_474;
LEGUP_F_expm1f_BB__67_474:
		next_state = LEGUP_F_expm1f_BB__67_475;
LEGUP_F_expm1f_BB__67_475:
		next_state = LEGUP_F_expm1f_BB__67_476;
LEGUP_F_expm1f_BB__67_476:
		next_state = LEGUP_F_expm1f_BB__67_477;
LEGUP_F_expm1f_BB__67_477:
		next_state = LEGUP_F_expm1f_BB__67_478;
LEGUP_F_expm1f_BB__67_478:
		next_state = LEGUP_F_expm1f_BB__67_479;
LEGUP_F_expm1f_BB__67_479:
		next_state = LEGUP_F_expm1f_BB__67_480;
LEGUP_F_expm1f_BB__67_480:
		next_state = LEGUP_F_expm1f_BB__67_481;
LEGUP_F_expm1f_BB__67_481:
		next_state = LEGUP_F_expm1f_BB__67_482;
LEGUP_F_expm1f_BB__67_482:
		next_state = LEGUP_F_expm1f_BB__67_483;
LEGUP_F_expm1f_BB__67_483:
		next_state = LEGUP_F_expm1f_BB__67_484;
LEGUP_F_expm1f_BB__67_484:
		next_state = LEGUP_F_expm1f_BB__67_485;
LEGUP_F_expm1f_BB__67_485:
		next_state = LEGUP_F_expm1f_BB__67_486;
LEGUP_F_expm1f_BB__67_486:
		next_state = LEGUP_F_expm1f_BB__67_487;
LEGUP_F_expm1f_BB__67_487:
		next_state = LEGUP_F_expm1f_BB__67_488;
LEGUP_F_expm1f_BB__67_488:
		next_state = LEGUP_F_expm1f_BB__67_489;
LEGUP_F_expm1f_BB__67_489:
		next_state = LEGUP_F_expm1f_BB__67_490;
LEGUP_F_expm1f_BB__67_490:
		next_state = LEGUP_F_expm1f_BB__67_491;
LEGUP_F_expm1f_BB__67_491:
		next_state = LEGUP_F_expm1f_BB__67_492;
LEGUP_F_expm1f_BB__67_492:
		next_state = LEGUP_F_expm1f_BB__67_493;
LEGUP_F_expm1f_BB__67_493:
		next_state = LEGUP_F_expm1f_BB__67_494;
LEGUP_F_expm1f_BB__67_494:
		next_state = LEGUP_F_expm1f_BB__67_495;
LEGUP_F_expm1f_BB__67_495:
		next_state = LEGUP_F_expm1f_BB__67_496;
LEGUP_F_expm1f_BB__67_496:
		next_state = LEGUP_F_expm1f_BB__67_497;
LEGUP_F_expm1f_BB__67_497:
		next_state = LEGUP_F_expm1f_BB__67_498;
LEGUP_F_expm1f_BB__67_498:
		next_state = LEGUP_F_expm1f_BB__67_499;
LEGUP_F_expm1f_BB__67_499:
		next_state = LEGUP_F_expm1f_BB__67_500;
LEGUP_F_expm1f_BB__67_500:
		next_state = LEGUP_F_expm1f_BB__67_501;
LEGUP_F_expm1f_BB__67_501:
		next_state = LEGUP_F_expm1f_BB__67_502;
LEGUP_F_expm1f_BB__67_502:
		next_state = LEGUP_F_expm1f_BB__67_503;
LEGUP_F_expm1f_BB__67_503:
		next_state = LEGUP_F_expm1f_BB__67_504;
LEGUP_F_expm1f_BB__67_504:
		next_state = LEGUP_F_expm1f_BB__123_798;
LEGUP_F_expm1f_BB__71_505:
		next_state = LEGUP_F_expm1f_BB__71_506;
LEGUP_F_expm1f_BB__71_506:
		next_state = LEGUP_F_expm1f_BB__71_507;
LEGUP_F_expm1f_BB__71_507:
		next_state = LEGUP_F_expm1f_BB__71_508;
LEGUP_F_expm1f_BB__71_508:
		next_state = LEGUP_F_expm1f_BB__71_509;
LEGUP_F_expm1f_BB__71_509:
		next_state = LEGUP_F_expm1f_BB__71_510;
LEGUP_F_expm1f_BB__71_510:
		next_state = LEGUP_F_expm1f_BB__71_511;
LEGUP_F_expm1f_BB__71_511:
		next_state = LEGUP_F_expm1f_BB__71_512;
LEGUP_F_expm1f_BB__71_512:
		next_state = LEGUP_F_expm1f_BB__71_513;
LEGUP_F_expm1f_BB__71_513:
		next_state = LEGUP_F_expm1f_BB__71_514;
LEGUP_F_expm1f_BB__71_514:
		next_state = LEGUP_F_expm1f_BB__71_515;
LEGUP_F_expm1f_BB__71_515:
		next_state = LEGUP_F_expm1f_BB__71_516;
LEGUP_F_expm1f_BB__71_516:
		next_state = LEGUP_F_expm1f_BB__71_517;
LEGUP_F_expm1f_BB__71_517:
		next_state = LEGUP_F_expm1f_BB__71_518;
LEGUP_F_expm1f_BB__71_518:
		next_state = LEGUP_F_expm1f_BB__71_519;
LEGUP_F_expm1f_BB__71_519:
		next_state = LEGUP_F_expm1f_BB__71_520;
LEGUP_F_expm1f_BB__71_520:
		next_state = LEGUP_F_expm1f_BB__71_521;
LEGUP_F_expm1f_BB__71_521:
		next_state = LEGUP_F_expm1f_BB__71_522;
LEGUP_F_expm1f_BB__71_522:
		next_state = LEGUP_F_expm1f_BB__71_523;
LEGUP_F_expm1f_BB__71_523:
		next_state = LEGUP_F_expm1f_BB__71_524;
LEGUP_F_expm1f_BB__71_524:
		next_state = LEGUP_F_expm1f_BB__71_525;
LEGUP_F_expm1f_BB__71_525:
		next_state = LEGUP_F_expm1f_BB__71_526;
LEGUP_F_expm1f_BB__71_526:
		next_state = LEGUP_F_expm1f_BB__71_527;
LEGUP_F_expm1f_BB__71_527:
		next_state = LEGUP_F_expm1f_BB__71_528;
LEGUP_F_expm1f_BB__71_528:
		next_state = LEGUP_F_expm1f_BB__71_529;
LEGUP_F_expm1f_BB__71_529:
		next_state = LEGUP_F_expm1f_BB__71_530;
LEGUP_F_expm1f_BB__71_530:
		next_state = LEGUP_F_expm1f_BB__71_531;
LEGUP_F_expm1f_BB__71_531:
		next_state = LEGUP_F_expm1f_BB__71_532;
LEGUP_F_expm1f_BB__71_532:
		next_state = LEGUP_F_expm1f_BB__71_533;
LEGUP_F_expm1f_BB__71_533:
		next_state = LEGUP_F_expm1f_BB__71_534;
LEGUP_F_expm1f_BB__71_534:
		next_state = LEGUP_F_expm1f_BB__71_535;
LEGUP_F_expm1f_BB__71_535:
		next_state = LEGUP_F_expm1f_BB__71_536;
LEGUP_F_expm1f_BB__71_536:
		next_state = LEGUP_F_expm1f_BB__71_537;
LEGUP_F_expm1f_BB__71_537:
		next_state = LEGUP_F_expm1f_BB__71_538;
LEGUP_F_expm1f_BB__71_538:
		next_state = LEGUP_F_expm1f_BB__71_539;
LEGUP_F_expm1f_BB__71_539:
		next_state = LEGUP_F_expm1f_BB__71_540;
LEGUP_F_expm1f_BB__71_540:
		next_state = LEGUP_F_expm1f_BB__71_541;
LEGUP_F_expm1f_BB__71_541:
		next_state = LEGUP_F_expm1f_BB__71_542;
LEGUP_F_expm1f_BB__71_542:
		next_state = LEGUP_F_expm1f_BB__71_543;
LEGUP_F_expm1f_BB__71_543:
		next_state = LEGUP_F_expm1f_BB__71_544;
LEGUP_F_expm1f_BB__71_544:
		next_state = LEGUP_F_expm1f_BB__71_545;
LEGUP_F_expm1f_BB__71_545:
		next_state = LEGUP_F_expm1f_BB__71_546;
LEGUP_F_expm1f_BB__71_546:
		next_state = LEGUP_F_expm1f_BB__71_547;
LEGUP_F_expm1f_BB__71_547:
		next_state = LEGUP_F_expm1f_BB__71_548;
LEGUP_F_expm1f_BB__71_548:
		next_state = LEGUP_F_expm1f_BB__71_549;
LEGUP_F_expm1f_BB__71_549:
		next_state = LEGUP_F_expm1f_BB__71_550;
LEGUP_F_expm1f_BB__71_550:
		next_state = LEGUP_F_expm1f_BB__71_551;
LEGUP_F_expm1f_BB__71_551:
		next_state = LEGUP_F_expm1f_BB__71_552;
LEGUP_F_expm1f_BB__71_552:
		next_state = LEGUP_F_expm1f_BB__71_553;
LEGUP_F_expm1f_BB__71_553:
		next_state = LEGUP_F_expm1f_BB__71_554;
LEGUP_F_expm1f_BB__71_554:
		next_state = LEGUP_F_expm1f_BB__71_555;
LEGUP_F_expm1f_BB__71_555:
		next_state = LEGUP_F_expm1f_BB__71_556;
LEGUP_F_expm1f_BB__71_556:
		next_state = LEGUP_F_expm1f_BB__71_557;
LEGUP_F_expm1f_BB__71_557:
		next_state = LEGUP_F_expm1f_BB__71_558;
LEGUP_F_expm1f_BB__71_558:
	if ((expm1f_46_k1_reg == -32'd1))
		next_state = LEGUP_F_expm1f_BB__76_559;
	else if ((expm1f_46_k1_reg == 32'd1))
		next_state = LEGUP_F_expm1f_BB__80_599;
	else if ((expm1f_46_k1_reg != -32'd1) && (expm1f_46_k1_reg != 32'd1))
		next_state = LEGUP_F_expm1f_BB__90_681;
LEGUP_F_expm1f_BB__76_559:
		next_state = LEGUP_F_expm1f_BB__76_560;
LEGUP_F_expm1f_BB__76_560:
		next_state = LEGUP_F_expm1f_BB__76_561;
LEGUP_F_expm1f_BB__76_561:
		next_state = LEGUP_F_expm1f_BB__76_562;
LEGUP_F_expm1f_BB__76_562:
		next_state = LEGUP_F_expm1f_BB__76_563;
LEGUP_F_expm1f_BB__76_563:
		next_state = LEGUP_F_expm1f_BB__76_564;
LEGUP_F_expm1f_BB__76_564:
		next_state = LEGUP_F_expm1f_BB__76_565;
LEGUP_F_expm1f_BB__76_565:
		next_state = LEGUP_F_expm1f_BB__76_566;
LEGUP_F_expm1f_BB__76_566:
		next_state = LEGUP_F_expm1f_BB__76_567;
LEGUP_F_expm1f_BB__76_567:
		next_state = LEGUP_F_expm1f_BB__76_568;
LEGUP_F_expm1f_BB__76_568:
		next_state = LEGUP_F_expm1f_BB__76_569;
LEGUP_F_expm1f_BB__76_569:
		next_state = LEGUP_F_expm1f_BB__76_570;
LEGUP_F_expm1f_BB__76_570:
		next_state = LEGUP_F_expm1f_BB__76_571;
LEGUP_F_expm1f_BB__76_571:
		next_state = LEGUP_F_expm1f_BB__76_572;
LEGUP_F_expm1f_BB__76_572:
		next_state = LEGUP_F_expm1f_BB__76_573;
LEGUP_F_expm1f_BB__76_573:
		next_state = LEGUP_F_expm1f_BB__76_574;
LEGUP_F_expm1f_BB__76_574:
		next_state = LEGUP_F_expm1f_BB__76_575;
LEGUP_F_expm1f_BB__76_575:
		next_state = LEGUP_F_expm1f_BB__76_576;
LEGUP_F_expm1f_BB__76_576:
		next_state = LEGUP_F_expm1f_BB__76_577;
LEGUP_F_expm1f_BB__76_577:
		next_state = LEGUP_F_expm1f_BB__76_578;
LEGUP_F_expm1f_BB__76_578:
		next_state = LEGUP_F_expm1f_BB__76_579;
LEGUP_F_expm1f_BB__76_579:
		next_state = LEGUP_F_expm1f_BB__76_580;
LEGUP_F_expm1f_BB__76_580:
		next_state = LEGUP_F_expm1f_BB__76_581;
LEGUP_F_expm1f_BB__76_581:
		next_state = LEGUP_F_expm1f_BB__76_582;
LEGUP_F_expm1f_BB__76_582:
		next_state = LEGUP_F_expm1f_BB__76_583;
LEGUP_F_expm1f_BB__76_583:
		next_state = LEGUP_F_expm1f_BB__76_584;
LEGUP_F_expm1f_BB__76_584:
		next_state = LEGUP_F_expm1f_BB__76_585;
LEGUP_F_expm1f_BB__76_585:
		next_state = LEGUP_F_expm1f_BB__76_586;
LEGUP_F_expm1f_BB__76_586:
		next_state = LEGUP_F_expm1f_BB__76_587;
LEGUP_F_expm1f_BB__76_587:
		next_state = LEGUP_F_expm1f_BB__76_588;
LEGUP_F_expm1f_BB__76_588:
		next_state = LEGUP_F_expm1f_BB__76_589;
LEGUP_F_expm1f_BB__76_589:
		next_state = LEGUP_F_expm1f_BB__76_590;
LEGUP_F_expm1f_BB__76_590:
		next_state = LEGUP_F_expm1f_BB__76_591;
LEGUP_F_expm1f_BB__76_591:
		next_state = LEGUP_F_expm1f_BB__76_592;
LEGUP_F_expm1f_BB__76_592:
		next_state = LEGUP_F_expm1f_BB__76_593;
LEGUP_F_expm1f_BB__76_593:
		next_state = LEGUP_F_expm1f_BB__76_594;
LEGUP_F_expm1f_BB__76_594:
		next_state = LEGUP_F_expm1f_BB__76_595;
LEGUP_F_expm1f_BB__76_595:
		next_state = LEGUP_F_expm1f_BB__76_596;
LEGUP_F_expm1f_BB__76_596:
		next_state = LEGUP_F_expm1f_BB__76_597;
LEGUP_F_expm1f_BB__76_597:
		next_state = LEGUP_F_expm1f_BB__76_598;
LEGUP_F_expm1f_BB__76_598:
		next_state = LEGUP_F_expm1f_BB__123_798;
LEGUP_F_expm1f_BB__7_4:
	if ((expm1f_7_8 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__9_5;
	else if ((expm1f_7_8 == 1'd0))
		next_state = LEGUP_F_expm1f_BB__11_20;
LEGUP_F_expm1f_BB__80_599:
		next_state = LEGUP_F_expm1f_BB__80_600;
LEGUP_F_expm1f_BB__80_600:
	if ((expm1f_80_81 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__82_601;
	else if ((expm1f_80_81 == 1'd0))
		next_state = LEGUP_F_expm1f_BB__86_641;
LEGUP_F_expm1f_BB__82_601:
		next_state = LEGUP_F_expm1f_BB__82_602;
LEGUP_F_expm1f_BB__82_602:
		next_state = LEGUP_F_expm1f_BB__82_603;
LEGUP_F_expm1f_BB__82_603:
		next_state = LEGUP_F_expm1f_BB__82_604;
LEGUP_F_expm1f_BB__82_604:
		next_state = LEGUP_F_expm1f_BB__82_605;
LEGUP_F_expm1f_BB__82_605:
		next_state = LEGUP_F_expm1f_BB__82_606;
LEGUP_F_expm1f_BB__82_606:
		next_state = LEGUP_F_expm1f_BB__82_607;
LEGUP_F_expm1f_BB__82_607:
		next_state = LEGUP_F_expm1f_BB__82_608;
LEGUP_F_expm1f_BB__82_608:
		next_state = LEGUP_F_expm1f_BB__82_609;
LEGUP_F_expm1f_BB__82_609:
		next_state = LEGUP_F_expm1f_BB__82_610;
LEGUP_F_expm1f_BB__82_610:
		next_state = LEGUP_F_expm1f_BB__82_611;
LEGUP_F_expm1f_BB__82_611:
		next_state = LEGUP_F_expm1f_BB__82_612;
LEGUP_F_expm1f_BB__82_612:
		next_state = LEGUP_F_expm1f_BB__82_613;
LEGUP_F_expm1f_BB__82_613:
		next_state = LEGUP_F_expm1f_BB__82_614;
LEGUP_F_expm1f_BB__82_614:
		next_state = LEGUP_F_expm1f_BB__82_615;
LEGUP_F_expm1f_BB__82_615:
		next_state = LEGUP_F_expm1f_BB__82_616;
LEGUP_F_expm1f_BB__82_616:
		next_state = LEGUP_F_expm1f_BB__82_617;
LEGUP_F_expm1f_BB__82_617:
		next_state = LEGUP_F_expm1f_BB__82_618;
LEGUP_F_expm1f_BB__82_618:
		next_state = LEGUP_F_expm1f_BB__82_619;
LEGUP_F_expm1f_BB__82_619:
		next_state = LEGUP_F_expm1f_BB__82_620;
LEGUP_F_expm1f_BB__82_620:
		next_state = LEGUP_F_expm1f_BB__82_621;
LEGUP_F_expm1f_BB__82_621:
		next_state = LEGUP_F_expm1f_BB__82_622;
LEGUP_F_expm1f_BB__82_622:
		next_state = LEGUP_F_expm1f_BB__82_623;
LEGUP_F_expm1f_BB__82_623:
		next_state = LEGUP_F_expm1f_BB__82_624;
LEGUP_F_expm1f_BB__82_624:
		next_state = LEGUP_F_expm1f_BB__82_625;
LEGUP_F_expm1f_BB__82_625:
		next_state = LEGUP_F_expm1f_BB__82_626;
LEGUP_F_expm1f_BB__82_626:
		next_state = LEGUP_F_expm1f_BB__82_627;
LEGUP_F_expm1f_BB__82_627:
		next_state = LEGUP_F_expm1f_BB__82_628;
LEGUP_F_expm1f_BB__82_628:
		next_state = LEGUP_F_expm1f_BB__82_629;
LEGUP_F_expm1f_BB__82_629:
		next_state = LEGUP_F_expm1f_BB__82_630;
LEGUP_F_expm1f_BB__82_630:
		next_state = LEGUP_F_expm1f_BB__82_631;
LEGUP_F_expm1f_BB__82_631:
		next_state = LEGUP_F_expm1f_BB__82_632;
LEGUP_F_expm1f_BB__82_632:
		next_state = LEGUP_F_expm1f_BB__82_633;
LEGUP_F_expm1f_BB__82_633:
		next_state = LEGUP_F_expm1f_BB__82_634;
LEGUP_F_expm1f_BB__82_634:
		next_state = LEGUP_F_expm1f_BB__82_635;
LEGUP_F_expm1f_BB__82_635:
		next_state = LEGUP_F_expm1f_BB__82_636;
LEGUP_F_expm1f_BB__82_636:
		next_state = LEGUP_F_expm1f_BB__82_637;
LEGUP_F_expm1f_BB__82_637:
		next_state = LEGUP_F_expm1f_BB__82_638;
LEGUP_F_expm1f_BB__82_638:
		next_state = LEGUP_F_expm1f_BB__82_639;
LEGUP_F_expm1f_BB__82_639:
		next_state = LEGUP_F_expm1f_BB__82_640;
LEGUP_F_expm1f_BB__82_640:
		next_state = LEGUP_F_expm1f_BB__123_798;
LEGUP_F_expm1f_BB__86_641:
		next_state = LEGUP_F_expm1f_BB__86_642;
LEGUP_F_expm1f_BB__86_642:
		next_state = LEGUP_F_expm1f_BB__86_643;
LEGUP_F_expm1f_BB__86_643:
		next_state = LEGUP_F_expm1f_BB__86_644;
LEGUP_F_expm1f_BB__86_644:
		next_state = LEGUP_F_expm1f_BB__86_645;
LEGUP_F_expm1f_BB__86_645:
		next_state = LEGUP_F_expm1f_BB__86_646;
LEGUP_F_expm1f_BB__86_646:
		next_state = LEGUP_F_expm1f_BB__86_647;
LEGUP_F_expm1f_BB__86_647:
		next_state = LEGUP_F_expm1f_BB__86_648;
LEGUP_F_expm1f_BB__86_648:
		next_state = LEGUP_F_expm1f_BB__86_649;
LEGUP_F_expm1f_BB__86_649:
		next_state = LEGUP_F_expm1f_BB__86_650;
LEGUP_F_expm1f_BB__86_650:
		next_state = LEGUP_F_expm1f_BB__86_651;
LEGUP_F_expm1f_BB__86_651:
		next_state = LEGUP_F_expm1f_BB__86_652;
LEGUP_F_expm1f_BB__86_652:
		next_state = LEGUP_F_expm1f_BB__86_653;
LEGUP_F_expm1f_BB__86_653:
		next_state = LEGUP_F_expm1f_BB__86_654;
LEGUP_F_expm1f_BB__86_654:
		next_state = LEGUP_F_expm1f_BB__86_655;
LEGUP_F_expm1f_BB__86_655:
		next_state = LEGUP_F_expm1f_BB__86_656;
LEGUP_F_expm1f_BB__86_656:
		next_state = LEGUP_F_expm1f_BB__86_657;
LEGUP_F_expm1f_BB__86_657:
		next_state = LEGUP_F_expm1f_BB__86_658;
LEGUP_F_expm1f_BB__86_658:
		next_state = LEGUP_F_expm1f_BB__86_659;
LEGUP_F_expm1f_BB__86_659:
		next_state = LEGUP_F_expm1f_BB__86_660;
LEGUP_F_expm1f_BB__86_660:
		next_state = LEGUP_F_expm1f_BB__86_661;
LEGUP_F_expm1f_BB__86_661:
		next_state = LEGUP_F_expm1f_BB__86_662;
LEGUP_F_expm1f_BB__86_662:
		next_state = LEGUP_F_expm1f_BB__86_663;
LEGUP_F_expm1f_BB__86_663:
		next_state = LEGUP_F_expm1f_BB__86_664;
LEGUP_F_expm1f_BB__86_664:
		next_state = LEGUP_F_expm1f_BB__86_665;
LEGUP_F_expm1f_BB__86_665:
		next_state = LEGUP_F_expm1f_BB__86_666;
LEGUP_F_expm1f_BB__86_666:
		next_state = LEGUP_F_expm1f_BB__86_667;
LEGUP_F_expm1f_BB__86_667:
		next_state = LEGUP_F_expm1f_BB__86_668;
LEGUP_F_expm1f_BB__86_668:
		next_state = LEGUP_F_expm1f_BB__86_669;
LEGUP_F_expm1f_BB__86_669:
		next_state = LEGUP_F_expm1f_BB__86_670;
LEGUP_F_expm1f_BB__86_670:
		next_state = LEGUP_F_expm1f_BB__86_671;
LEGUP_F_expm1f_BB__86_671:
		next_state = LEGUP_F_expm1f_BB__86_672;
LEGUP_F_expm1f_BB__86_672:
		next_state = LEGUP_F_expm1f_BB__86_673;
LEGUP_F_expm1f_BB__86_673:
		next_state = LEGUP_F_expm1f_BB__86_674;
LEGUP_F_expm1f_BB__86_674:
		next_state = LEGUP_F_expm1f_BB__86_675;
LEGUP_F_expm1f_BB__86_675:
		next_state = LEGUP_F_expm1f_BB__86_676;
LEGUP_F_expm1f_BB__86_676:
		next_state = LEGUP_F_expm1f_BB__86_677;
LEGUP_F_expm1f_BB__86_677:
		next_state = LEGUP_F_expm1f_BB__86_678;
LEGUP_F_expm1f_BB__86_678:
		next_state = LEGUP_F_expm1f_BB__86_679;
LEGUP_F_expm1f_BB__86_679:
		next_state = LEGUP_F_expm1f_BB__86_680;
LEGUP_F_expm1f_BB__86_680:
		next_state = LEGUP_F_expm1f_BB__123_798;
LEGUP_F_expm1f_BB__90_681:
	if ((expm1f_90_91 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__92_682;
	else if ((expm1f_90_91 == 1'd0))
		next_state = LEGUP_F_expm1f_BB__100_725;
LEGUP_F_expm1f_BB__92_682:
		next_state = LEGUP_F_expm1f_BB__92_683;
LEGUP_F_expm1f_BB__92_683:
		next_state = LEGUP_F_expm1f_BB__92_684;
LEGUP_F_expm1f_BB__92_684:
		next_state = LEGUP_F_expm1f_BB__92_685;
LEGUP_F_expm1f_BB__92_685:
		next_state = LEGUP_F_expm1f_BB__92_686;
LEGUP_F_expm1f_BB__92_686:
		next_state = LEGUP_F_expm1f_BB__92_687;
LEGUP_F_expm1f_BB__92_687:
		next_state = LEGUP_F_expm1f_BB__92_688;
LEGUP_F_expm1f_BB__92_688:
		next_state = LEGUP_F_expm1f_BB__92_689;
LEGUP_F_expm1f_BB__92_689:
		next_state = LEGUP_F_expm1f_BB__92_690;
LEGUP_F_expm1f_BB__92_690:
		next_state = LEGUP_F_expm1f_BB__92_691;
LEGUP_F_expm1f_BB__92_691:
		next_state = LEGUP_F_expm1f_BB__92_692;
LEGUP_F_expm1f_BB__92_692:
		next_state = LEGUP_F_expm1f_BB__92_693;
LEGUP_F_expm1f_BB__92_693:
		next_state = LEGUP_F_expm1f_BB__92_694;
LEGUP_F_expm1f_BB__92_694:
		next_state = LEGUP_F_expm1f_BB__92_695;
LEGUP_F_expm1f_BB__92_695:
		next_state = LEGUP_F_expm1f_BB__92_696;
LEGUP_F_expm1f_BB__92_696:
		next_state = LEGUP_F_expm1f_BB__92_697;
LEGUP_F_expm1f_BB__92_697:
		next_state = LEGUP_F_expm1f_BB__92_698;
LEGUP_F_expm1f_BB__92_698:
		next_state = LEGUP_F_expm1f_BB__92_699;
LEGUP_F_expm1f_BB__92_699:
		next_state = LEGUP_F_expm1f_BB__92_700;
LEGUP_F_expm1f_BB__92_700:
		next_state = LEGUP_F_expm1f_BB__92_701;
LEGUP_F_expm1f_BB__92_701:
		next_state = LEGUP_F_expm1f_BB__92_702;
LEGUP_F_expm1f_BB__92_702:
		next_state = LEGUP_F_expm1f_BB__92_703;
LEGUP_F_expm1f_BB__92_703:
		next_state = LEGUP_F_expm1f_BB__92_704;
LEGUP_F_expm1f_BB__92_704:
		next_state = LEGUP_F_expm1f_BB__92_705;
LEGUP_F_expm1f_BB__92_705:
		next_state = LEGUP_F_expm1f_BB__92_706;
LEGUP_F_expm1f_BB__92_706:
		next_state = LEGUP_F_expm1f_BB__92_707;
LEGUP_F_expm1f_BB__92_707:
		next_state = LEGUP_F_expm1f_BB__92_708;
LEGUP_F_expm1f_BB__92_708:
		next_state = LEGUP_F_expm1f_BB__92_709;
LEGUP_F_expm1f_BB__92_709:
		next_state = LEGUP_F_expm1f_BB__92_710;
LEGUP_F_expm1f_BB__92_710:
		next_state = LEGUP_F_expm1f_BB__92_711;
LEGUP_F_expm1f_BB__92_711:
		next_state = LEGUP_F_expm1f_BB__92_712;
LEGUP_F_expm1f_BB__92_712:
		next_state = LEGUP_F_expm1f_BB__92_713;
LEGUP_F_expm1f_BB__92_713:
		next_state = LEGUP_F_expm1f_BB__92_714;
LEGUP_F_expm1f_BB__92_714:
		next_state = LEGUP_F_expm1f_BB__92_715;
LEGUP_F_expm1f_BB__92_715:
		next_state = LEGUP_F_expm1f_BB__92_716;
LEGUP_F_expm1f_BB__92_716:
		next_state = LEGUP_F_expm1f_BB__92_717;
LEGUP_F_expm1f_BB__92_717:
		next_state = LEGUP_F_expm1f_BB__92_718;
LEGUP_F_expm1f_BB__92_718:
		next_state = LEGUP_F_expm1f_BB__92_719;
LEGUP_F_expm1f_BB__92_719:
		next_state = LEGUP_F_expm1f_BB__92_720;
LEGUP_F_expm1f_BB__92_720:
		next_state = LEGUP_F_expm1f_BB__92_721;
LEGUP_F_expm1f_BB__92_721:
		next_state = LEGUP_F_expm1f_BB__92_722;
LEGUP_F_expm1f_BB__92_722:
		next_state = LEGUP_F_expm1f_BB__92_723;
LEGUP_F_expm1f_BB__92_723:
		next_state = LEGUP_F_expm1f_BB__92_724;
LEGUP_F_expm1f_BB__92_724:
		next_state = LEGUP_F_expm1f_BB__123_798;
LEGUP_F_expm1f_BB__9_10:
		next_state = LEGUP_F_expm1f_BB__9_11;
LEGUP_F_expm1f_BB__9_11:
		next_state = LEGUP_F_expm1f_BB__9_12;
LEGUP_F_expm1f_BB__9_12:
		next_state = LEGUP_F_expm1f_BB__9_13;
LEGUP_F_expm1f_BB__9_13:
		next_state = LEGUP_F_expm1f_BB__9_14;
LEGUP_F_expm1f_BB__9_14:
		next_state = LEGUP_F_expm1f_BB__9_15;
LEGUP_F_expm1f_BB__9_15:
		next_state = LEGUP_F_expm1f_BB__9_16;
LEGUP_F_expm1f_BB__9_16:
		next_state = LEGUP_F_expm1f_BB__9_17;
LEGUP_F_expm1f_BB__9_17:
		next_state = LEGUP_F_expm1f_BB__9_18;
LEGUP_F_expm1f_BB__9_18:
		next_state = LEGUP_F_expm1f_BB__9_19;
LEGUP_F_expm1f_BB__9_19:
		next_state = LEGUP_F_expm1f_BB__123_798;
LEGUP_F_expm1f_BB__9_5:
		next_state = LEGUP_F_expm1f_BB__9_6;
LEGUP_F_expm1f_BB__9_6:
		next_state = LEGUP_F_expm1f_BB__9_7;
LEGUP_F_expm1f_BB__9_7:
		next_state = LEGUP_F_expm1f_BB__9_8;
LEGUP_F_expm1f_BB__9_8:
		next_state = LEGUP_F_expm1f_BB__9_9;
LEGUP_F_expm1f_BB__9_9:
		next_state = LEGUP_F_expm1f_BB__9_10;
LEGUP_F_expm1f_BB_thread_24:
		next_state = LEGUP_F_expm1f_BB_thread_25;
LEGUP_F_expm1f_BB_thread_25:
		next_state = LEGUP_F_expm1f_BB_thread_26;
LEGUP_F_expm1f_BB_thread_26:
		next_state = LEGUP_F_expm1f_BB_thread_27;
LEGUP_F_expm1f_BB_thread_27:
		next_state = LEGUP_F_expm1f_BB_thread_28;
LEGUP_F_expm1f_BB_thread_28:
		next_state = LEGUP_F_expm1f_BB_thread_29;
LEGUP_F_expm1f_BB_thread_29:
		next_state = LEGUP_F_expm1f_BB_thread_30;
LEGUP_F_expm1f_BB_thread_30:
		next_state = LEGUP_F_expm1f_BB_thread_31;
LEGUP_F_expm1f_BB_thread_31:
		next_state = LEGUP_F_expm1f_BB_thread_32;
LEGUP_F_expm1f_BB_thread_32:
		next_state = LEGUP_F_expm1f_BB_thread_33;
LEGUP_F_expm1f_BB_thread_33:
		next_state = LEGUP_F_expm1f_BB_thread_34;
LEGUP_F_expm1f_BB_thread_34:
		next_state = LEGUP_F_expm1f_BB_thread_35;
LEGUP_F_expm1f_BB_thread_35:
		next_state = LEGUP_F_expm1f_BB_thread_36;
LEGUP_F_expm1f_BB_thread_36:
		next_state = LEGUP_F_expm1f_BB_thread_37;
LEGUP_F_expm1f_BB_thread_37:
		next_state = LEGUP_F_expm1f_BB_thread_38;
LEGUP_F_expm1f_BB_thread_38:
		next_state = LEGUP_F_expm1f_BB_thread_39;
LEGUP_F_expm1f_BB_thread_39:
	if ((expm1f_thread_18 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__123_798;
	else if ((expm1f_thread_18 == 1'd0))
		next_state = LEGUP_F_expm1f_BB_threadpresplit_40;
LEGUP_F_expm1f_BB_threadpresplit_40:
	if ((expm1f_threadpresplit_19 == 1'd1))
		next_state = LEGUP_F_expm1f_BB__20_41;
	else if ((expm1f_threadpresplit_19 == 1'd0))
		next_state = LEGUP_F_expm1f_BB__40_179;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* expm1f: %0*/
	/*   %1 = bitcast float %x to i32*/
		expm1f_0_1 = arg_x;
end
always @(posedge clk) begin
	/* expm1f: %0*/
	/*   %1 = bitcast float %x to i32*/
	if ((cur_state == LEGUP_F_expm1f_BB__0_1)) begin
		expm1f_0_1_reg <= expm1f_0_1;
		if (start == 1'b0 && ^(expm1f_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %0*/
	/*   %2 = icmp sgt i32 %1, -1*/
		expm1f_0_2 = ($signed(expm1f_0_1) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* expm1f: %0*/
	/*   %2 = icmp sgt i32 %1, -1*/
	if ((cur_state == LEGUP_F_expm1f_BB__0_1)) begin
		expm1f_0_2_reg <= expm1f_0_2;
		if (start == 1'b0 && ^(expm1f_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %4*/
	/*   %5 = and i32 %1, 2147483647*/
		expm1f_4_5 = (expm1f_0_1_reg & 32'd2147483647);
end
always @(posedge clk) begin
	/* expm1f: %4*/
	/*   %5 = and i32 %1, 2147483647*/
	if ((cur_state == LEGUP_F_expm1f_BB__4_3)) begin
		expm1f_4_5_reg <= expm1f_4_5;
		if (start == 1'b0 && ^(expm1f_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %4*/
	/*   %6 = icmp ugt i32 %5, 1100331075*/
		expm1f_4_6 = (expm1f_4_5 > 32'd1100331075);
end
always @(*) begin
	/* expm1f: %7*/
	/*   %8 = icmp ugt i32 %5, 2139095040*/
		expm1f_7_8 = (expm1f_4_5_reg > 32'd2139095040);
end
always @(*) begin
	expm1f_9_10 = expm1f_altfp_add_32_0;
end
always @(posedge clk) begin
	/* expm1f: %9*/
	/*   %10 = fadd float %x, %x*/
	if ((cur_state == LEGUP_F_expm1f_BB__9_19)) begin
		expm1f_9_10_reg <= expm1f_9_10;
		if (start == 1'b0 && ^(expm1f_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %9*/
	/*   %10 = fadd float %x, %x*/
	if ((cur_state == LEGUP_F_expm1f_BB__9_19)) begin
		expm1f_9_10_reg <= expm1f_9_10;
		if (start == 1'b0 && ^(expm1f_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %23*/
	/*   %24 = fadd float %x, 0xBFE62E3000000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__23_57)) begin
		expm1f_9_10_reg <= expm1f_23_24;
		if (start == 1'b0 && ^(expm1f_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %27*/
	/*   %30 = fadd float %28, %29*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_98)) begin
		expm1f_9_10_reg <= expm1f_27_30;
		if (start == 1'b0 && ^(expm1f_27_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %42*/
	/*   %43 = fadd float %x, 0x46293E5940000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__42_194)) begin
		expm1f_9_10_reg <= expm1f_42_43;
		if (start == 1'b0 && ^(expm1f_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %50 = fadd float %49, 0x3ED0CFCA80000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_270)) begin
		expm1f_9_10_reg <= expm1f_46_50;
		if (start == 1'b0 && ^(expm1f_46_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %52 = fadd float %51, 0xBF14CE19A0000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_295)) begin
		expm1f_9_10_reg <= expm1f_46_52;
		if (start == 1'b0 && ^(expm1f_46_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %54 = fadd float %53, 0x3F5A01A020000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_320)) begin
		expm1f_9_10_reg <= expm1f_46_54;
		if (start == 1'b0 && ^(expm1f_46_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %56 = fadd float %55, 0xBFA1111120000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_345)) begin
		expm1f_9_10_reg <= expm1f_46_56;
		if (start == 1'b0 && ^(expm1f_46_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %58 = fadd float %57, 1.000000e+00*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_370)) begin
		expm1f_9_10_reg <= expm1f_46_58;
		if (start == 1'b0 && ^(expm1f_46_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %82*/
	/*   %83 = fadd float %.062, 5.000000e-01*/
	if ((cur_state == LEGUP_F_expm1f_BB__82_615)) begin
		expm1f_9_10_reg <= expm1f_82_83;
		if (start == 1'b0 && ^(expm1f_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %112*/
	/*   %116 = fadd float %75, %115*/
	if ((cur_state == LEGUP_F_expm1f_BB__112_769)) begin
		expm1f_9_10_reg <= expm1f_112_116;
		if (start == 1'b0 && ^(expm1f_112_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
	/* expm1f: %112*/
	/*   %118 = fadd float %117, 1.000000e+00*/
	if ((cur_state == LEGUP_F_expm1f_BB__112_797)) begin
		expm1f_9_10_reg <= expm1f_112_118;
		if (start == 1'b0 && ^(expm1f_112_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %11*/
	/*   %12 = icmp eq i32 %5, 2139095040*/
		expm1f_11_12 = (expm1f_4_5_reg == 32'd2139095040);
end
always @(*) begin
	/* expm1f: %13*/
	/*   %x. = select i1 %2, float %x, float -1.000000e+00*/
		expm1f_13_x = (expm1f_0_2_reg ? arg_x : 32'hBF800000);
end
always @(*) begin
	/* expm1f: %15*/
	/*   %16 = icmp ugt i32 %5, 1118925335*/
		expm1f_15_16 = (expm1f_4_5_reg > 32'd1118925335);
end
always @(*) begin
	expm1f_thread_17 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_thread_18 = altfp_compare32_1_expm1f_thread_18_out;
end
always @(*) begin
	/* expm1f: %thread-pre-split*/
	/*   %19 = icmp ugt i32 %5, 1051816472*/
		expm1f_threadpresplit_19 = (expm1f_4_5_reg > 32'd1051816472);
end
always @(*) begin
	/* expm1f: %20*/
	/*   %21 = icmp ult i32 %5, 1065686418*/
		expm1f_20_21 = (expm1f_4_5_reg < 32'd1065686418);
end
always @(*) begin
	expm1f_23_24 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_25_26 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_27_28 = expm1f_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* expm1f: %27*/
	/*   %28 = fmul float %x, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_84)) begin
		expm1f_27_28_reg <= expm1f_27_28;
		if (start == 1'b0 && ^(expm1f_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_28_reg"); $finish; end
	end
	/* expm1f: %27*/
	/*   %28 = fmul float %x, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_84)) begin
		expm1f_27_28_reg <= expm1f_27_28;
		if (start == 1'b0 && ^(expm1f_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_28_reg"); $finish; end
	end
	/* expm1f: %27*/
	/*   %33 = fmul float %32, 0x3FE62E3000000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_121)) begin
		expm1f_27_28_reg <= expm1f_27_33;
		if (start == 1'b0 && ^(expm1f_27_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_28_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %47 = fmul float %.062, 5.000000e-01*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_234)) begin
		expm1f_27_28_reg <= expm1f_46_47;
		if (start == 1'b0 && ^(expm1f_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_28_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %62 = fmul float %.062, %60*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_406)) begin
		expm1f_27_28_reg <= expm1f_46_62;
		if (start == 1'b0 && ^(expm1f_46_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_28_reg"); $finish; end
	end
	/* expm1f: %67*/
	/*   %68 = fmul float %.062, %65*/
	if ((cur_state == LEGUP_F_expm1f_BB__67_476)) begin
		expm1f_27_28_reg <= expm1f_67_68;
		if (start == 1'b0 && ^(expm1f_67_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_28_reg"); $finish; end
	end
	/* expm1f: %71*/
	/*   %73 = fmul float %.062, %72*/
	if ((cur_state == LEGUP_F_expm1f_BB__71_530)) begin
		expm1f_27_28_reg <= expm1f_71_73;
		if (start == 1'b0 && ^(expm1f_71_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_28_reg"); $finish; end
	end
	/* expm1f: %76*/
	/*   %78 = fmul float %77, 5.000000e-01*/
	if ((cur_state == LEGUP_F_expm1f_BB__76_584)) begin
		expm1f_27_28_reg <= expm1f_76_78;
		if (start == 1'b0 && ^(expm1f_76_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_28_reg"); $finish; end
	end
	/* expm1f: %82*/
	/*   %85 = fmul float %84, -2.000000e+00*/
	if ((cur_state == LEGUP_F_expm1f_BB__82_640)) begin
		expm1f_27_28_reg <= expm1f_82_85;
		if (start == 1'b0 && ^(expm1f_82_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_28_reg"); $finish; end
	end
	/* expm1f: %86*/
	/*   %88 = fmul float %87, 2.000000e+00*/
	if ((cur_state == LEGUP_F_expm1f_BB__86_666)) begin
		expm1f_27_28_reg <= expm1f_86_88;
		if (start == 1'b0 && ^(expm1f_86_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_28_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %27*/
	/*   %29 = select i1 %2, float 5.000000e-01, float -5.000000e-01*/
		expm1f_27_29 = (expm1f_0_2_reg ? 32'h3F000000 : 32'hBF000000);
end
always @(posedge clk) begin
	/* expm1f: %27*/
	/*   %29 = select i1 %2, float 5.000000e-01, float -5.000000e-01*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_73)) begin
		expm1f_27_29_reg <= expm1f_27_29;
		if (start == 1'b0 && ^(expm1f_27_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_29_reg"); $finish; end
	end
end
always @(*) begin
	expm1f_27_30 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_27_31 = expm1f_altfp_fptosi_32_0;
end
always @(posedge clk) begin
	/* expm1f: %27*/
	/*   %31 = fptosi float %30 to i32*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_104)) begin
		expm1f_27_31_reg <= expm1f_27_31;
		if (start == 1'b0 && ^(expm1f_27_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_31_reg"); $finish; end
	end
	/* expm1f: %27*/
	/*   %31 = fptosi float %30 to i32*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_104)) begin
		expm1f_27_31_reg <= expm1f_27_31;
		if (start == 1'b0 && ^(expm1f_27_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_31_reg"); $finish; end
	end
end
always @(*) begin
	expm1f_27_32 = expm1f_altfp_sitofp_32_0;
end
always @(posedge clk) begin
	/* expm1f: %27*/
	/*   %32 = sitofp i32 %31 to float*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_110)) begin
		expm1f_27_32_reg <= expm1f_27_32;
		if (start == 1'b0 && ^(expm1f_27_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_32_reg"); $finish; end
	end
	/* expm1f: %27*/
	/*   %32 = sitofp i32 %31 to float*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_110)) begin
		expm1f_27_32_reg <= expm1f_27_32;
		if (start == 1'b0 && ^(expm1f_27_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_32_reg"); $finish; end
	end
end
always @(*) begin
	expm1f_27_33 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_27_34 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_27_35 = expm1f_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* expm1f: %27*/
	/*   %35 = fmul float %32, 0x3EE2FEFA20000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_122)) begin
		expm1f_27_35_reg <= expm1f_27_35;
		if (start == 1'b0 && ^(expm1f_27_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_35_reg"); $finish; end
	end
	/* expm1f: %27*/
	/*   %35 = fmul float %32, 0x3EE2FEFA20000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_122)) begin
		expm1f_27_35_reg <= expm1f_27_35;
		if (start == 1'b0 && ^(expm1f_27_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_35_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %48 = fmul float %.062, %47*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_245)) begin
		expm1f_27_35_reg <= expm1f_46_48;
		if (start == 1'b0 && ^(expm1f_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_27_35_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %36*/
	/*   %k.0 = phi i32 [ %31, %27 ], [ -1, %25 ], [ 1, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__23_57) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_k0 = 32'd1;
	end
	/* expm1f: %36*/
	/*   %k.0 = phi i32 [ %31, %27 ], [ -1, %25 ], [ 1, %23 ]*/
	else if (((cur_state == LEGUP_F_expm1f_BB__25_72) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_k0 = -32'd1;
	end
	/* expm1f: %36*/
	/*   %k.0 = phi i32 [ %31, %27 ], [ -1, %25 ], [ 1, %23 ]*/
	else /* if (((cur_state == LEGUP_F_expm1f_BB__27_135) & (memory_controller_waitrequest == 1'd0))) */ begin
		expm1f_36_k0 = expm1f_27_31_reg;
	end
end
always @(posedge clk) begin
	/* expm1f: %36*/
	/*   %k.0 = phi i32 [ %31, %27 ], [ -1, %25 ], [ 1, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__23_57) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_k0_reg <= expm1f_36_k0;
		if (start == 1'b0 && ^(expm1f_36_k0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_k0_reg"); $finish; end
	end
	/* expm1f: %36*/
	/*   %k.0 = phi i32 [ %31, %27 ], [ -1, %25 ], [ 1, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__25_72) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_k0_reg <= expm1f_36_k0;
		if (start == 1'b0 && ^(expm1f_36_k0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_k0_reg"); $finish; end
	end
	/* expm1f: %36*/
	/*   %k.0 = phi i32 [ %31, %27 ], [ -1, %25 ], [ 1, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__27_135) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_k0_reg <= expm1f_36_k0;
		if (start == 1'b0 && ^(expm1f_36_k0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_k0_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %36*/
	/*   %lo.0 = phi float [ %35, %27 ], [ 0xBEE2FEFA20000000, %25 ], [ 0x3EE2FEFA20000000, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__23_57) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_lo0 = 32'h3717F7D1;
	end
	/* expm1f: %36*/
	/*   %lo.0 = phi float [ %35, %27 ], [ 0xBEE2FEFA20000000, %25 ], [ 0x3EE2FEFA20000000, %23 ]*/
	else if (((cur_state == LEGUP_F_expm1f_BB__25_72) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_lo0 = 32'hB717F7D1;
	end
	/* expm1f: %36*/
	/*   %lo.0 = phi float [ %35, %27 ], [ 0xBEE2FEFA20000000, %25 ], [ 0x3EE2FEFA20000000, %23 ]*/
	else /* if (((cur_state == LEGUP_F_expm1f_BB__27_135) & (memory_controller_waitrequest == 1'd0))) */ begin
		expm1f_36_lo0 = expm1f_27_35_reg;
	end
end
always @(posedge clk) begin
	/* expm1f: %36*/
	/*   %lo.0 = phi float [ %35, %27 ], [ 0xBEE2FEFA20000000, %25 ], [ 0x3EE2FEFA20000000, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__23_57) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_lo0_reg <= expm1f_36_lo0;
		if (start == 1'b0 && ^(expm1f_36_lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_lo0_reg"); $finish; end
	end
	/* expm1f: %36*/
	/*   %lo.0 = phi float [ %35, %27 ], [ 0xBEE2FEFA20000000, %25 ], [ 0x3EE2FEFA20000000, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__25_72) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_lo0_reg <= expm1f_36_lo0;
		if (start == 1'b0 && ^(expm1f_36_lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_lo0_reg"); $finish; end
	end
	/* expm1f: %36*/
	/*   %lo.0 = phi float [ %35, %27 ], [ 0xBEE2FEFA20000000, %25 ], [ 0x3EE2FEFA20000000, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__27_135) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_lo0_reg <= expm1f_36_lo0;
		if (start == 1'b0 && ^(expm1f_36_lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_lo0_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %36*/
	/*   %hi.0 = phi float [ %34, %27 ], [ %26, %25 ], [ %24, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__23_57) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_hi0 = expm1f_23_24;
	end
	/* expm1f: %36*/
	/*   %hi.0 = phi float [ %34, %27 ], [ %26, %25 ], [ %24, %23 ]*/
	else if (((cur_state == LEGUP_F_expm1f_BB__25_72) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_hi0 = expm1f_25_26;
	end
	/* expm1f: %36*/
	/*   %hi.0 = phi float [ %34, %27 ], [ %26, %25 ], [ %24, %23 ]*/
	else /* if (((cur_state == LEGUP_F_expm1f_BB__27_135) & (memory_controller_waitrequest == 1'd0))) */ begin
		expm1f_36_hi0 = expm1f_27_34;
	end
end
always @(posedge clk) begin
	/* expm1f: %36*/
	/*   %hi.0 = phi float [ %34, %27 ], [ %26, %25 ], [ %24, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__23_57) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_hi0_reg <= expm1f_36_hi0;
		if (start == 1'b0 && ^(expm1f_36_hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_hi0_reg"); $finish; end
	end
	/* expm1f: %36*/
	/*   %hi.0 = phi float [ %34, %27 ], [ %26, %25 ], [ %24, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__25_72) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_hi0_reg <= expm1f_36_hi0;
		if (start == 1'b0 && ^(expm1f_36_hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_hi0_reg"); $finish; end
	end
	/* expm1f: %36*/
	/*   %hi.0 = phi float [ %34, %27 ], [ %26, %25 ], [ %24, %23 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__27_135) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_36_hi0_reg <= expm1f_36_hi0;
		if (start == 1'b0 && ^(expm1f_36_hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_hi0_reg"); $finish; end
	end
end
always @(*) begin
	expm1f_36_37 = expm1f_altfp_subtract_32_0;
end
always @(posedge clk) begin
	/* expm1f: %36*/
	/*   %37 = fsub float %hi.0, %lo.0*/
	if ((cur_state == LEGUP_F_expm1f_BB__36_150)) begin
		expm1f_36_37_reg <= expm1f_36_37;
		if (start == 1'b0 && ^(expm1f_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_37_reg"); $finish; end
	end
	/* expm1f: %36*/
	/*   %37 = fsub float %hi.0, %lo.0*/
	if ((cur_state == LEGUP_F_expm1f_BB__36_150)) begin
		expm1f_36_37_reg <= expm1f_36_37;
		if (start == 1'b0 && ^(expm1f_36_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_37_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %61 = fsub float %58, %60*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_409)) begin
		expm1f_36_37_reg <= expm1f_46_61;
		if (start == 1'b0 && ^(expm1f_46_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_37_reg"); $finish; end
	end
	/* expm1f: %71*/
	/*   %75 = fsub float %74, %48*/
	if ((cur_state == LEGUP_F_expm1f_BB__71_558)) begin
		expm1f_36_37_reg <= expm1f_71_75;
		if (start == 1'b0 && ^(expm1f_71_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_36_37_reg"); $finish; end
	end
end
always @(*) begin
	expm1f_36_38 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_36_39 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	/* expm1f: %40*/
	/*   %41 = icmp ult i32 %5, 855638016*/
		expm1f_40_41 = (expm1f_4_5_reg < 32'd855638016);
end
always @(*) begin
	expm1f_42_43 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_42_44 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_42_45 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	/* expm1f: %46*/
	/*   %k.1 = phi i32 [ %k.0, %36 ], [ 0, %40 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__36_178) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_46_k1 = expm1f_36_k0_reg;
	end
	/* expm1f: %46*/
	/*   %k.1 = phi i32 [ %k.0, %36 ], [ 0, %40 ]*/
	else /* if ((((cur_state == LEGUP_F_expm1f_BB__40_179) & (memory_controller_waitrequest == 1'd0)) & (expm1f_40_41 == 1'd0))) */ begin
		expm1f_46_k1 = 32'd0;
	end
end
always @(posedge clk) begin
	/* expm1f: %46*/
	/*   %k.1 = phi i32 [ %k.0, %36 ], [ 0, %40 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__36_178) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_46_k1_reg <= expm1f_46_k1;
		if (start == 1'b0 && ^(expm1f_46_k1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_46_k1_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %k.1 = phi i32 [ %k.0, %36 ], [ 0, %40 ]*/
	if ((((cur_state == LEGUP_F_expm1f_BB__40_179) & (memory_controller_waitrequest == 1'd0)) & (expm1f_40_41 == 1'd0))) begin
		expm1f_46_k1_reg <= expm1f_46_k1;
		if (start == 1'b0 && ^(expm1f_46_k1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_46_k1_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %46*/
	/*   %c.0 = phi float [ %39, %36 ], [ undef, %40 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__36_178) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_46_c0 = expm1f_36_39;
	end
	/* expm1f: %46*/
	/*   %c.0 = phi float [ %39, %36 ], [ undef, %40 ]*/
	else /* if ((((cur_state == LEGUP_F_expm1f_BB__40_179) & (memory_controller_waitrequest == 1'd0)) & (expm1f_40_41 == 1'd0))) */ begin
		expm1f_46_c0 = 0;
	end
end
always @(posedge clk) begin
	/* expm1f: %46*/
	/*   %c.0 = phi float [ %39, %36 ], [ undef, %40 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__36_178) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_46_c0_reg <= expm1f_46_c0;
		if (start == 1'b0 && ^(expm1f_46_c0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_46_c0_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %c.0 = phi float [ %39, %36 ], [ undef, %40 ]*/
	if ((((cur_state == LEGUP_F_expm1f_BB__40_179) & (memory_controller_waitrequest == 1'd0)) & (expm1f_40_41 == 1'd0))) begin
		expm1f_46_c0_reg <= expm1f_46_c0;
		if (start == 1'b0 && ^(expm1f_46_c0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_46_c0_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %46*/
	/*   %.062 = phi float [ %37, %36 ], [ %x, %40 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__36_178) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_46_062 = expm1f_36_37_reg;
	end
	/* expm1f: %46*/
	/*   %.062 = phi float [ %37, %36 ], [ %x, %40 ]*/
	else /* if ((((cur_state == LEGUP_F_expm1f_BB__40_179) & (memory_controller_waitrequest == 1'd0)) & (expm1f_40_41 == 1'd0))) */ begin
		expm1f_46_062 = arg_x;
	end
end
always @(posedge clk) begin
	/* expm1f: %46*/
	/*   %.062 = phi float [ %37, %36 ], [ %x, %40 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__36_178) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_46_062_reg <= expm1f_46_062;
		if (start == 1'b0 && ^(expm1f_46_062) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_46_062_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %.062 = phi float [ %37, %36 ], [ %x, %40 ]*/
	if ((((cur_state == LEGUP_F_expm1f_BB__40_179) & (memory_controller_waitrequest == 1'd0)) & (expm1f_40_41 == 1'd0))) begin
		expm1f_46_062_reg <= expm1f_46_062;
		if (start == 1'b0 && ^(expm1f_46_062) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_46_062_reg"); $finish; end
	end
end
always @(*) begin
	expm1f_46_47 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
/* expm1f: %46*/
/*   %47 = fmul float %.062, 5.000000e-01*/
	expm1f_46_47_reg = expm1f_27_28_reg;
end
always @(*) begin
	expm1f_46_48 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
/* expm1f: %46*/
/*   %48 = fmul float %.062, %47*/
	expm1f_46_48_reg = expm1f_27_35_reg;
end
always @(*) begin
	expm1f_46_49 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_46_50 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_46_51 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_46_52 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_46_53 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_46_54 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_46_55 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_46_56 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_46_57 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_46_58 = expm1f_altfp_add_32_0;
end
always @(*) begin
/* expm1f: %46*/
/*   %58 = fadd float %57, 1.000000e+00*/
	expm1f_46_58_reg = expm1f_9_10_reg;
end
always @(*) begin
	expm1f_46_59 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_46_60 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_46_61 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
/* expm1f: %46*/
/*   %61 = fsub float %58, %60*/
	expm1f_46_61_reg = expm1f_36_37_reg;
end
always @(*) begin
	expm1f_46_62 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_46_63 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_46_64 = expm1f_altfp_divide_32_0;
end
always @(*) begin
	expm1f_46_65 = expm1f_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* expm1f: %46*/
	/*   %65 = fmul float %48, %64*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_464)) begin
		expm1f_46_65_reg <= expm1f_46_65;
		if (start == 1'b0 && ^(expm1f_46_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_46_65_reg"); $finish; end
	end
	/* expm1f: %46*/
	/*   %65 = fmul float %48, %64*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_464)) begin
		expm1f_46_65_reg <= expm1f_46_65;
		if (start == 1'b0 && ^(expm1f_46_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_46_65_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %46*/
	/*   %66 = icmp eq i32 %k.1, 0*/
		expm1f_46_66 = (expm1f_46_k1_reg == 32'd0);
end
always @(posedge clk) begin
	/* expm1f: %46*/
	/*   %66 = icmp eq i32 %k.1, 0*/
	if ((cur_state == LEGUP_F_expm1f_BB__46_223)) begin
		expm1f_46_66_reg <= expm1f_46_66;
		if (start == 1'b0 && ^(expm1f_46_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_46_66_reg"); $finish; end
	end
end
always @(*) begin
	expm1f_67_68 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_67_69 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_67_70 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_71_72 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_71_73 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_71_74 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_71_75 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
/* expm1f: %71*/
/*   %75 = fsub float %74, %48*/
	expm1f_71_75_reg = expm1f_36_37_reg;
end
always @(*) begin
	expm1f_76_77 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_76_78 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_76_79 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_80_81 = altfp_compare32_1_expm1f_80_81_out;
end
always @(*) begin
	expm1f_82_83 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_82_84 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_82_85 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_86_87 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_86_88 = expm1f_altfp_multiply_32_0;
end
always @(*) begin
	expm1f_86_89 = expm1f_altfp_add_32_0;
end
always @(*) begin
	/* expm1f: %90*/
	/*   %k.1.off = add i32 %k.1, 1*/
		expm1f_90_k1off = (expm1f_46_k1_reg + 32'd1);
end
always @(*) begin
	/* expm1f: %90*/
	/*   %91 = icmp ugt i32 %k.1.off, 57*/
		expm1f_90_91 = (expm1f_90_k1off > 32'd57);
end
always @(*) begin
	expm1f_92_93 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_92_94 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	/* expm1f: %92*/
	/*   %95 = bitcast float %94 to i32*/
		expm1f_92_95 = expm1f_92_94;
end
always @(*) begin
	/* expm1f: %92*/
	/*   %96 = shl i32 %k.1, 23*/
		expm1f_92_96 = (expm1f_46_k1_reg <<< (32'd23 % 32));
end
always @(posedge clk) begin
	/* expm1f: %92*/
	/*   %96 = shl i32 %k.1, 23*/
	if ((cur_state == LEGUP_F_expm1f_BB__92_682)) begin
		expm1f_92_96_reg <= expm1f_92_96;
		if (start == 1'b0 && ^(expm1f_92_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_92_96_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %92*/
	/*   %97 = add nsw i32 %95, %96*/
		expm1f_92_97 = (expm1f_92_95 + expm1f_92_96_reg);
end
always @(*) begin
	/* expm1f: %92*/
	/*   %98 = bitcast i32 %97 to float*/
		expm1f_92_98 = expm1f_92_97;
end
always @(*) begin
	expm1f_92_99 = expm1f_altfp_add_32_0;
end
always @(*) begin
	/* expm1f: %100*/
	/*   %101 = icmp slt i32 %k.1, 23*/
		expm1f_100_101 = ($signed(expm1f_46_k1_reg) < $signed(32'd23));
end
always @(*) begin
	/* expm1f: %102*/
	/*   %103 = lshr i32 16777216, %k.1*/
		expm1f_102_103 = (32'd16777216 >>> (expm1f_46_k1_reg % 32));
end
always @(*) begin
	/* expm1f: %102*/
	/*   %104 = sub nsw i32 1065353216, %103*/
		expm1f_102_104 = (32'd1065353216 - expm1f_102_103);
end
always @(*) begin
	/* expm1f: %102*/
	/*   %105 = bitcast i32 %104 to float*/
		expm1f_102_105 = expm1f_102_104;
end
always @(posedge clk) begin
	/* expm1f: %102*/
	/*   %105 = bitcast i32 %104 to float*/
	if ((cur_state == LEGUP_F_expm1f_BB__102_726)) begin
		expm1f_102_105_reg <= expm1f_102_105;
		if (start == 1'b0 && ^(expm1f_102_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_102_105_reg"); $finish; end
	end
end
always @(*) begin
	expm1f_102_106 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_102_107 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	/* expm1f: %102*/
	/*   %108 = bitcast float %107 to i32*/
		expm1f_102_108 = expm1f_102_107;
end
always @(*) begin
	/* expm1f: %102*/
	/*   %109 = shl i32 %k.1, 23*/
		expm1f_102_109 = (expm1f_46_k1_reg <<< (32'd23 % 32));
end
always @(posedge clk) begin
	/* expm1f: %102*/
	/*   %109 = shl i32 %k.1, 23*/
	if ((cur_state == LEGUP_F_expm1f_BB__102_726)) begin
		expm1f_102_109_reg <= expm1f_102_109;
		if (start == 1'b0 && ^(expm1f_102_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_102_109_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %102*/
	/*   %110 = add nsw i32 %108, %109*/
		expm1f_102_110 = (expm1f_102_108 + expm1f_102_109_reg);
end
always @(*) begin
	/* expm1f: %102*/
	/*   %111 = bitcast i32 %110 to float*/
		expm1f_102_111 = expm1f_102_110;
end
always @(*) begin
	/* expm1f: %112*/
	/*   %113 = sub nsw i32 127, %k.1*/
		expm1f_112_113 = (32'd127 - expm1f_46_k1_reg);
end
always @(*) begin
	/* expm1f: %112*/
	/*   %114 = shl i32 %113, 23*/
		expm1f_112_114 = (expm1f_112_113 <<< (32'd23 % 32));
end
always @(*) begin
	/* expm1f: %112*/
	/*   %115 = bitcast i32 %114 to float*/
		expm1f_112_115 = expm1f_112_114;
end
always @(*) begin
	expm1f_112_116 = expm1f_altfp_add_32_0;
end
always @(*) begin
	expm1f_112_117 = expm1f_altfp_subtract_32_0;
end
always @(*) begin
	expm1f_112_118 = expm1f_altfp_add_32_0;
end
always @(*) begin
	/* expm1f: %112*/
	/*   %119 = bitcast float %118 to i32*/
		expm1f_112_119 = expm1f_112_118;
end
always @(*) begin
	/* expm1f: %112*/
	/*   %120 = shl i32 %k.1, 23*/
		expm1f_112_120 = (expm1f_46_k1_reg <<< (32'd23 % 32));
end
always @(posedge clk) begin
	/* expm1f: %112*/
	/*   %120 = shl i32 %k.1, 23*/
	if ((cur_state == LEGUP_F_expm1f_BB__112_755)) begin
		expm1f_112_120_reg <= expm1f_112_120;
		if (start == 1'b0 && ^(expm1f_112_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_112_120_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %112*/
	/*   %121 = add nsw i32 %119, %120*/
		expm1f_112_121 = (expm1f_112_119 + expm1f_112_120_reg);
end
always @(*) begin
	/* expm1f: %112*/
	/*   %122 = bitcast i32 %121 to float*/
		expm1f_112_122 = expm1f_112_121;
end
always @(*) begin
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__9_19) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0 = expm1f_9_10;
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	else if ((((cur_state == LEGUP_F_expm1f_BB__15_23) & (memory_controller_waitrequest == 1'd0)) & (expm1f_15_16 == 1'd1))) begin
		expm1f_123_0 = 32'h7F800000;
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	else if ((((cur_state == LEGUP_F_expm1f_BB_thread_39) & (memory_controller_waitrequest == 1'd0)) & (expm1f_thread_18 == 1'd1))) begin
		expm1f_123_0 = 32'hBF800000;
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	else if (((cur_state == LEGUP_F_expm1f_BB__42_222) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0 = expm1f_42_45;
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	else if (((cur_state == LEGUP_F_expm1f_BB__67_504) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0 = expm1f_67_70;
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	else if (((cur_state == LEGUP_F_expm1f_BB__76_598) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0 = expm1f_76_79;
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	else if (((cur_state == LEGUP_F_expm1f_BB__82_640) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0 = expm1f_82_85;
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	else if (((cur_state == LEGUP_F_expm1f_BB__86_680) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0 = expm1f_86_89;
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	else if (((cur_state == LEGUP_F_expm1f_BB__92_724) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0 = expm1f_92_99;
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	else if (((cur_state == LEGUP_F_expm1f_BB__102_754) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0 = expm1f_102_111;
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	else /* if (((cur_state == LEGUP_F_expm1f_BB__112_797) & (memory_controller_waitrequest == 1'd0))) */ begin
		expm1f_123_0 = expm1f_112_122;
	end
end
always @(posedge clk) begin
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__9_19) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if ((((cur_state == LEGUP_F_expm1f_BB__15_23) & (memory_controller_waitrequest == 1'd0)) & (expm1f_15_16 == 1'd1))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if ((((cur_state == LEGUP_F_expm1f_BB_thread_39) & (memory_controller_waitrequest == 1'd0)) & (expm1f_thread_18 == 1'd1))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__42_222) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__67_504) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__76_598) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__82_640) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__86_680) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__92_724) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__102_754) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
	/* expm1f: %123*/
	/*   %.0 = phi float [ %10, %9 ], [ %70, %67 ], [ %79, %76 ], [ %85, %82 ], [ %89, %86 ], [ %99, %92 ], [ %45, %42 ], [ 0x7FF0000000000000, %15 ], [ -1.000000e+00, %.thread ], [ %111, %102 ], [ %122, %112 ]*/
	if (((cur_state == LEGUP_F_expm1f_BB__112_797) & (memory_controller_waitrequest == 1'd0))) begin
		expm1f_123_0_reg <= expm1f_123_0;
		if (start == 1'b0 && ^(expm1f_123_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_123_0_reg"); $finish; end
	end
end
always @(*) begin
	/* expm1f: %9*/
	/*   %10 = fadd float %x, %x*/
	if ((cur_state == LEGUP_F_expm1f_BB__9_5)) begin
		expm1f_altfp_add_32_0_op0 = arg_x;
	end
	/* expm1f: %.thread*/
	/*   %17 = fadd float %x, 0x39B4484C00000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB_thread_24)) begin
		expm1f_altfp_add_32_0_op0 = arg_x;
	end
	/* expm1f: %23*/
	/*   %24 = fadd float %x, 0xBFE62E3000000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__23_43)) begin
		expm1f_altfp_add_32_0_op0 = arg_x;
	end
	/* expm1f: %25*/
	/*   %26 = fadd float %x, 0x3FE62E3000000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__25_58)) begin
		expm1f_altfp_add_32_0_op0 = arg_x;
	end
	/* expm1f: %27*/
	/*   %30 = fadd float %28, %29*/
	else if ((cur_state == LEGUP_F_expm1f_BB__27_84)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_27_28;
	end
	/* expm1f: %42*/
	/*   %43 = fadd float %x, 0x46293E5940000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__42_180)) begin
		expm1f_altfp_add_32_0_op0 = arg_x;
	end
	/* expm1f: %46*/
	/*   %50 = fadd float %49, 0x3ED0CFCA80000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_256)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_46_49;
	end
	/* expm1f: %46*/
	/*   %52 = fadd float %51, 0xBF14CE19A0000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_281)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_46_51;
	end
	/* expm1f: %46*/
	/*   %54 = fadd float %53, 0x3F5A01A020000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_306)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_46_53;
	end
	/* expm1f: %46*/
	/*   %56 = fadd float %55, 0xBFA1111120000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_331)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_46_55;
	end
	/* expm1f: %46*/
	/*   %58 = fadd float %57, 1.000000e+00*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_356)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_46_57;
	end
	/* expm1f: %76*/
	/*   %79 = fadd float %78, -5.000000e-01*/
	else if ((cur_state == LEGUP_F_expm1f_BB__76_584)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_76_78;
	end
	/* expm1f: %82*/
	/*   %83 = fadd float %.062, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_expm1f_BB__82_601)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_46_062_reg;
	end
	/* expm1f: %86*/
	/*   %89 = fadd float %88, 1.000000e+00*/
	else if ((cur_state == LEGUP_F_expm1f_BB__86_666)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_86_88;
	end
	/* expm1f: %92*/
	/*   %99 = fadd float %98, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_expm1f_BB__92_710)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_92_98;
	end
	/* expm1f: %112*/
	/*   %116 = fadd float %75, %115*/
	else if ((cur_state == LEGUP_F_expm1f_BB__112_755)) begin
		expm1f_altfp_add_32_0_op0 = expm1f_71_75_reg;
	end
	/* expm1f: %112*/
	/*   %118 = fadd float %117, 1.000000e+00*/
	else /* if ((cur_state == LEGUP_F_expm1f_BB__112_783)) */ begin
		expm1f_altfp_add_32_0_op0 = expm1f_112_117;
	end
end
always @(*) begin
	/* expm1f: %9*/
	/*   %10 = fadd float %x, %x*/
	if ((cur_state == LEGUP_F_expm1f_BB__9_5)) begin
		expm1f_altfp_add_32_0_op1 = arg_x;
	end
	/* expm1f: %.thread*/
	/*   %17 = fadd float %x, 0x39B4484C00000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB_thread_24)) begin
		expm1f_altfp_add_32_0_op1 = 32'hDA24260;
	end
	/* expm1f: %23*/
	/*   %24 = fadd float %x, 0xBFE62E3000000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__23_43)) begin
		expm1f_altfp_add_32_0_op1 = 32'hBF317180;
	end
	/* expm1f: %25*/
	/*   %26 = fadd float %x, 0x3FE62E3000000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__25_58)) begin
		expm1f_altfp_add_32_0_op1 = 32'h3F317180;
	end
	/* expm1f: %27*/
	/*   %30 = fadd float %28, %29*/
	else if ((cur_state == LEGUP_F_expm1f_BB__27_84)) begin
		expm1f_altfp_add_32_0_op1 = expm1f_27_29_reg;
	end
	/* expm1f: %42*/
	/*   %43 = fadd float %x, 0x46293E5940000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__42_180)) begin
		expm1f_altfp_add_32_0_op1 = 32'h7149F2CA;
	end
	/* expm1f: %46*/
	/*   %50 = fadd float %49, 0x3ED0CFCA80000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_256)) begin
		expm1f_altfp_add_32_0_op1 = 32'h36867E54;
	end
	/* expm1f: %46*/
	/*   %52 = fadd float %51, 0xBF14CE19A0000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_281)) begin
		expm1f_altfp_add_32_0_op1 = 32'hB8A670CD;
	end
	/* expm1f: %46*/
	/*   %54 = fadd float %53, 0x3F5A01A020000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_306)) begin
		expm1f_altfp_add_32_0_op1 = 32'h3AD00D01;
	end
	/* expm1f: %46*/
	/*   %56 = fadd float %55, 0xBFA1111120000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_331)) begin
		expm1f_altfp_add_32_0_op1 = 32'hBD088889;
	end
	/* expm1f: %46*/
	/*   %58 = fadd float %57, 1.000000e+00*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_356)) begin
		expm1f_altfp_add_32_0_op1 = 32'h3F800000;
	end
	/* expm1f: %76*/
	/*   %79 = fadd float %78, -5.000000e-01*/
	else if ((cur_state == LEGUP_F_expm1f_BB__76_584)) begin
		expm1f_altfp_add_32_0_op1 = 32'hBF000000;
	end
	/* expm1f: %82*/
	/*   %83 = fadd float %.062, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_expm1f_BB__82_601)) begin
		expm1f_altfp_add_32_0_op1 = 32'h3F000000;
	end
	/* expm1f: %86*/
	/*   %89 = fadd float %88, 1.000000e+00*/
	else if ((cur_state == LEGUP_F_expm1f_BB__86_666)) begin
		expm1f_altfp_add_32_0_op1 = 32'h3F800000;
	end
	/* expm1f: %92*/
	/*   %99 = fadd float %98, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_expm1f_BB__92_710)) begin
		expm1f_altfp_add_32_0_op1 = 32'hBF800000;
	end
	/* expm1f: %112*/
	/*   %116 = fadd float %75, %115*/
	else if ((cur_state == LEGUP_F_expm1f_BB__112_755)) begin
		expm1f_altfp_add_32_0_op1 = expm1f_112_115;
	end
	/* expm1f: %112*/
	/*   %118 = fadd float %117, 1.000000e+00*/
	else /* if ((cur_state == LEGUP_F_expm1f_BB__112_783)) */ begin
		expm1f_altfp_add_32_0_op1 = 32'h3F800000;
	end
end
always @(*) begin
	altfp_expm1f_9_10_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	expm1f_altfp_add_32_0 = altfp_adder_expm1f_9_10_out;
end
always @(*) begin
	/* expm1f: %27*/
	/*   %28 = fmul float %x, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_73)) begin
		expm1f_altfp_multiply_32_0_op0 = arg_x;
	end
	/* expm1f: %27*/
	/*   %33 = fmul float %32, 0x3FE62E3000000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__27_110)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_27_32;
	end
	/* expm1f: %27*/
	/*   %35 = fmul float %32, 0x3EE2FEFA20000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__27_111)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_27_32_reg;
	end
	/* expm1f: %46*/
	/*   %47 = fmul float %.062, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_223)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_062_reg;
	end
	/* expm1f: %46*/
	/*   %48 = fmul float %.062, %47*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_234)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_062_reg;
	end
	/* expm1f: %46*/
	/*   %49 = fmul float %48, 0xBE8AFDB760000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_245)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_48;
	end
	/* expm1f: %46*/
	/*   %51 = fmul float %48, %50*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_270)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_48_reg;
	end
	/* expm1f: %46*/
	/*   %53 = fmul float %48, %52*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_295)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_48_reg;
	end
	/* expm1f: %46*/
	/*   %55 = fmul float %48, %54*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_320)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_48_reg;
	end
	/* expm1f: %46*/
	/*   %57 = fmul float %48, %56*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_345)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_48_reg;
	end
	/* expm1f: %46*/
	/*   %59 = fmul float %58, %47*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_370)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_58;
	end
	/* expm1f: %46*/
	/*   %62 = fmul float %.062, %60*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_395)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_062_reg;
	end
	/* expm1f: %46*/
	/*   %65 = fmul float %48, %64*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_453)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_48_reg;
	end
	/* expm1f: %67*/
	/*   %68 = fmul float %.062, %65*/
	else if ((cur_state == LEGUP_F_expm1f_BB__67_465)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_062_reg;
	end
	/* expm1f: %71*/
	/*   %73 = fmul float %.062, %72*/
	else if ((cur_state == LEGUP_F_expm1f_BB__71_519)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_46_062_reg;
	end
	/* expm1f: %76*/
	/*   %78 = fmul float %77, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_expm1f_BB__76_573)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_76_77;
	end
	/* expm1f: %82*/
	/*   %85 = fmul float %84, -2.000000e+00*/
	else if ((cur_state == LEGUP_F_expm1f_BB__82_629)) begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_82_84;
	end
	/* expm1f: %86*/
	/*   %88 = fmul float %87, 2.000000e+00*/
	else /* if ((cur_state == LEGUP_F_expm1f_BB__86_655)) */ begin
		expm1f_altfp_multiply_32_0_op0 = expm1f_86_87;
	end
end
always @(*) begin
	/* expm1f: %27*/
	/*   %28 = fmul float %x, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_73)) begin
		expm1f_altfp_multiply_32_0_op1 = 32'h3FB8AA3B;
	end
	/* expm1f: %27*/
	/*   %33 = fmul float %32, 0x3FE62E3000000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__27_110)) begin
		expm1f_altfp_multiply_32_0_op1 = 32'h3F317180;
	end
	/* expm1f: %27*/
	/*   %35 = fmul float %32, 0x3EE2FEFA20000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__27_111)) begin
		expm1f_altfp_multiply_32_0_op1 = 32'h3717F7D1;
	end
	/* expm1f: %46*/
	/*   %47 = fmul float %.062, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_223)) begin
		expm1f_altfp_multiply_32_0_op1 = 32'h3F000000;
	end
	/* expm1f: %46*/
	/*   %48 = fmul float %.062, %47*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_234)) begin
		expm1f_altfp_multiply_32_0_op1 = expm1f_46_47;
	end
	/* expm1f: %46*/
	/*   %49 = fmul float %48, 0xBE8AFDB760000000*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_245)) begin
		expm1f_altfp_multiply_32_0_op1 = 32'hB457EDBB;
	end
	/* expm1f: %46*/
	/*   %51 = fmul float %48, %50*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_270)) begin
		expm1f_altfp_multiply_32_0_op1 = expm1f_46_50;
	end
	/* expm1f: %46*/
	/*   %53 = fmul float %48, %52*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_295)) begin
		expm1f_altfp_multiply_32_0_op1 = expm1f_46_52;
	end
	/* expm1f: %46*/
	/*   %55 = fmul float %48, %54*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_320)) begin
		expm1f_altfp_multiply_32_0_op1 = expm1f_46_54;
	end
	/* expm1f: %46*/
	/*   %57 = fmul float %48, %56*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_345)) begin
		expm1f_altfp_multiply_32_0_op1 = expm1f_46_56;
	end
	/* expm1f: %46*/
	/*   %59 = fmul float %58, %47*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_370)) begin
		expm1f_altfp_multiply_32_0_op1 = expm1f_46_47_reg;
	end
	/* expm1f: %46*/
	/*   %62 = fmul float %.062, %60*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_395)) begin
		expm1f_altfp_multiply_32_0_op1 = expm1f_46_60;
	end
	/* expm1f: %46*/
	/*   %65 = fmul float %48, %64*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_453)) begin
		expm1f_altfp_multiply_32_0_op1 = expm1f_46_64;
	end
	/* expm1f: %67*/
	/*   %68 = fmul float %.062, %65*/
	else if ((cur_state == LEGUP_F_expm1f_BB__67_465)) begin
		expm1f_altfp_multiply_32_0_op1 = expm1f_46_65_reg;
	end
	/* expm1f: %71*/
	/*   %73 = fmul float %.062, %72*/
	else if ((cur_state == LEGUP_F_expm1f_BB__71_519)) begin
		expm1f_altfp_multiply_32_0_op1 = expm1f_71_72;
	end
	/* expm1f: %76*/
	/*   %78 = fmul float %77, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_expm1f_BB__76_573)) begin
		expm1f_altfp_multiply_32_0_op1 = 32'h3F000000;
	end
	/* expm1f: %82*/
	/*   %85 = fmul float %84, -2.000000e+00*/
	else if ((cur_state == LEGUP_F_expm1f_BB__82_629)) begin
		expm1f_altfp_multiply_32_0_op1 = 32'hC0000000;
	end
	/* expm1f: %86*/
	/*   %88 = fmul float %87, 2.000000e+00*/
	else /* if ((cur_state == LEGUP_F_expm1f_BB__86_655)) */ begin
		expm1f_altfp_multiply_32_0_op1 = 32'h40000000;
	end
end
always @(*) begin
	altfp_expm1f_27_28_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	expm1f_altfp_multiply_32_0 = altfp_multiplier_expm1f_27_28_out;
end
always @(*) begin
	/* expm1f: %27*/
	/*   %31 = fptosi float %30 to i32*/
		expm1f_altfp_fptosi_32_0_op0 = expm1f_27_30;
end
always @(*) begin
	altfp_expm1f_27_31_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	expm1f_altfp_fptosi_32_0 = altfp_fptosi32_expm1f_27_31_out;
end
always @(*) begin
	/* expm1f: %27*/
	/*   %32 = sitofp i32 %31 to float*/
		expm1f_altfp_sitofp_32_0_op0 = expm1f_27_31;
end
always @(*) begin
	altfp_expm1f_27_32_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	expm1f_altfp_sitofp_32_0 = altfp_sitofp32_expm1f_27_32_out;
end
always @(*) begin
	/* expm1f: %27*/
	/*   %34 = fsub float %x, %33*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_121)) begin
		expm1f_altfp_subtract_32_0_op0 = arg_x;
	end
	/* expm1f: %36*/
	/*   %37 = fsub float %hi.0, %lo.0*/
	else if ((cur_state == LEGUP_F_expm1f_BB__36_136)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_36_hi0_reg;
	end
	/* expm1f: %36*/
	/*   %38 = fsub float %hi.0, %37*/
	else if ((cur_state == LEGUP_F_expm1f_BB__36_150)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_36_hi0_reg;
	end
	/* expm1f: %36*/
	/*   %39 = fsub float %38, %lo.0*/
	else if ((cur_state == LEGUP_F_expm1f_BB__36_164)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_36_38;
	end
	/* expm1f: %42*/
	/*   %44 = fsub float %43, %43*/
	else if ((cur_state == LEGUP_F_expm1f_BB__42_194)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_42_43;
	end
	/* expm1f: %42*/
	/*   %45 = fsub float %x, %44*/
	else if ((cur_state == LEGUP_F_expm1f_BB__42_208)) begin
		expm1f_altfp_subtract_32_0_op0 = arg_x;
	end
	/* expm1f: %46*/
	/*   %60 = fsub float 3.000000e+00, %59*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_381)) begin
		expm1f_altfp_subtract_32_0_op0 = 32'h40400000;
	end
	/* expm1f: %46*/
	/*   %61 = fsub float %58, %60*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_395)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_46_58_reg;
	end
	/* expm1f: %46*/
	/*   %63 = fsub float 6.000000e+00, %62*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_406)) begin
		expm1f_altfp_subtract_32_0_op0 = 32'h40C00000;
	end
	/* expm1f: %67*/
	/*   %69 = fsub float %68, %48*/
	else if ((cur_state == LEGUP_F_expm1f_BB__67_476)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_67_68;
	end
	/* expm1f: %67*/
	/*   %70 = fsub float %.062, %69*/
	else if ((cur_state == LEGUP_F_expm1f_BB__67_490)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_46_062_reg;
	end
	/* expm1f: %71*/
	/*   %72 = fsub float %65, %c.0*/
	else if ((cur_state == LEGUP_F_expm1f_BB__71_505)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_46_65_reg;
	end
	/* expm1f: %71*/
	/*   %74 = fsub float %73, %c.0*/
	else if ((cur_state == LEGUP_F_expm1f_BB__71_530)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_71_73;
	end
	/* expm1f: %71*/
	/*   %75 = fsub float %74, %48*/
	else if ((cur_state == LEGUP_F_expm1f_BB__71_544)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_71_74;
	end
	/* expm1f: %76*/
	/*   %77 = fsub float %.062, %75*/
	else if ((cur_state == LEGUP_F_expm1f_BB__76_559)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_46_062_reg;
	end
	/* expm1f: %82*/
	/*   %84 = fsub float %75, %83*/
	else if ((cur_state == LEGUP_F_expm1f_BB__82_615)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_71_75_reg;
	end
	/* expm1f: %86*/
	/*   %87 = fsub float %.062, %75*/
	else if ((cur_state == LEGUP_F_expm1f_BB__86_641)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_46_062_reg;
	end
	/* expm1f: %92*/
	/*   %93 = fsub float %75, %.062*/
	else if ((cur_state == LEGUP_F_expm1f_BB__92_682)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_71_75_reg;
	end
	/* expm1f: %92*/
	/*   %94 = fsub float 1.000000e+00, %93*/
	else if ((cur_state == LEGUP_F_expm1f_BB__92_696)) begin
		expm1f_altfp_subtract_32_0_op0 = 32'h3F800000;
	end
	/* expm1f: %102*/
	/*   %106 = fsub float %75, %.062*/
	else if ((cur_state == LEGUP_F_expm1f_BB__102_726)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_71_75_reg;
	end
	/* expm1f: %102*/
	/*   %107 = fsub float %105, %106*/
	else if ((cur_state == LEGUP_F_expm1f_BB__102_740)) begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_102_105_reg;
	end
	/* expm1f: %112*/
	/*   %117 = fsub float %.062, %116*/
	else /* if ((cur_state == LEGUP_F_expm1f_BB__112_769)) */ begin
		expm1f_altfp_subtract_32_0_op0 = expm1f_46_062_reg;
	end
end
always @(*) begin
	/* expm1f: %27*/
	/*   %34 = fsub float %x, %33*/
	if ((cur_state == LEGUP_F_expm1f_BB__27_121)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_27_33;
	end
	/* expm1f: %36*/
	/*   %37 = fsub float %hi.0, %lo.0*/
	else if ((cur_state == LEGUP_F_expm1f_BB__36_136)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_36_lo0_reg;
	end
	/* expm1f: %36*/
	/*   %38 = fsub float %hi.0, %37*/
	else if ((cur_state == LEGUP_F_expm1f_BB__36_150)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_36_37;
	end
	/* expm1f: %36*/
	/*   %39 = fsub float %38, %lo.0*/
	else if ((cur_state == LEGUP_F_expm1f_BB__36_164)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_36_lo0_reg;
	end
	/* expm1f: %42*/
	/*   %44 = fsub float %43, %43*/
	else if ((cur_state == LEGUP_F_expm1f_BB__42_194)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_42_43;
	end
	/* expm1f: %42*/
	/*   %45 = fsub float %x, %44*/
	else if ((cur_state == LEGUP_F_expm1f_BB__42_208)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_42_44;
	end
	/* expm1f: %46*/
	/*   %60 = fsub float 3.000000e+00, %59*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_381)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_46_59;
	end
	/* expm1f: %46*/
	/*   %61 = fsub float %58, %60*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_395)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_46_60;
	end
	/* expm1f: %46*/
	/*   %63 = fsub float 6.000000e+00, %62*/
	else if ((cur_state == LEGUP_F_expm1f_BB__46_406)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_46_62;
	end
	/* expm1f: %67*/
	/*   %69 = fsub float %68, %48*/
	else if ((cur_state == LEGUP_F_expm1f_BB__67_476)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_46_48_reg;
	end
	/* expm1f: %67*/
	/*   %70 = fsub float %.062, %69*/
	else if ((cur_state == LEGUP_F_expm1f_BB__67_490)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_67_69;
	end
	/* expm1f: %71*/
	/*   %72 = fsub float %65, %c.0*/
	else if ((cur_state == LEGUP_F_expm1f_BB__71_505)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_46_c0_reg;
	end
	/* expm1f: %71*/
	/*   %74 = fsub float %73, %c.0*/
	else if ((cur_state == LEGUP_F_expm1f_BB__71_530)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_46_c0_reg;
	end
	/* expm1f: %71*/
	/*   %75 = fsub float %74, %48*/
	else if ((cur_state == LEGUP_F_expm1f_BB__71_544)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_46_48_reg;
	end
	/* expm1f: %76*/
	/*   %77 = fsub float %.062, %75*/
	else if ((cur_state == LEGUP_F_expm1f_BB__76_559)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_71_75_reg;
	end
	/* expm1f: %82*/
	/*   %84 = fsub float %75, %83*/
	else if ((cur_state == LEGUP_F_expm1f_BB__82_615)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_82_83;
	end
	/* expm1f: %86*/
	/*   %87 = fsub float %.062, %75*/
	else if ((cur_state == LEGUP_F_expm1f_BB__86_641)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_71_75_reg;
	end
	/* expm1f: %92*/
	/*   %93 = fsub float %75, %.062*/
	else if ((cur_state == LEGUP_F_expm1f_BB__92_682)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_46_062_reg;
	end
	/* expm1f: %92*/
	/*   %94 = fsub float 1.000000e+00, %93*/
	else if ((cur_state == LEGUP_F_expm1f_BB__92_696)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_92_93;
	end
	/* expm1f: %102*/
	/*   %106 = fsub float %75, %.062*/
	else if ((cur_state == LEGUP_F_expm1f_BB__102_726)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_46_062_reg;
	end
	/* expm1f: %102*/
	/*   %107 = fsub float %105, %106*/
	else if ((cur_state == LEGUP_F_expm1f_BB__102_740)) begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_102_106;
	end
	/* expm1f: %112*/
	/*   %117 = fsub float %.062, %116*/
	else /* if ((cur_state == LEGUP_F_expm1f_BB__112_769)) */ begin
		expm1f_altfp_subtract_32_0_op1 = expm1f_112_116;
	end
end
always @(*) begin
	altfp_expm1f_27_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	expm1f_altfp_subtract_32_0 = altfp_subtractor_expm1f_27_34_out;
end
always @(*) begin
	/* expm1f: %46*/
	/*   %64 = fdiv float %61, %63*/
		expm1f_altfp_divide_32_0_op0 = expm1f_46_61_reg;
end
always @(*) begin
	/* expm1f: %46*/
	/*   %64 = fdiv float %61, %63*/
		expm1f_altfp_divide_32_0_op1 = expm1f_46_63;
end
always @(*) begin
	altfp_expm1f_46_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	expm1f_altfp_divide_32_0 = altfp_divider_expm1f_46_64_out;
end
always @(*) begin
	altfp_expm1f_thread_18_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_expm1f_80_81_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* expm1f: %13*/
	/*   ret float %x.*/
	if ((cur_state == LEGUP_F_expm1f_BB__13_21)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* expm1f: %123*/
	/*   ret float %.0*/
	if ((cur_state == LEGUP_F_expm1f_BB__123_798)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* expm1f: %13*/
	/*   ret float %x.*/
	if ((cur_state == LEGUP_F_expm1f_BB__13_21)) begin
		return_val <= expm1f_13_x;
		if (start == 1'b0 && ^(expm1f_13_x) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* expm1f: %123*/
	/*   ret float %.0*/
	if ((cur_state == LEGUP_F_expm1f_BB__123_798)) begin
		return_val <= expm1f_123_0_reg;
		if (start == 1'b0 && ^(expm1f_123_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module tanhf
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val,
	arg_x
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_tanhf_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_tanhf_BB__4_2 = 8'd2;
parameter [7:0] LEGUP_F_tanhf_BB__4_3 = 8'd3;
parameter [7:0] LEGUP_F_tanhf_BB__4_4 = 8'd4;
parameter [7:0] LEGUP_F_tanhf_BB__4_5 = 8'd5;
parameter [7:0] LEGUP_F_tanhf_BB__4_6 = 8'd6;
parameter [7:0] LEGUP_F_tanhf_BB__4_7 = 8'd7;
parameter [7:0] LEGUP_F_tanhf_BB__4_8 = 8'd8;
parameter [7:0] LEGUP_F_tanhf_BB__4_9 = 8'd9;
parameter [7:0] LEGUP_F_tanhf_BB__4_10 = 8'd10;
parameter [7:0] LEGUP_F_tanhf_BB__4_11 = 8'd11;
parameter [7:0] LEGUP_F_tanhf_BB__4_12 = 8'd12;
parameter [7:0] LEGUP_F_tanhf_BB__4_13 = 8'd13;
parameter [7:0] LEGUP_F_tanhf_BB__4_14 = 8'd14;
parameter [7:0] LEGUP_F_tanhf_BB__4_15 = 8'd15;
parameter [7:0] LEGUP_F_tanhf_BB__4_16 = 8'd16;
parameter [7:0] LEGUP_F_tanhf_BB__4_17 = 8'd17;
parameter [7:0] LEGUP_F_tanhf_BB__4_18 = 8'd18;
parameter [7:0] LEGUP_F_tanhf_BB__4_19 = 8'd19;
parameter [7:0] LEGUP_F_tanhf_BB__4_20 = 8'd20;
parameter [7:0] LEGUP_F_tanhf_BB__4_21 = 8'd21;
parameter [7:0] LEGUP_F_tanhf_BB__4_22 = 8'd22;
parameter [7:0] LEGUP_F_tanhf_BB__4_23 = 8'd23;
parameter [7:0] LEGUP_F_tanhf_BB__4_24 = 8'd24;
parameter [7:0] LEGUP_F_tanhf_BB__4_25 = 8'd25;
parameter [7:0] LEGUP_F_tanhf_BB__4_26 = 8'd26;
parameter [7:0] LEGUP_F_tanhf_BB__4_27 = 8'd27;
parameter [7:0] LEGUP_F_tanhf_BB__4_28 = 8'd28;
parameter [7:0] LEGUP_F_tanhf_BB__4_29 = 8'd29;
parameter [7:0] LEGUP_F_tanhf_BB__4_30 = 8'd30;
parameter [7:0] LEGUP_F_tanhf_BB__4_31 = 8'd31;
parameter [7:0] LEGUP_F_tanhf_BB__4_32 = 8'd32;
parameter [7:0] LEGUP_F_tanhf_BB__4_33 = 8'd33;
parameter [7:0] LEGUP_F_tanhf_BB__4_34 = 8'd34;
parameter [7:0] LEGUP_F_tanhf_BB__4_35 = 8'd35;
parameter [7:0] LEGUP_F_tanhf_BB__7_36 = 8'd36;
parameter [7:0] LEGUP_F_tanhf_BB__7_37 = 8'd37;
parameter [7:0] LEGUP_F_tanhf_BB__7_38 = 8'd38;
parameter [7:0] LEGUP_F_tanhf_BB__7_39 = 8'd39;
parameter [7:0] LEGUP_F_tanhf_BB__7_40 = 8'd40;
parameter [7:0] LEGUP_F_tanhf_BB__7_41 = 8'd41;
parameter [7:0] LEGUP_F_tanhf_BB__7_42 = 8'd42;
parameter [7:0] LEGUP_F_tanhf_BB__7_43 = 8'd43;
parameter [7:0] LEGUP_F_tanhf_BB__7_44 = 8'd44;
parameter [7:0] LEGUP_F_tanhf_BB__7_45 = 8'd45;
parameter [7:0] LEGUP_F_tanhf_BB__7_46 = 8'd46;
parameter [7:0] LEGUP_F_tanhf_BB__7_47 = 8'd47;
parameter [7:0] LEGUP_F_tanhf_BB__7_48 = 8'd48;
parameter [7:0] LEGUP_F_tanhf_BB__7_49 = 8'd49;
parameter [7:0] LEGUP_F_tanhf_BB__7_50 = 8'd50;
parameter [7:0] LEGUP_F_tanhf_BB__9_51 = 8'd51;
parameter [7:0] LEGUP_F_tanhf_BB__9_52 = 8'd52;
parameter [7:0] LEGUP_F_tanhf_BB__9_53 = 8'd53;
parameter [7:0] LEGUP_F_tanhf_BB__9_54 = 8'd54;
parameter [7:0] LEGUP_F_tanhf_BB__9_55 = 8'd55;
parameter [7:0] LEGUP_F_tanhf_BB__9_56 = 8'd56;
parameter [7:0] LEGUP_F_tanhf_BB__9_57 = 8'd57;
parameter [7:0] LEGUP_F_tanhf_BB__9_58 = 8'd58;
parameter [7:0] LEGUP_F_tanhf_BB__9_59 = 8'd59;
parameter [7:0] LEGUP_F_tanhf_BB__9_60 = 8'd60;
parameter [7:0] LEGUP_F_tanhf_BB__9_61 = 8'd61;
parameter [7:0] LEGUP_F_tanhf_BB__9_62 = 8'd62;
parameter [7:0] LEGUP_F_tanhf_BB__9_63 = 8'd63;
parameter [7:0] LEGUP_F_tanhf_BB__9_64 = 8'd64;
parameter [7:0] LEGUP_F_tanhf_BB__9_65 = 8'd65;
parameter [7:0] LEGUP_F_tanhf_BB__11_66 = 8'd66;
parameter [7:0] LEGUP_F_tanhf_BB__13_67 = 8'd67;
parameter [7:0] LEGUP_F_tanhf_BB__15_68 = 8'd68;
parameter [7:0] LEGUP_F_tanhf_BB__15_69 = 8'd69;
parameter [7:0] LEGUP_F_tanhf_BB__15_70 = 8'd70;
parameter [7:0] LEGUP_F_tanhf_BB__15_71 = 8'd71;
parameter [7:0] LEGUP_F_tanhf_BB__15_72 = 8'd72;
parameter [7:0] LEGUP_F_tanhf_BB__15_73 = 8'd73;
parameter [7:0] LEGUP_F_tanhf_BB__15_74 = 8'd74;
parameter [7:0] LEGUP_F_tanhf_BB__15_75 = 8'd75;
parameter [7:0] LEGUP_F_tanhf_BB__15_76 = 8'd76;
parameter [7:0] LEGUP_F_tanhf_BB__15_77 = 8'd77;
parameter [7:0] LEGUP_F_tanhf_BB__15_78 = 8'd78;
parameter [7:0] LEGUP_F_tanhf_BB__15_79 = 8'd79;
parameter [7:0] LEGUP_F_tanhf_BB__15_80 = 8'd80;
parameter [7:0] LEGUP_F_tanhf_BB__15_81 = 8'd81;
parameter [7:0] LEGUP_F_tanhf_BB__15_82 = 8'd82;
parameter [7:0] LEGUP_F_tanhf_BB__15_83 = 8'd83;
parameter [7:0] LEGUP_F_tanhf_BB__15_84 = 8'd84;
parameter [7:0] LEGUP_F_tanhf_BB__15_85 = 8'd85;
parameter [7:0] LEGUP_F_tanhf_BB__15_86 = 8'd86;
parameter [7:0] LEGUP_F_tanhf_BB__15_87 = 8'd87;
parameter [7:0] LEGUP_F_tanhf_BB__15_88 = 8'd88;
parameter [7:0] LEGUP_F_tanhf_BB__15_89 = 8'd89;
parameter [7:0] LEGUP_F_tanhf_BB__15_90 = 8'd90;
parameter [7:0] LEGUP_F_tanhf_BB__15_91 = 8'd91;
parameter [7:0] LEGUP_F_tanhf_BB__15_92 = 8'd92;
parameter [7:0] LEGUP_F_tanhf_BB__15_93 = 8'd93;
parameter [7:0] LEGUP_F_tanhf_BB__18_94 = 8'd94;
parameter [7:0] LEGUP_F_tanhf_BB__21_95 = 8'd95;
parameter [7:0] LEGUP_F_tanhf_BB__21_96 = 8'd96;
parameter [7:0] LEGUP_F_tanhf_BB__21_97 = 8'd97;
parameter [7:0] LEGUP_F_tanhf_BB__21_98 = 8'd98;
parameter [7:0] LEGUP_F_tanhf_BB__21_99 = 8'd99;
parameter [7:0] LEGUP_F_tanhf_BB__21_100 = 8'd100;
parameter [7:0] LEGUP_F_tanhf_BB__21_101 = 8'd101;
parameter [7:0] LEGUP_F_tanhf_BB__21_102 = 8'd102;
parameter [7:0] LEGUP_F_tanhf_BB__21_103 = 8'd103;
parameter [7:0] LEGUP_F_tanhf_BB__21_104 = 8'd104;
parameter [7:0] LEGUP_F_tanhf_BB__21_105 = 8'd105;
parameter [7:0] LEGUP_F_tanhf_BB__21_106 = 8'd106;
parameter [7:0] LEGUP_F_tanhf_BB__21_108 = 8'd108;
parameter [7:0] LEGUP_F_tanhf_BB__21_109 = 8'd109;
parameter [7:0] LEGUP_F_tanhf_BB__21_110 = 8'd110;
parameter [7:0] LEGUP_F_tanhf_BB__21_111 = 8'd111;
parameter [7:0] LEGUP_F_tanhf_BB__21_112 = 8'd112;
parameter [7:0] LEGUP_F_tanhf_BB__21_113 = 8'd113;
parameter [7:0] LEGUP_F_tanhf_BB__21_114 = 8'd114;
parameter [7:0] LEGUP_F_tanhf_BB__21_115 = 8'd115;
parameter [7:0] LEGUP_F_tanhf_BB__21_116 = 8'd116;
parameter [7:0] LEGUP_F_tanhf_BB__21_117 = 8'd117;
parameter [7:0] LEGUP_F_tanhf_BB__21_118 = 8'd118;
parameter [7:0] LEGUP_F_tanhf_BB__21_119 = 8'd119;
parameter [7:0] LEGUP_F_tanhf_BB__21_120 = 8'd120;
parameter [7:0] LEGUP_F_tanhf_BB__21_121 = 8'd121;
parameter [7:0] LEGUP_F_tanhf_BB__21_122 = 8'd122;
parameter [7:0] LEGUP_F_tanhf_BB__21_123 = 8'd123;
parameter [7:0] LEGUP_F_tanhf_BB__21_124 = 8'd124;
parameter [7:0] LEGUP_F_tanhf_BB__21_125 = 8'd125;
parameter [7:0] LEGUP_F_tanhf_BB__21_126 = 8'd126;
parameter [7:0] LEGUP_F_tanhf_BB__21_127 = 8'd127;
parameter [7:0] LEGUP_F_tanhf_BB__21_128 = 8'd128;
parameter [7:0] LEGUP_F_tanhf_BB__21_129 = 8'd129;
parameter [7:0] LEGUP_F_tanhf_BB__21_130 = 8'd130;
parameter [7:0] LEGUP_F_tanhf_BB__21_131 = 8'd131;
parameter [7:0] LEGUP_F_tanhf_BB__21_132 = 8'd132;
parameter [7:0] LEGUP_F_tanhf_BB__21_133 = 8'd133;
parameter [7:0] LEGUP_F_tanhf_BB__21_134 = 8'd134;
parameter [7:0] LEGUP_F_tanhf_BB__21_135 = 8'd135;
parameter [7:0] LEGUP_F_tanhf_BB__21_136 = 8'd136;
parameter [7:0] LEGUP_F_tanhf_BB__21_137 = 8'd137;
parameter [7:0] LEGUP_F_tanhf_BB__21_138 = 8'd138;
parameter [7:0] LEGUP_F_tanhf_BB__21_139 = 8'd139;
parameter [7:0] LEGUP_F_tanhf_BB__21_140 = 8'd140;
parameter [7:0] LEGUP_F_tanhf_BB__21_141 = 8'd141;
parameter [7:0] LEGUP_F_tanhf_BB__21_142 = 8'd142;
parameter [7:0] LEGUP_F_tanhf_BB__21_143 = 8'd143;
parameter [7:0] LEGUP_F_tanhf_BB__21_144 = 8'd144;
parameter [7:0] LEGUP_F_tanhf_BB__21_145 = 8'd145;
parameter [7:0] LEGUP_F_tanhf_BB__21_146 = 8'd146;
parameter [7:0] LEGUP_F_tanhf_BB__21_147 = 8'd147;
parameter [7:0] LEGUP_F_tanhf_BB__21_148 = 8'd148;
parameter [7:0] LEGUP_F_tanhf_BB__21_149 = 8'd149;
parameter [7:0] LEGUP_F_tanhf_BB__21_150 = 8'd150;
parameter [7:0] LEGUP_F_tanhf_BB__21_151 = 8'd151;
parameter [7:0] LEGUP_F_tanhf_BB__21_152 = 8'd152;
parameter [7:0] LEGUP_F_tanhf_BB__21_153 = 8'd153;
parameter [7:0] LEGUP_F_tanhf_BB__21_154 = 8'd154;
parameter [7:0] LEGUP_F_tanhf_BB__21_155 = 8'd155;
parameter [7:0] LEGUP_F_tanhf_BB__21_156 = 8'd156;
parameter [7:0] LEGUP_F_tanhf_BB__21_157 = 8'd157;
parameter [7:0] LEGUP_F_tanhf_BB__21_158 = 8'd158;
parameter [7:0] LEGUP_F_tanhf_BB__21_159 = 8'd159;
parameter [7:0] LEGUP_F_tanhf_BB__21_160 = 8'd160;
parameter [7:0] LEGUP_F_tanhf_BB__21_161 = 8'd161;
parameter [7:0] LEGUP_F_tanhf_BB__21_162 = 8'd162;
parameter [7:0] LEGUP_F_tanhf_BB__21_163 = 8'd163;
parameter [7:0] LEGUP_F_tanhf_BB__21_164 = 8'd164;
parameter [7:0] LEGUP_F_tanhf_BB__21_165 = 8'd165;
parameter [7:0] LEGUP_F_tanhf_BB__21_166 = 8'd166;
parameter [7:0] LEGUP_F_tanhf_BB__21_167 = 8'd167;
parameter [7:0] LEGUP_F_tanhf_BB__21_168 = 8'd168;
parameter [7:0] LEGUP_F_tanhf_BB__21_169 = 8'd169;
parameter [7:0] LEGUP_F_tanhf_BB__27_170 = 8'd170;
parameter [7:0] LEGUP_F_tanhf_BB__27_171 = 8'd171;
parameter [7:0] LEGUP_F_tanhf_BB__27_172 = 8'd172;
parameter [7:0] LEGUP_F_tanhf_BB__27_173 = 8'd173;
parameter [7:0] LEGUP_F_tanhf_BB__27_174 = 8'd174;
parameter [7:0] LEGUP_F_tanhf_BB__27_175 = 8'd175;
parameter [7:0] LEGUP_F_tanhf_BB__27_176 = 8'd176;
parameter [7:0] LEGUP_F_tanhf_BB__27_177 = 8'd177;
parameter [7:0] LEGUP_F_tanhf_BB__27_178 = 8'd178;
parameter [7:0] LEGUP_F_tanhf_BB__27_179 = 8'd179;
parameter [7:0] LEGUP_F_tanhf_BB__27_180 = 8'd180;
parameter [7:0] LEGUP_F_tanhf_BB__27_181 = 8'd181;
parameter [7:0] LEGUP_F_tanhf_BB__27_183 = 8'd183;
parameter [7:0] LEGUP_F_tanhf_BB__27_184 = 8'd184;
parameter [7:0] LEGUP_F_tanhf_BB__27_185 = 8'd185;
parameter [7:0] LEGUP_F_tanhf_BB__27_186 = 8'd186;
parameter [7:0] LEGUP_F_tanhf_BB__27_187 = 8'd187;
parameter [7:0] LEGUP_F_tanhf_BB__27_188 = 8'd188;
parameter [7:0] LEGUP_F_tanhf_BB__27_189 = 8'd189;
parameter [7:0] LEGUP_F_tanhf_BB__27_190 = 8'd190;
parameter [7:0] LEGUP_F_tanhf_BB__27_191 = 8'd191;
parameter [7:0] LEGUP_F_tanhf_BB__27_192 = 8'd192;
parameter [7:0] LEGUP_F_tanhf_BB__27_193 = 8'd193;
parameter [7:0] LEGUP_F_tanhf_BB__27_194 = 8'd194;
parameter [7:0] LEGUP_F_tanhf_BB__27_195 = 8'd195;
parameter [7:0] LEGUP_F_tanhf_BB__27_196 = 8'd196;
parameter [7:0] LEGUP_F_tanhf_BB__27_197 = 8'd197;
parameter [7:0] LEGUP_F_tanhf_BB__27_198 = 8'd198;
parameter [7:0] LEGUP_F_tanhf_BB__27_199 = 8'd199;
parameter [7:0] LEGUP_F_tanhf_BB__27_200 = 8'd200;
parameter [7:0] LEGUP_F_tanhf_BB__27_201 = 8'd201;
parameter [7:0] LEGUP_F_tanhf_BB__27_202 = 8'd202;
parameter [7:0] LEGUP_F_tanhf_BB__27_203 = 8'd203;
parameter [7:0] LEGUP_F_tanhf_BB__27_204 = 8'd204;
parameter [7:0] LEGUP_F_tanhf_BB__27_205 = 8'd205;
parameter [7:0] LEGUP_F_tanhf_BB__27_206 = 8'd206;
parameter [7:0] LEGUP_F_tanhf_BB__27_207 = 8'd207;
parameter [7:0] LEGUP_F_tanhf_BB__27_208 = 8'd208;
parameter [7:0] LEGUP_F_tanhf_BB__27_209 = 8'd209;
parameter [7:0] LEGUP_F_tanhf_BB__27_210 = 8'd210;
parameter [7:0] LEGUP_F_tanhf_BB__27_211 = 8'd211;
parameter [7:0] LEGUP_F_tanhf_BB__27_212 = 8'd212;
parameter [7:0] LEGUP_F_tanhf_BB__27_213 = 8'd213;
parameter [7:0] LEGUP_F_tanhf_BB__27_214 = 8'd214;
parameter [7:0] LEGUP_F_tanhf_BB__27_215 = 8'd215;
parameter [7:0] LEGUP_F_tanhf_BB__27_216 = 8'd216;
parameter [7:0] LEGUP_F_tanhf_BB__27_217 = 8'd217;
parameter [7:0] LEGUP_F_tanhf_BB__27_218 = 8'd218;
parameter [7:0] LEGUP_F_tanhf_BB__27_219 = 8'd219;
parameter [7:0] LEGUP_F_tanhf_BB__27_220 = 8'd220;
parameter [7:0] LEGUP_F_tanhf_BB__27_221 = 8'd221;
parameter [7:0] LEGUP_F_tanhf_BB__27_222 = 8'd222;
parameter [7:0] LEGUP_F_tanhf_BB__27_223 = 8'd223;
parameter [7:0] LEGUP_F_tanhf_BB__27_224 = 8'd224;
parameter [7:0] LEGUP_F_tanhf_BB__27_225 = 8'd225;
parameter [7:0] LEGUP_F_tanhf_BB__27_226 = 8'd226;
parameter [7:0] LEGUP_F_tanhf_BB__27_227 = 8'd227;
parameter [7:0] LEGUP_F_tanhf_BB__27_228 = 8'd228;
parameter [7:0] LEGUP_F_tanhf_BB__27_229 = 8'd229;
parameter [7:0] LEGUP_F_tanhf_BB__27_230 = 8'd230;
parameter [7:0] LEGUP_F_tanhf_BB__33_231 = 8'd231;
parameter [7:0] LEGUP_F_tanhf_BB__35_232 = 8'd232;
parameter [7:0] LEGUP_F_tanhf_BB__35_233 = 8'd233;
parameter [7:0] LEGUP_F_tanhf_BB__35_234 = 8'd234;
parameter [7:0] LEGUP_F_tanhf_BB__35_235 = 8'd235;
parameter [7:0] LEGUP_F_tanhf_BB__35_236 = 8'd236;
parameter [7:0] LEGUP_F_tanhf_BB__35_237 = 8'd237;
parameter [7:0] LEGUP_F_tanhf_BB__35_238 = 8'd238;
parameter [7:0] LEGUP_F_tanhf_BB__35_239 = 8'd239;
parameter [7:0] LEGUP_F_tanhf_BB__35_240 = 8'd240;
parameter [7:0] LEGUP_F_tanhf_BB__35_241 = 8'd241;
parameter [7:0] LEGUP_F_tanhf_BB__35_242 = 8'd242;
parameter [7:0] LEGUP_F_tanhf_BB__35_243 = 8'd243;
parameter [7:0] LEGUP_F_tanhf_BB__35_244 = 8'd244;
parameter [7:0] LEGUP_F_tanhf_BB__35_245 = 8'd245;
parameter [7:0] LEGUP_F_tanhf_BB__35_246 = 8'd246;
parameter [7:0] LEGUP_F_tanhf_BB__37_247 = 8'd247;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 55'd0};
parameter [7:0] LEGUP_function_call_107 = 8'd107;
parameter [7:0] LEGUP_function_call_182 = 8'd182;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
input [31:0] arg_x;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] tanhf_0_1;
reg [31:0] tanhf_0_1_reg;
reg [31:0] tanhf_0_2;
reg [31:0] tanhf_0_2_reg;
reg  tanhf_0_3;
reg  tanhf_4_5;
reg  tanhf_4_5_reg;
reg [31:0] tanhf_4_6;
reg [31:0] tanhf_4_6_reg;
reg [31:0] tanhf_7_8;
reg [31:0] tanhf_9_10;
reg  tanhf_11_12;
reg  tanhf_13_14;
reg [31:0] tanhf_15_16;
reg [31:0] tanhf_15_17;
reg  tanhf_18_19;
reg [31:0] tanhf_18_20;
reg [31:0] tanhf_18_20_reg;
reg [31:0] tanhf_21_22;
reg [31:0] tanhf_21_23;
reg [31:0] tanhf_21_23_reg;
reg [31:0] tanhf_21_24;
reg [31:0] tanhf_21_25;
reg [31:0] tanhf_21_26;
reg [31:0] tanhf_27_28;
reg [31:0] tanhf_27_29;
reg [31:0] tanhf_27_29_reg;
reg [31:0] tanhf_27_30;
reg [31:0] tanhf_27_31;
reg [31:0] tanhf_27_32;
reg [31:0] tanhf_33_storemerge1;
reg [31:0] tanhf_33_storemerge1_reg;
reg  tanhf_33_34;
reg [31:0] tanhf_35_36;
reg [31:0] tanhf_37_0;
reg [31:0] tanhf_37_0_reg;
reg  expm1f_start;
reg [31:0] expm1f_arg_x;
wire  expm1f_memory_controller_enable_a;
wire  expm1f_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] expm1f_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] expm1f_memory_controller_in_a;
wire [1:0] expm1f_memory_controller_size_a;
wire  expm1f_memory_controller_enable_b;
wire  expm1f_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] expm1f_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] expm1f_memory_controller_in_b;
wire [1:0] expm1f_memory_controller_size_b;
reg  expm1f_finish_final;
reg  expm1f_finish_reg;
wire  expm1f_finish;
wire [31:0] expm1f_return_val;
reg [31:0] expm1f_return_val_reg;
reg  legup_function_call;
reg [31:0] tanhf_altfp_divide_32_0_op0;
reg [31:0] tanhf_altfp_divide_32_0_op1;
wire [31:0] altfp_divider_tanhf_4_6_out;
reg  altfp_tanhf_4_6_en;
reg [31:0] tanhf_altfp_divide_32_0;
reg [31:0] tanhf_altfp_add_32_0_op0;
reg [31:0] tanhf_altfp_add_32_0_op1;
wire [31:0] altfp_adder_tanhf_7_8_out;
reg  altfp_tanhf_7_8_en;
reg [31:0] tanhf_altfp_add_32_0;
reg [31:0] tanhf_altfp_multiply_32_0_op0;
reg [31:0] tanhf_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_tanhf_15_17_out;
reg  altfp_tanhf_15_17_en;
reg [31:0] tanhf_altfp_multiply_32_0;
reg [31:0] tanhf_altfp_subtract_32_0_op0;
reg [31:0] tanhf_altfp_subtract_32_0_op1;
wire [31:0] altfp_subtractor_tanhf_21_26_out;
reg  altfp_tanhf_21_26_en;
reg [31:0] tanhf_altfp_subtract_32_0;

/*   %6 = fdiv float 1.000000e+00, %x*/
altfp_divider_33 altfp_divider_33_tanhf_4_6 (
	.result (altfp_divider_tanhf_4_6_out),
	.dataa (tanhf_altfp_divide_32_0_op0),
	.datab (tanhf_altfp_divide_32_0_op1),
	.clock (clk),
	.clk_en (altfp_tanhf_4_6_en)
);


/*   %8 = fadd float %6, 1.000000e+00*/
altfp_adder_14 altfp_adder_14_tanhf_7_8 (
	.result (altfp_adder_tanhf_7_8_out),
	.dataa (tanhf_altfp_add_32_0_op0),
	.datab (tanhf_altfp_add_32_0_op1),
	.clock (clk),
	.clk_en (altfp_tanhf_7_8_en)
);


/*   %17 = fmul float %16, %x*/
altfp_multiplier_11 altfp_multiplier_11_tanhf_15_17 (
	.result (altfp_multiplier_tanhf_15_17_out),
	.dataa (tanhf_altfp_multiply_32_0_op0),
	.datab (tanhf_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_tanhf_15_17_en)
);


/*   %26 = fsub float 1.000000e+00, %25*/
altfp_subtractor_14 altfp_subtractor_14_tanhf_21_26 (
	.result (altfp_subtractor_tanhf_21_26_out),
	.dataa (tanhf_altfp_subtract_32_0_op0),
	.datab (tanhf_altfp_subtract_32_0_op1),
	.clock (clk),
	.clk_en (altfp_tanhf_21_26_en)
);



expm1f expm1f (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (expm1f_memory_controller_enable_a),
	.memory_controller_address_a (expm1f_memory_controller_address_a),
	.memory_controller_write_enable_a (expm1f_memory_controller_write_enable_a),
	.memory_controller_in_a (expm1f_memory_controller_in_a),
	.memory_controller_size_a (expm1f_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (expm1f_memory_controller_enable_b),
	.memory_controller_address_b (expm1f_memory_controller_address_b),
	.memory_controller_write_enable_b (expm1f_memory_controller_write_enable_b),
	.memory_controller_in_b (expm1f_memory_controller_in_b),
	.memory_controller_size_b (expm1f_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (expm1f_start),
	.finish (expm1f_finish),
	.return_val (expm1f_return_val),
	.arg_x (expm1f_arg_x)
);

defparam
	expm1f.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_tanhf_BB__0_1;
LEGUP_F_tanhf_BB__0_1:
	if ((tanhf_0_3 == 1'd1))
		next_state = LEGUP_F_tanhf_BB__11_66;
	else if ((tanhf_0_3 == 1'd0))
		next_state = LEGUP_F_tanhf_BB__4_2;
LEGUP_F_tanhf_BB__11_66:
	if ((tanhf_11_12 == 1'd1))
		next_state = LEGUP_F_tanhf_BB__13_67;
	else if ((tanhf_11_12 == 1'd0))
		next_state = LEGUP_F_tanhf_BB__33_231;
LEGUP_F_tanhf_BB__13_67:
	if ((tanhf_13_14 == 1'd1))
		next_state = LEGUP_F_tanhf_BB__15_68;
	else if ((tanhf_13_14 == 1'd0))
		next_state = LEGUP_F_tanhf_BB__18_94;
LEGUP_F_tanhf_BB__15_68:
		next_state = LEGUP_F_tanhf_BB__15_69;
LEGUP_F_tanhf_BB__15_69:
		next_state = LEGUP_F_tanhf_BB__15_70;
LEGUP_F_tanhf_BB__15_70:
		next_state = LEGUP_F_tanhf_BB__15_71;
LEGUP_F_tanhf_BB__15_71:
		next_state = LEGUP_F_tanhf_BB__15_72;
LEGUP_F_tanhf_BB__15_72:
		next_state = LEGUP_F_tanhf_BB__15_73;
LEGUP_F_tanhf_BB__15_73:
		next_state = LEGUP_F_tanhf_BB__15_74;
LEGUP_F_tanhf_BB__15_74:
		next_state = LEGUP_F_tanhf_BB__15_75;
LEGUP_F_tanhf_BB__15_75:
		next_state = LEGUP_F_tanhf_BB__15_76;
LEGUP_F_tanhf_BB__15_76:
		next_state = LEGUP_F_tanhf_BB__15_77;
LEGUP_F_tanhf_BB__15_77:
		next_state = LEGUP_F_tanhf_BB__15_78;
LEGUP_F_tanhf_BB__15_78:
		next_state = LEGUP_F_tanhf_BB__15_79;
LEGUP_F_tanhf_BB__15_79:
		next_state = LEGUP_F_tanhf_BB__15_80;
LEGUP_F_tanhf_BB__15_80:
		next_state = LEGUP_F_tanhf_BB__15_81;
LEGUP_F_tanhf_BB__15_81:
		next_state = LEGUP_F_tanhf_BB__15_82;
LEGUP_F_tanhf_BB__15_82:
		next_state = LEGUP_F_tanhf_BB__15_83;
LEGUP_F_tanhf_BB__15_83:
		next_state = LEGUP_F_tanhf_BB__15_84;
LEGUP_F_tanhf_BB__15_84:
		next_state = LEGUP_F_tanhf_BB__15_85;
LEGUP_F_tanhf_BB__15_85:
		next_state = LEGUP_F_tanhf_BB__15_86;
LEGUP_F_tanhf_BB__15_86:
		next_state = LEGUP_F_tanhf_BB__15_87;
LEGUP_F_tanhf_BB__15_87:
		next_state = LEGUP_F_tanhf_BB__15_88;
LEGUP_F_tanhf_BB__15_88:
		next_state = LEGUP_F_tanhf_BB__15_89;
LEGUP_F_tanhf_BB__15_89:
		next_state = LEGUP_F_tanhf_BB__15_90;
LEGUP_F_tanhf_BB__15_90:
		next_state = LEGUP_F_tanhf_BB__15_91;
LEGUP_F_tanhf_BB__15_91:
		next_state = LEGUP_F_tanhf_BB__15_92;
LEGUP_F_tanhf_BB__15_92:
		next_state = LEGUP_F_tanhf_BB__15_93;
LEGUP_F_tanhf_BB__15_93:
		next_state = LEGUP_F_tanhf_BB__37_247;
LEGUP_F_tanhf_BB__18_94:
	if ((tanhf_18_19 == 1'd1))
		next_state = LEGUP_F_tanhf_BB__21_95;
	else if ((tanhf_18_19 == 1'd0))
		next_state = LEGUP_F_tanhf_BB__27_170;
LEGUP_F_tanhf_BB__21_100:
		next_state = LEGUP_F_tanhf_BB__21_101;
LEGUP_F_tanhf_BB__21_101:
		next_state = LEGUP_F_tanhf_BB__21_102;
LEGUP_F_tanhf_BB__21_102:
		next_state = LEGUP_F_tanhf_BB__21_103;
LEGUP_F_tanhf_BB__21_103:
		next_state = LEGUP_F_tanhf_BB__21_104;
LEGUP_F_tanhf_BB__21_104:
		next_state = LEGUP_F_tanhf_BB__21_105;
LEGUP_F_tanhf_BB__21_105:
		next_state = LEGUP_F_tanhf_BB__21_106;
LEGUP_F_tanhf_BB__21_106:
		next_state = LEGUP_function_call_107;
LEGUP_F_tanhf_BB__21_108:
		next_state = LEGUP_F_tanhf_BB__21_109;
LEGUP_F_tanhf_BB__21_109:
		next_state = LEGUP_F_tanhf_BB__21_110;
LEGUP_F_tanhf_BB__21_110:
		next_state = LEGUP_F_tanhf_BB__21_111;
LEGUP_F_tanhf_BB__21_111:
		next_state = LEGUP_F_tanhf_BB__21_112;
LEGUP_F_tanhf_BB__21_112:
		next_state = LEGUP_F_tanhf_BB__21_113;
LEGUP_F_tanhf_BB__21_113:
		next_state = LEGUP_F_tanhf_BB__21_114;
LEGUP_F_tanhf_BB__21_114:
		next_state = LEGUP_F_tanhf_BB__21_115;
LEGUP_F_tanhf_BB__21_115:
		next_state = LEGUP_F_tanhf_BB__21_116;
LEGUP_F_tanhf_BB__21_116:
		next_state = LEGUP_F_tanhf_BB__21_117;
LEGUP_F_tanhf_BB__21_117:
		next_state = LEGUP_F_tanhf_BB__21_118;
LEGUP_F_tanhf_BB__21_118:
		next_state = LEGUP_F_tanhf_BB__21_119;
LEGUP_F_tanhf_BB__21_119:
		next_state = LEGUP_F_tanhf_BB__21_120;
LEGUP_F_tanhf_BB__21_120:
		next_state = LEGUP_F_tanhf_BB__21_121;
LEGUP_F_tanhf_BB__21_121:
		next_state = LEGUP_F_tanhf_BB__21_122;
LEGUP_F_tanhf_BB__21_122:
		next_state = LEGUP_F_tanhf_BB__21_123;
LEGUP_F_tanhf_BB__21_123:
		next_state = LEGUP_F_tanhf_BB__21_124;
LEGUP_F_tanhf_BB__21_124:
		next_state = LEGUP_F_tanhf_BB__21_125;
LEGUP_F_tanhf_BB__21_125:
		next_state = LEGUP_F_tanhf_BB__21_126;
LEGUP_F_tanhf_BB__21_126:
		next_state = LEGUP_F_tanhf_BB__21_127;
LEGUP_F_tanhf_BB__21_127:
		next_state = LEGUP_F_tanhf_BB__21_128;
LEGUP_F_tanhf_BB__21_128:
		next_state = LEGUP_F_tanhf_BB__21_129;
LEGUP_F_tanhf_BB__21_129:
		next_state = LEGUP_F_tanhf_BB__21_130;
LEGUP_F_tanhf_BB__21_130:
		next_state = LEGUP_F_tanhf_BB__21_131;
LEGUP_F_tanhf_BB__21_131:
		next_state = LEGUP_F_tanhf_BB__21_132;
LEGUP_F_tanhf_BB__21_132:
		next_state = LEGUP_F_tanhf_BB__21_133;
LEGUP_F_tanhf_BB__21_133:
		next_state = LEGUP_F_tanhf_BB__21_134;
LEGUP_F_tanhf_BB__21_134:
		next_state = LEGUP_F_tanhf_BB__21_135;
LEGUP_F_tanhf_BB__21_135:
		next_state = LEGUP_F_tanhf_BB__21_136;
LEGUP_F_tanhf_BB__21_136:
		next_state = LEGUP_F_tanhf_BB__21_137;
LEGUP_F_tanhf_BB__21_137:
		next_state = LEGUP_F_tanhf_BB__21_138;
LEGUP_F_tanhf_BB__21_138:
		next_state = LEGUP_F_tanhf_BB__21_139;
LEGUP_F_tanhf_BB__21_139:
		next_state = LEGUP_F_tanhf_BB__21_140;
LEGUP_F_tanhf_BB__21_140:
		next_state = LEGUP_F_tanhf_BB__21_141;
LEGUP_F_tanhf_BB__21_141:
		next_state = LEGUP_F_tanhf_BB__21_142;
LEGUP_F_tanhf_BB__21_142:
		next_state = LEGUP_F_tanhf_BB__21_143;
LEGUP_F_tanhf_BB__21_143:
		next_state = LEGUP_F_tanhf_BB__21_144;
LEGUP_F_tanhf_BB__21_144:
		next_state = LEGUP_F_tanhf_BB__21_145;
LEGUP_F_tanhf_BB__21_145:
		next_state = LEGUP_F_tanhf_BB__21_146;
LEGUP_F_tanhf_BB__21_146:
		next_state = LEGUP_F_tanhf_BB__21_147;
LEGUP_F_tanhf_BB__21_147:
		next_state = LEGUP_F_tanhf_BB__21_148;
LEGUP_F_tanhf_BB__21_148:
		next_state = LEGUP_F_tanhf_BB__21_149;
LEGUP_F_tanhf_BB__21_149:
		next_state = LEGUP_F_tanhf_BB__21_150;
LEGUP_F_tanhf_BB__21_150:
		next_state = LEGUP_F_tanhf_BB__21_151;
LEGUP_F_tanhf_BB__21_151:
		next_state = LEGUP_F_tanhf_BB__21_152;
LEGUP_F_tanhf_BB__21_152:
		next_state = LEGUP_F_tanhf_BB__21_153;
LEGUP_F_tanhf_BB__21_153:
		next_state = LEGUP_F_tanhf_BB__21_154;
LEGUP_F_tanhf_BB__21_154:
		next_state = LEGUP_F_tanhf_BB__21_155;
LEGUP_F_tanhf_BB__21_155:
		next_state = LEGUP_F_tanhf_BB__21_156;
LEGUP_F_tanhf_BB__21_156:
		next_state = LEGUP_F_tanhf_BB__21_157;
LEGUP_F_tanhf_BB__21_157:
		next_state = LEGUP_F_tanhf_BB__21_158;
LEGUP_F_tanhf_BB__21_158:
		next_state = LEGUP_F_tanhf_BB__21_159;
LEGUP_F_tanhf_BB__21_159:
		next_state = LEGUP_F_tanhf_BB__21_160;
LEGUP_F_tanhf_BB__21_160:
		next_state = LEGUP_F_tanhf_BB__21_161;
LEGUP_F_tanhf_BB__21_161:
		next_state = LEGUP_F_tanhf_BB__21_162;
LEGUP_F_tanhf_BB__21_162:
		next_state = LEGUP_F_tanhf_BB__21_163;
LEGUP_F_tanhf_BB__21_163:
		next_state = LEGUP_F_tanhf_BB__21_164;
LEGUP_F_tanhf_BB__21_164:
		next_state = LEGUP_F_tanhf_BB__21_165;
LEGUP_F_tanhf_BB__21_165:
		next_state = LEGUP_F_tanhf_BB__21_166;
LEGUP_F_tanhf_BB__21_166:
		next_state = LEGUP_F_tanhf_BB__21_167;
LEGUP_F_tanhf_BB__21_167:
		next_state = LEGUP_F_tanhf_BB__21_168;
LEGUP_F_tanhf_BB__21_168:
		next_state = LEGUP_F_tanhf_BB__21_169;
LEGUP_F_tanhf_BB__21_169:
		next_state = LEGUP_F_tanhf_BB__33_231;
LEGUP_F_tanhf_BB__21_95:
		next_state = LEGUP_F_tanhf_BB__21_96;
LEGUP_F_tanhf_BB__21_96:
		next_state = LEGUP_F_tanhf_BB__21_97;
LEGUP_F_tanhf_BB__21_97:
		next_state = LEGUP_F_tanhf_BB__21_98;
LEGUP_F_tanhf_BB__21_98:
		next_state = LEGUP_F_tanhf_BB__21_99;
LEGUP_F_tanhf_BB__21_99:
		next_state = LEGUP_F_tanhf_BB__21_100;
LEGUP_F_tanhf_BB__27_170:
		next_state = LEGUP_F_tanhf_BB__27_171;
LEGUP_F_tanhf_BB__27_171:
		next_state = LEGUP_F_tanhf_BB__27_172;
LEGUP_F_tanhf_BB__27_172:
		next_state = LEGUP_F_tanhf_BB__27_173;
LEGUP_F_tanhf_BB__27_173:
		next_state = LEGUP_F_tanhf_BB__27_174;
LEGUP_F_tanhf_BB__27_174:
		next_state = LEGUP_F_tanhf_BB__27_175;
LEGUP_F_tanhf_BB__27_175:
		next_state = LEGUP_F_tanhf_BB__27_176;
LEGUP_F_tanhf_BB__27_176:
		next_state = LEGUP_F_tanhf_BB__27_177;
LEGUP_F_tanhf_BB__27_177:
		next_state = LEGUP_F_tanhf_BB__27_178;
LEGUP_F_tanhf_BB__27_178:
		next_state = LEGUP_F_tanhf_BB__27_179;
LEGUP_F_tanhf_BB__27_179:
		next_state = LEGUP_F_tanhf_BB__27_180;
LEGUP_F_tanhf_BB__27_180:
		next_state = LEGUP_F_tanhf_BB__27_181;
LEGUP_F_tanhf_BB__27_181:
		next_state = LEGUP_function_call_182;
LEGUP_F_tanhf_BB__27_183:
		next_state = LEGUP_F_tanhf_BB__27_184;
LEGUP_F_tanhf_BB__27_184:
		next_state = LEGUP_F_tanhf_BB__27_185;
LEGUP_F_tanhf_BB__27_185:
		next_state = LEGUP_F_tanhf_BB__27_186;
LEGUP_F_tanhf_BB__27_186:
		next_state = LEGUP_F_tanhf_BB__27_187;
LEGUP_F_tanhf_BB__27_187:
		next_state = LEGUP_F_tanhf_BB__27_188;
LEGUP_F_tanhf_BB__27_188:
		next_state = LEGUP_F_tanhf_BB__27_189;
LEGUP_F_tanhf_BB__27_189:
		next_state = LEGUP_F_tanhf_BB__27_190;
LEGUP_F_tanhf_BB__27_190:
		next_state = LEGUP_F_tanhf_BB__27_191;
LEGUP_F_tanhf_BB__27_191:
		next_state = LEGUP_F_tanhf_BB__27_192;
LEGUP_F_tanhf_BB__27_192:
		next_state = LEGUP_F_tanhf_BB__27_193;
LEGUP_F_tanhf_BB__27_193:
		next_state = LEGUP_F_tanhf_BB__27_194;
LEGUP_F_tanhf_BB__27_194:
		next_state = LEGUP_F_tanhf_BB__27_195;
LEGUP_F_tanhf_BB__27_195:
		next_state = LEGUP_F_tanhf_BB__27_196;
LEGUP_F_tanhf_BB__27_196:
		next_state = LEGUP_F_tanhf_BB__27_197;
LEGUP_F_tanhf_BB__27_197:
		next_state = LEGUP_F_tanhf_BB__27_198;
LEGUP_F_tanhf_BB__27_198:
		next_state = LEGUP_F_tanhf_BB__27_199;
LEGUP_F_tanhf_BB__27_199:
		next_state = LEGUP_F_tanhf_BB__27_200;
LEGUP_F_tanhf_BB__27_200:
		next_state = LEGUP_F_tanhf_BB__27_201;
LEGUP_F_tanhf_BB__27_201:
		next_state = LEGUP_F_tanhf_BB__27_202;
LEGUP_F_tanhf_BB__27_202:
		next_state = LEGUP_F_tanhf_BB__27_203;
LEGUP_F_tanhf_BB__27_203:
		next_state = LEGUP_F_tanhf_BB__27_204;
LEGUP_F_tanhf_BB__27_204:
		next_state = LEGUP_F_tanhf_BB__27_205;
LEGUP_F_tanhf_BB__27_205:
		next_state = LEGUP_F_tanhf_BB__27_206;
LEGUP_F_tanhf_BB__27_206:
		next_state = LEGUP_F_tanhf_BB__27_207;
LEGUP_F_tanhf_BB__27_207:
		next_state = LEGUP_F_tanhf_BB__27_208;
LEGUP_F_tanhf_BB__27_208:
		next_state = LEGUP_F_tanhf_BB__27_209;
LEGUP_F_tanhf_BB__27_209:
		next_state = LEGUP_F_tanhf_BB__27_210;
LEGUP_F_tanhf_BB__27_210:
		next_state = LEGUP_F_tanhf_BB__27_211;
LEGUP_F_tanhf_BB__27_211:
		next_state = LEGUP_F_tanhf_BB__27_212;
LEGUP_F_tanhf_BB__27_212:
		next_state = LEGUP_F_tanhf_BB__27_213;
LEGUP_F_tanhf_BB__27_213:
		next_state = LEGUP_F_tanhf_BB__27_214;
LEGUP_F_tanhf_BB__27_214:
		next_state = LEGUP_F_tanhf_BB__27_215;
LEGUP_F_tanhf_BB__27_215:
		next_state = LEGUP_F_tanhf_BB__27_216;
LEGUP_F_tanhf_BB__27_216:
		next_state = LEGUP_F_tanhf_BB__27_217;
LEGUP_F_tanhf_BB__27_217:
		next_state = LEGUP_F_tanhf_BB__27_218;
LEGUP_F_tanhf_BB__27_218:
		next_state = LEGUP_F_tanhf_BB__27_219;
LEGUP_F_tanhf_BB__27_219:
		next_state = LEGUP_F_tanhf_BB__27_220;
LEGUP_F_tanhf_BB__27_220:
		next_state = LEGUP_F_tanhf_BB__27_221;
LEGUP_F_tanhf_BB__27_221:
		next_state = LEGUP_F_tanhf_BB__27_222;
LEGUP_F_tanhf_BB__27_222:
		next_state = LEGUP_F_tanhf_BB__27_223;
LEGUP_F_tanhf_BB__27_223:
		next_state = LEGUP_F_tanhf_BB__27_224;
LEGUP_F_tanhf_BB__27_224:
		next_state = LEGUP_F_tanhf_BB__27_225;
LEGUP_F_tanhf_BB__27_225:
		next_state = LEGUP_F_tanhf_BB__27_226;
LEGUP_F_tanhf_BB__27_226:
		next_state = LEGUP_F_tanhf_BB__27_227;
LEGUP_F_tanhf_BB__27_227:
		next_state = LEGUP_F_tanhf_BB__27_228;
LEGUP_F_tanhf_BB__27_228:
		next_state = LEGUP_F_tanhf_BB__27_229;
LEGUP_F_tanhf_BB__27_229:
		next_state = LEGUP_F_tanhf_BB__27_230;
LEGUP_F_tanhf_BB__27_230:
		next_state = LEGUP_F_tanhf_BB__33_231;
LEGUP_F_tanhf_BB__33_231:
	if ((tanhf_33_34 == 1'd1))
		next_state = LEGUP_F_tanhf_BB__37_247;
	else if ((tanhf_33_34 == 1'd0))
		next_state = LEGUP_F_tanhf_BB__35_232;
LEGUP_F_tanhf_BB__35_232:
		next_state = LEGUP_F_tanhf_BB__35_233;
LEGUP_F_tanhf_BB__35_233:
		next_state = LEGUP_F_tanhf_BB__35_234;
LEGUP_F_tanhf_BB__35_234:
		next_state = LEGUP_F_tanhf_BB__35_235;
LEGUP_F_tanhf_BB__35_235:
		next_state = LEGUP_F_tanhf_BB__35_236;
LEGUP_F_tanhf_BB__35_236:
		next_state = LEGUP_F_tanhf_BB__35_237;
LEGUP_F_tanhf_BB__35_237:
		next_state = LEGUP_F_tanhf_BB__35_238;
LEGUP_F_tanhf_BB__35_238:
		next_state = LEGUP_F_tanhf_BB__35_239;
LEGUP_F_tanhf_BB__35_239:
		next_state = LEGUP_F_tanhf_BB__35_240;
LEGUP_F_tanhf_BB__35_240:
		next_state = LEGUP_F_tanhf_BB__35_241;
LEGUP_F_tanhf_BB__35_241:
		next_state = LEGUP_F_tanhf_BB__35_242;
LEGUP_F_tanhf_BB__35_242:
		next_state = LEGUP_F_tanhf_BB__35_243;
LEGUP_F_tanhf_BB__35_243:
		next_state = LEGUP_F_tanhf_BB__35_244;
LEGUP_F_tanhf_BB__35_244:
		next_state = LEGUP_F_tanhf_BB__35_245;
LEGUP_F_tanhf_BB__35_245:
		next_state = LEGUP_F_tanhf_BB__35_246;
LEGUP_F_tanhf_BB__35_246:
		next_state = LEGUP_F_tanhf_BB__37_247;
LEGUP_F_tanhf_BB__37_247:
		next_state = LEGUP_0;
LEGUP_F_tanhf_BB__4_10:
		next_state = LEGUP_F_tanhf_BB__4_11;
LEGUP_F_tanhf_BB__4_11:
		next_state = LEGUP_F_tanhf_BB__4_12;
LEGUP_F_tanhf_BB__4_12:
		next_state = LEGUP_F_tanhf_BB__4_13;
LEGUP_F_tanhf_BB__4_13:
		next_state = LEGUP_F_tanhf_BB__4_14;
LEGUP_F_tanhf_BB__4_14:
		next_state = LEGUP_F_tanhf_BB__4_15;
LEGUP_F_tanhf_BB__4_15:
		next_state = LEGUP_F_tanhf_BB__4_16;
LEGUP_F_tanhf_BB__4_16:
		next_state = LEGUP_F_tanhf_BB__4_17;
LEGUP_F_tanhf_BB__4_17:
		next_state = LEGUP_F_tanhf_BB__4_18;
LEGUP_F_tanhf_BB__4_18:
		next_state = LEGUP_F_tanhf_BB__4_19;
LEGUP_F_tanhf_BB__4_19:
		next_state = LEGUP_F_tanhf_BB__4_20;
LEGUP_F_tanhf_BB__4_2:
		next_state = LEGUP_F_tanhf_BB__4_3;
LEGUP_F_tanhf_BB__4_20:
		next_state = LEGUP_F_tanhf_BB__4_21;
LEGUP_F_tanhf_BB__4_21:
		next_state = LEGUP_F_tanhf_BB__4_22;
LEGUP_F_tanhf_BB__4_22:
		next_state = LEGUP_F_tanhf_BB__4_23;
LEGUP_F_tanhf_BB__4_23:
		next_state = LEGUP_F_tanhf_BB__4_24;
LEGUP_F_tanhf_BB__4_24:
		next_state = LEGUP_F_tanhf_BB__4_25;
LEGUP_F_tanhf_BB__4_25:
		next_state = LEGUP_F_tanhf_BB__4_26;
LEGUP_F_tanhf_BB__4_26:
		next_state = LEGUP_F_tanhf_BB__4_27;
LEGUP_F_tanhf_BB__4_27:
		next_state = LEGUP_F_tanhf_BB__4_28;
LEGUP_F_tanhf_BB__4_28:
		next_state = LEGUP_F_tanhf_BB__4_29;
LEGUP_F_tanhf_BB__4_29:
		next_state = LEGUP_F_tanhf_BB__4_30;
LEGUP_F_tanhf_BB__4_3:
		next_state = LEGUP_F_tanhf_BB__4_4;
LEGUP_F_tanhf_BB__4_30:
		next_state = LEGUP_F_tanhf_BB__4_31;
LEGUP_F_tanhf_BB__4_31:
		next_state = LEGUP_F_tanhf_BB__4_32;
LEGUP_F_tanhf_BB__4_32:
		next_state = LEGUP_F_tanhf_BB__4_33;
LEGUP_F_tanhf_BB__4_33:
		next_state = LEGUP_F_tanhf_BB__4_34;
LEGUP_F_tanhf_BB__4_34:
		next_state = LEGUP_F_tanhf_BB__4_35;
LEGUP_F_tanhf_BB__4_35:
	if ((tanhf_4_5_reg == 1'd1))
		next_state = LEGUP_F_tanhf_BB__7_36;
	else if ((tanhf_4_5_reg == 1'd0))
		next_state = LEGUP_F_tanhf_BB__9_51;
LEGUP_F_tanhf_BB__4_4:
		next_state = LEGUP_F_tanhf_BB__4_5;
LEGUP_F_tanhf_BB__4_5:
		next_state = LEGUP_F_tanhf_BB__4_6;
LEGUP_F_tanhf_BB__4_6:
		next_state = LEGUP_F_tanhf_BB__4_7;
LEGUP_F_tanhf_BB__4_7:
		next_state = LEGUP_F_tanhf_BB__4_8;
LEGUP_F_tanhf_BB__4_8:
		next_state = LEGUP_F_tanhf_BB__4_9;
LEGUP_F_tanhf_BB__4_9:
		next_state = LEGUP_F_tanhf_BB__4_10;
LEGUP_F_tanhf_BB__7_36:
		next_state = LEGUP_F_tanhf_BB__7_37;
LEGUP_F_tanhf_BB__7_37:
		next_state = LEGUP_F_tanhf_BB__7_38;
LEGUP_F_tanhf_BB__7_38:
		next_state = LEGUP_F_tanhf_BB__7_39;
LEGUP_F_tanhf_BB__7_39:
		next_state = LEGUP_F_tanhf_BB__7_40;
LEGUP_F_tanhf_BB__7_40:
		next_state = LEGUP_F_tanhf_BB__7_41;
LEGUP_F_tanhf_BB__7_41:
		next_state = LEGUP_F_tanhf_BB__7_42;
LEGUP_F_tanhf_BB__7_42:
		next_state = LEGUP_F_tanhf_BB__7_43;
LEGUP_F_tanhf_BB__7_43:
		next_state = LEGUP_F_tanhf_BB__7_44;
LEGUP_F_tanhf_BB__7_44:
		next_state = LEGUP_F_tanhf_BB__7_45;
LEGUP_F_tanhf_BB__7_45:
		next_state = LEGUP_F_tanhf_BB__7_46;
LEGUP_F_tanhf_BB__7_46:
		next_state = LEGUP_F_tanhf_BB__7_47;
LEGUP_F_tanhf_BB__7_47:
		next_state = LEGUP_F_tanhf_BB__7_48;
LEGUP_F_tanhf_BB__7_48:
		next_state = LEGUP_F_tanhf_BB__7_49;
LEGUP_F_tanhf_BB__7_49:
		next_state = LEGUP_F_tanhf_BB__7_50;
LEGUP_F_tanhf_BB__7_50:
		next_state = LEGUP_F_tanhf_BB__37_247;
LEGUP_F_tanhf_BB__9_51:
		next_state = LEGUP_F_tanhf_BB__9_52;
LEGUP_F_tanhf_BB__9_52:
		next_state = LEGUP_F_tanhf_BB__9_53;
LEGUP_F_tanhf_BB__9_53:
		next_state = LEGUP_F_tanhf_BB__9_54;
LEGUP_F_tanhf_BB__9_54:
		next_state = LEGUP_F_tanhf_BB__9_55;
LEGUP_F_tanhf_BB__9_55:
		next_state = LEGUP_F_tanhf_BB__9_56;
LEGUP_F_tanhf_BB__9_56:
		next_state = LEGUP_F_tanhf_BB__9_57;
LEGUP_F_tanhf_BB__9_57:
		next_state = LEGUP_F_tanhf_BB__9_58;
LEGUP_F_tanhf_BB__9_58:
		next_state = LEGUP_F_tanhf_BB__9_59;
LEGUP_F_tanhf_BB__9_59:
		next_state = LEGUP_F_tanhf_BB__9_60;
LEGUP_F_tanhf_BB__9_60:
		next_state = LEGUP_F_tanhf_BB__9_61;
LEGUP_F_tanhf_BB__9_61:
		next_state = LEGUP_F_tanhf_BB__9_62;
LEGUP_F_tanhf_BB__9_62:
		next_state = LEGUP_F_tanhf_BB__9_63;
LEGUP_F_tanhf_BB__9_63:
		next_state = LEGUP_F_tanhf_BB__9_64;
LEGUP_F_tanhf_BB__9_64:
		next_state = LEGUP_F_tanhf_BB__9_65;
LEGUP_F_tanhf_BB__9_65:
		next_state = LEGUP_F_tanhf_BB__37_247;
LEGUP_function_call_107:
	if ((expm1f_finish_final == 1'd1))
		next_state = LEGUP_F_tanhf_BB__21_108;
LEGUP_function_call_182:
	if ((expm1f_finish_final == 1'd1))
		next_state = LEGUP_F_tanhf_BB__27_183;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* tanhf: %0*/
	/*   %1 = bitcast float %x to i32*/
		tanhf_0_1 = arg_x;
end
always @(posedge clk) begin
	/* tanhf: %0*/
	/*   %1 = bitcast float %x to i32*/
	if ((cur_state == LEGUP_F_tanhf_BB__0_1)) begin
		tanhf_0_1_reg <= tanhf_0_1;
		if (start == 1'b0 && ^(tanhf_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* tanhf: %0*/
	/*   %2 = and i32 %1, 2147483647*/
		tanhf_0_2 = (tanhf_0_1 & 32'd2147483647);
end
always @(posedge clk) begin
	/* tanhf: %0*/
	/*   %2 = and i32 %1, 2147483647*/
	if ((cur_state == LEGUP_F_tanhf_BB__0_1)) begin
		tanhf_0_2_reg <= tanhf_0_2;
		if (start == 1'b0 && ^(tanhf_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* tanhf: %0*/
	/*   %3 = icmp ult i32 %2, 2139095040*/
		tanhf_0_3 = (tanhf_0_2 < 32'd2139095040);
end
always @(*) begin
	/* tanhf: %4*/
	/*   %5 = icmp sgt i32 %1, -1*/
		tanhf_4_5 = ($signed(tanhf_0_1_reg) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* tanhf: %4*/
	/*   %5 = icmp sgt i32 %1, -1*/
	if ((cur_state == LEGUP_F_tanhf_BB__4_2)) begin
		tanhf_4_5_reg <= tanhf_4_5;
		if (start == 1'b0 && ^(tanhf_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_4_5_reg"); $finish; end
	end
end
always @(*) begin
	tanhf_4_6 = tanhf_altfp_divide_32_0;
end
always @(posedge clk) begin
	/* tanhf: %4*/
	/*   %6 = fdiv float 1.000000e+00, %x*/
	if ((cur_state == LEGUP_F_tanhf_BB__4_35)) begin
		tanhf_4_6_reg <= tanhf_4_6;
		if (start == 1'b0 && ^(tanhf_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_4_6_reg"); $finish; end
	end
	/* tanhf: %4*/
	/*   %6 = fdiv float 1.000000e+00, %x*/
	if ((cur_state == LEGUP_F_tanhf_BB__4_35)) begin
		tanhf_4_6_reg <= tanhf_4_6;
		if (start == 1'b0 && ^(tanhf_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_4_6_reg"); $finish; end
	end
	/* tanhf: %21*/
	/*   %25 = fdiv float 2.000000e+00, %24*/
	if ((cur_state == LEGUP_F_tanhf_BB__21_155)) begin
		tanhf_4_6_reg <= tanhf_21_25;
		if (start == 1'b0 && ^(tanhf_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_4_6_reg"); $finish; end
	end
	/* tanhf: %27*/
	/*   %32 = fdiv float %30, %31*/
	if ((cur_state == LEGUP_F_tanhf_BB__27_230)) begin
		tanhf_4_6_reg <= tanhf_27_32;
		if (start == 1'b0 && ^(tanhf_27_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_4_6_reg"); $finish; end
	end
end
always @(*) begin
	tanhf_7_8 = tanhf_altfp_add_32_0;
end
always @(*) begin
	tanhf_9_10 = tanhf_altfp_add_32_0;
end
always @(*) begin
	/* tanhf: %11*/
	/*   %12 = icmp ult i32 %2, 1102053376*/
		tanhf_11_12 = (tanhf_0_2_reg < 32'd1102053376);
end
always @(*) begin
	/* tanhf: %13*/
	/*   %14 = icmp ult i32 %2, 603979776*/
		tanhf_13_14 = (tanhf_0_2_reg < 32'd603979776);
end
always @(*) begin
	tanhf_15_16 = tanhf_altfp_add_32_0;
end
always @(*) begin
	tanhf_15_17 = tanhf_altfp_multiply_32_0;
end
always @(*) begin
	/* tanhf: %18*/
	/*   %19 = icmp ugt i32 %2, 1065353215*/
		tanhf_18_19 = (tanhf_0_2_reg > 32'd1065353215);
end
always @(*) begin
	/* tanhf: %18*/
	/*   %20 = bitcast i32 %2 to float*/
		tanhf_18_20 = tanhf_0_2_reg;
end
always @(posedge clk) begin
	/* tanhf: %18*/
	/*   %20 = bitcast i32 %2 to float*/
	if ((cur_state == LEGUP_F_tanhf_BB__18_94)) begin
		tanhf_18_20_reg <= tanhf_18_20;
		if (start == 1'b0 && ^(tanhf_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_18_20_reg"); $finish; end
	end
end
always @(*) begin
	tanhf_21_22 = tanhf_altfp_multiply_32_0;
end
always @(*) begin
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
		tanhf_21_23 = expm1f_return_val_reg;
end
always @(posedge clk) begin
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		tanhf_21_23_reg <= tanhf_21_23;
		if (start == 1'b0 && ^(tanhf_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_21_23_reg"); $finish; end
	end
end
always @(*) begin
	tanhf_21_24 = tanhf_altfp_add_32_0;
end
always @(*) begin
	tanhf_21_25 = tanhf_altfp_divide_32_0;
end
always @(*) begin
	tanhf_21_26 = tanhf_altfp_subtract_32_0;
end
always @(*) begin
	tanhf_27_28 = tanhf_altfp_multiply_32_0;
end
always @(*) begin
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
		tanhf_27_29 = expm1f_return_val_reg;
end
always @(posedge clk) begin
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		tanhf_27_29_reg <= tanhf_27_29;
		if (start == 1'b0 && ^(tanhf_27_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_27_29_reg"); $finish; end
	end
end
always @(*) begin
	tanhf_27_30 = tanhf_altfp_subtract_32_0;
end
always @(*) begin
	tanhf_27_31 = tanhf_altfp_add_32_0;
end
always @(*) begin
	tanhf_27_32 = tanhf_altfp_divide_32_0;
end
always @(*) begin
	/* tanhf: %33*/
	/*   %storemerge1 = phi float [ %32, %27 ], [ %26, %21 ], [ 1.000000e+00, %11 ]*/
	if ((((cur_state == LEGUP_F_tanhf_BB__11_66) & (memory_controller_waitrequest == 1'd0)) & (tanhf_11_12 == 1'd0))) begin
		tanhf_33_storemerge1 = 32'h3F800000;
	end
	/* tanhf: %33*/
	/*   %storemerge1 = phi float [ %32, %27 ], [ %26, %21 ], [ 1.000000e+00, %11 ]*/
	else if (((cur_state == LEGUP_F_tanhf_BB__21_169) & (memory_controller_waitrequest == 1'd0))) begin
		tanhf_33_storemerge1 = tanhf_21_26;
	end
	/* tanhf: %33*/
	/*   %storemerge1 = phi float [ %32, %27 ], [ %26, %21 ], [ 1.000000e+00, %11 ]*/
	else /* if (((cur_state == LEGUP_F_tanhf_BB__27_230) & (memory_controller_waitrequest == 1'd0))) */ begin
		tanhf_33_storemerge1 = tanhf_27_32;
	end
end
always @(posedge clk) begin
	/* tanhf: %33*/
	/*   %storemerge1 = phi float [ %32, %27 ], [ %26, %21 ], [ 1.000000e+00, %11 ]*/
	if ((((cur_state == LEGUP_F_tanhf_BB__11_66) & (memory_controller_waitrequest == 1'd0)) & (tanhf_11_12 == 1'd0))) begin
		tanhf_33_storemerge1_reg <= tanhf_33_storemerge1;
		if (start == 1'b0 && ^(tanhf_33_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_33_storemerge1_reg"); $finish; end
	end
	/* tanhf: %33*/
	/*   %storemerge1 = phi float [ %32, %27 ], [ %26, %21 ], [ 1.000000e+00, %11 ]*/
	if (((cur_state == LEGUP_F_tanhf_BB__21_169) & (memory_controller_waitrequest == 1'd0))) begin
		tanhf_33_storemerge1_reg <= tanhf_33_storemerge1;
		if (start == 1'b0 && ^(tanhf_33_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_33_storemerge1_reg"); $finish; end
	end
	/* tanhf: %33*/
	/*   %storemerge1 = phi float [ %32, %27 ], [ %26, %21 ], [ 1.000000e+00, %11 ]*/
	if (((cur_state == LEGUP_F_tanhf_BB__27_230) & (memory_controller_waitrequest == 1'd0))) begin
		tanhf_33_storemerge1_reg <= tanhf_33_storemerge1;
		if (start == 1'b0 && ^(tanhf_33_storemerge1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_33_storemerge1_reg"); $finish; end
	end
end
always @(*) begin
	/* tanhf: %33*/
	/*   %34 = icmp sgt i32 %1, -1*/
		tanhf_33_34 = ($signed(tanhf_0_1_reg) > $signed(-32'd1));
end
always @(*) begin
	tanhf_35_36 = tanhf_altfp_subtract_32_0;
end
always @(*) begin
	/* tanhf: %37*/
	/*   %.0 = phi float [ %17, %15 ], [ %8, %7 ], [ %10, %9 ], [ %36, %35 ], [ %storemerge1, %33 ]*/
	if (((cur_state == LEGUP_F_tanhf_BB__7_50) & (memory_controller_waitrequest == 1'd0))) begin
		tanhf_37_0 = tanhf_7_8;
	end
	/* tanhf: %37*/
	/*   %.0 = phi float [ %17, %15 ], [ %8, %7 ], [ %10, %9 ], [ %36, %35 ], [ %storemerge1, %33 ]*/
	else if (((cur_state == LEGUP_F_tanhf_BB__9_65) & (memory_controller_waitrequest == 1'd0))) begin
		tanhf_37_0 = tanhf_9_10;
	end
	/* tanhf: %37*/
	/*   %.0 = phi float [ %17, %15 ], [ %8, %7 ], [ %10, %9 ], [ %36, %35 ], [ %storemerge1, %33 ]*/
	else if (((cur_state == LEGUP_F_tanhf_BB__15_93) & (memory_controller_waitrequest == 1'd0))) begin
		tanhf_37_0 = tanhf_15_17;
	end
	/* tanhf: %37*/
	/*   %.0 = phi float [ %17, %15 ], [ %8, %7 ], [ %10, %9 ], [ %36, %35 ], [ %storemerge1, %33 ]*/
	else if ((((cur_state == LEGUP_F_tanhf_BB__33_231) & (memory_controller_waitrequest == 1'd0)) & (tanhf_33_34 == 1'd1))) begin
		tanhf_37_0 = tanhf_33_storemerge1_reg;
	end
	/* tanhf: %37*/
	/*   %.0 = phi float [ %17, %15 ], [ %8, %7 ], [ %10, %9 ], [ %36, %35 ], [ %storemerge1, %33 ]*/
	else /* if (((cur_state == LEGUP_F_tanhf_BB__35_246) & (memory_controller_waitrequest == 1'd0))) */ begin
		tanhf_37_0 = tanhf_35_36;
	end
end
always @(posedge clk) begin
	/* tanhf: %37*/
	/*   %.0 = phi float [ %17, %15 ], [ %8, %7 ], [ %10, %9 ], [ %36, %35 ], [ %storemerge1, %33 ]*/
	if (((cur_state == LEGUP_F_tanhf_BB__7_50) & (memory_controller_waitrequest == 1'd0))) begin
		tanhf_37_0_reg <= tanhf_37_0;
		if (start == 1'b0 && ^(tanhf_37_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_37_0_reg"); $finish; end
	end
	/* tanhf: %37*/
	/*   %.0 = phi float [ %17, %15 ], [ %8, %7 ], [ %10, %9 ], [ %36, %35 ], [ %storemerge1, %33 ]*/
	if (((cur_state == LEGUP_F_tanhf_BB__9_65) & (memory_controller_waitrequest == 1'd0))) begin
		tanhf_37_0_reg <= tanhf_37_0;
		if (start == 1'b0 && ^(tanhf_37_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_37_0_reg"); $finish; end
	end
	/* tanhf: %37*/
	/*   %.0 = phi float [ %17, %15 ], [ %8, %7 ], [ %10, %9 ], [ %36, %35 ], [ %storemerge1, %33 ]*/
	if (((cur_state == LEGUP_F_tanhf_BB__15_93) & (memory_controller_waitrequest == 1'd0))) begin
		tanhf_37_0_reg <= tanhf_37_0;
		if (start == 1'b0 && ^(tanhf_37_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_37_0_reg"); $finish; end
	end
	/* tanhf: %37*/
	/*   %.0 = phi float [ %17, %15 ], [ %8, %7 ], [ %10, %9 ], [ %36, %35 ], [ %storemerge1, %33 ]*/
	if ((((cur_state == LEGUP_F_tanhf_BB__33_231) & (memory_controller_waitrequest == 1'd0)) & (tanhf_33_34 == 1'd1))) begin
		tanhf_37_0_reg <= tanhf_37_0;
		if (start == 1'b0 && ^(tanhf_37_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_37_0_reg"); $finish; end
	end
	/* tanhf: %37*/
	/*   %.0 = phi float [ %17, %15 ], [ %8, %7 ], [ %10, %9 ], [ %36, %35 ], [ %storemerge1, %33 ]*/
	if (((cur_state == LEGUP_F_tanhf_BB__35_246) & (memory_controller_waitrequest == 1'd0))) begin
		tanhf_37_0_reg <= tanhf_37_0;
		if (start == 1'b0 && ^(tanhf_37_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_37_0_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_F_tanhf_BB__21_106)) begin
		expm1f_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_107)) begin
		expm1f_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_start"); $finish; end
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_F_tanhf_BB__27_181)) begin
		expm1f_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_182)) begin
		expm1f_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_F_tanhf_BB__21_106)) begin
		expm1f_arg_x <= tanhf_21_22;
		if (start == 1'b0 && ^(tanhf_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_arg_x"); $finish; end
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_F_tanhf_BB__27_181)) begin
		expm1f_arg_x <= tanhf_27_28;
		if (start == 1'b0 && ^(tanhf_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_arg_x"); $finish; end
	end
end
always @(*) begin
	expm1f_finish_final = expm1f_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_tanhf_BB__21_106))) begin
		expm1f_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_finish_reg"); $finish; end
	end
	if (expm1f_finish) begin
		expm1f_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_tanhf_BB__27_181))) begin
		expm1f_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_finish_reg"); $finish; end
	end
	if (expm1f_finish) begin
		expm1f_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_tanhf_BB__21_106))) begin
		expm1f_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_return_val_reg"); $finish; end
	end
	if (expm1f_finish) begin
		expm1f_return_val_reg <= expm1f_return_val;
		if (start == 1'b0 && ^(expm1f_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_tanhf_BB__27_181))) begin
		expm1f_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_return_val_reg"); $finish; end
	end
	if (expm1f_finish) begin
		expm1f_return_val_reg <= expm1f_return_val;
		if (start == 1'b0 && ^(expm1f_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to expm1f_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		legup_function_call = 1'd1;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* tanhf: %4*/
	/*   %6 = fdiv float 1.000000e+00, %x*/
	if ((cur_state == LEGUP_F_tanhf_BB__4_2)) begin
		tanhf_altfp_divide_32_0_op0 = 32'h3F800000;
	end
	/* tanhf: %21*/
	/*   %25 = fdiv float 2.000000e+00, %24*/
	else if ((cur_state == LEGUP_F_tanhf_BB__21_122)) begin
		tanhf_altfp_divide_32_0_op0 = 32'h40000000;
	end
	/* tanhf: %27*/
	/*   %32 = fdiv float %30, %31*/
	else /* if ((cur_state == LEGUP_F_tanhf_BB__27_197)) */ begin
		tanhf_altfp_divide_32_0_op0 = tanhf_27_30;
	end
end
always @(*) begin
	/* tanhf: %4*/
	/*   %6 = fdiv float 1.000000e+00, %x*/
	if ((cur_state == LEGUP_F_tanhf_BB__4_2)) begin
		tanhf_altfp_divide_32_0_op1 = arg_x;
	end
	/* tanhf: %21*/
	/*   %25 = fdiv float 2.000000e+00, %24*/
	else if ((cur_state == LEGUP_F_tanhf_BB__21_122)) begin
		tanhf_altfp_divide_32_0_op1 = tanhf_21_24;
	end
	/* tanhf: %27*/
	/*   %32 = fdiv float %30, %31*/
	else /* if ((cur_state == LEGUP_F_tanhf_BB__27_197)) */ begin
		tanhf_altfp_divide_32_0_op1 = tanhf_27_31;
	end
end
always @(*) begin
	altfp_tanhf_4_6_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	tanhf_altfp_divide_32_0 = altfp_divider_tanhf_4_6_out;
end
always @(*) begin
	/* tanhf: %7*/
	/*   %8 = fadd float %6, 1.000000e+00*/
	if ((cur_state == LEGUP_F_tanhf_BB__7_36)) begin
		tanhf_altfp_add_32_0_op0 = tanhf_4_6_reg;
	end
	/* tanhf: %9*/
	/*   %10 = fadd float %6, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_tanhf_BB__9_51)) begin
		tanhf_altfp_add_32_0_op0 = tanhf_4_6_reg;
	end
	/* tanhf: %15*/
	/*   %16 = fadd float %x, 1.000000e+00*/
	else if ((cur_state == LEGUP_F_tanhf_BB__15_68)) begin
		tanhf_altfp_add_32_0_op0 = arg_x;
	end
	/* tanhf: %21*/
	/*   %24 = fadd float %23, 2.000000e+00*/
	else if ((cur_state == LEGUP_F_tanhf_BB__21_108)) begin
		tanhf_altfp_add_32_0_op0 = tanhf_21_23_reg;
	end
	/* tanhf: %27*/
	/*   %31 = fadd float %29, 2.000000e+00*/
	else /* if ((cur_state == LEGUP_F_tanhf_BB__27_183)) */ begin
		tanhf_altfp_add_32_0_op0 = tanhf_27_29_reg;
	end
end
always @(*) begin
	/* tanhf: %7*/
	/*   %8 = fadd float %6, 1.000000e+00*/
	if ((cur_state == LEGUP_F_tanhf_BB__7_36)) begin
		tanhf_altfp_add_32_0_op1 = 32'h3F800000;
	end
	/* tanhf: %9*/
	/*   %10 = fadd float %6, -1.000000e+00*/
	else if ((cur_state == LEGUP_F_tanhf_BB__9_51)) begin
		tanhf_altfp_add_32_0_op1 = 32'hBF800000;
	end
	/* tanhf: %15*/
	/*   %16 = fadd float %x, 1.000000e+00*/
	else if ((cur_state == LEGUP_F_tanhf_BB__15_68)) begin
		tanhf_altfp_add_32_0_op1 = 32'h3F800000;
	end
	/* tanhf: %21*/
	/*   %24 = fadd float %23, 2.000000e+00*/
	else if ((cur_state == LEGUP_F_tanhf_BB__21_108)) begin
		tanhf_altfp_add_32_0_op1 = 32'h40000000;
	end
	/* tanhf: %27*/
	/*   %31 = fadd float %29, 2.000000e+00*/
	else /* if ((cur_state == LEGUP_F_tanhf_BB__27_183)) */ begin
		tanhf_altfp_add_32_0_op1 = 32'h40000000;
	end
end
always @(*) begin
	altfp_tanhf_7_8_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	tanhf_altfp_add_32_0 = altfp_adder_tanhf_7_8_out;
end
always @(*) begin
	/* tanhf: %15*/
	/*   %17 = fmul float %16, %x*/
	if ((cur_state == LEGUP_F_tanhf_BB__15_82)) begin
		tanhf_altfp_multiply_32_0_op0 = tanhf_15_16;
	end
	/* tanhf: %21*/
	/*   %22 = fmul float %20, 2.000000e+00*/
	else if ((cur_state == LEGUP_F_tanhf_BB__21_95)) begin
		tanhf_altfp_multiply_32_0_op0 = tanhf_18_20_reg;
	end
	/* tanhf: %27*/
	/*   %28 = fmul float %20, -2.000000e+00*/
	else /* if ((cur_state == LEGUP_F_tanhf_BB__27_170)) */ begin
		tanhf_altfp_multiply_32_0_op0 = tanhf_18_20_reg;
	end
end
always @(*) begin
	/* tanhf: %15*/
	/*   %17 = fmul float %16, %x*/
	if ((cur_state == LEGUP_F_tanhf_BB__15_82)) begin
		tanhf_altfp_multiply_32_0_op1 = arg_x;
	end
	/* tanhf: %21*/
	/*   %22 = fmul float %20, 2.000000e+00*/
	else if ((cur_state == LEGUP_F_tanhf_BB__21_95)) begin
		tanhf_altfp_multiply_32_0_op1 = 32'h40000000;
	end
	/* tanhf: %27*/
	/*   %28 = fmul float %20, -2.000000e+00*/
	else /* if ((cur_state == LEGUP_F_tanhf_BB__27_170)) */ begin
		tanhf_altfp_multiply_32_0_op1 = 32'hC0000000;
	end
end
always @(*) begin
	altfp_tanhf_15_17_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	tanhf_altfp_multiply_32_0 = altfp_multiplier_tanhf_15_17_out;
end
always @(*) begin
	/* tanhf: %21*/
	/*   %26 = fsub float 1.000000e+00, %25*/
	if ((cur_state == LEGUP_F_tanhf_BB__21_155)) begin
		tanhf_altfp_subtract_32_0_op0 = 32'h3F800000;
	end
	/* tanhf: %27*/
	/*   %30 = fsub float -0.000000e+00, %29*/
	else if ((cur_state == LEGUP_F_tanhf_BB__27_183)) begin
		tanhf_altfp_subtract_32_0_op0 = 32'h80000000;
	end
	/* tanhf: %35*/
	/*   %36 = fsub float -0.000000e+00, %storemerge1*/
	else /* if ((cur_state == LEGUP_F_tanhf_BB__35_232)) */ begin
		tanhf_altfp_subtract_32_0_op0 = 32'h80000000;
	end
end
always @(*) begin
	/* tanhf: %21*/
	/*   %26 = fsub float 1.000000e+00, %25*/
	if ((cur_state == LEGUP_F_tanhf_BB__21_155)) begin
		tanhf_altfp_subtract_32_0_op1 = tanhf_21_25;
	end
	/* tanhf: %27*/
	/*   %30 = fsub float -0.000000e+00, %29*/
	else if ((cur_state == LEGUP_F_tanhf_BB__27_183)) begin
		tanhf_altfp_subtract_32_0_op1 = tanhf_27_29_reg;
	end
	/* tanhf: %35*/
	/*   %36 = fsub float -0.000000e+00, %storemerge1*/
	else /* if ((cur_state == LEGUP_F_tanhf_BB__35_232)) */ begin
		tanhf_altfp_subtract_32_0_op1 = tanhf_33_storemerge1_reg;
	end
end
always @(*) begin
	altfp_tanhf_21_26_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	tanhf_altfp_subtract_32_0 = altfp_subtractor_tanhf_21_26_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* tanhf: %37*/
	/*   ret float %.0*/
	if ((cur_state == LEGUP_F_tanhf_BB__37_247)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_enable_a = expm1f_memory_controller_enable_a;
	end
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_enable_a = expm1f_memory_controller_enable_a;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_enable_a = expm1f_memory_controller_enable_a;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_enable_a = expm1f_memory_controller_enable_a;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = expm1f_memory_controller_address_a;
	end
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = expm1f_memory_controller_address_a;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = expm1f_memory_controller_address_a;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = expm1f_memory_controller_address_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_write_enable_a = expm1f_memory_controller_write_enable_a;
	end
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_write_enable_a = expm1f_memory_controller_write_enable_a;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_write_enable_a = expm1f_memory_controller_write_enable_a;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_write_enable_a = expm1f_memory_controller_write_enable_a;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = expm1f_memory_controller_in_a;
	end
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = expm1f_memory_controller_in_a;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = expm1f_memory_controller_in_a;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = expm1f_memory_controller_in_a;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_size_a[1:0] = expm1f_memory_controller_size_a;
	end
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_size_a[1:0] = expm1f_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_size_a[1:0] = expm1f_memory_controller_size_a;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_size_a[1:0] = expm1f_memory_controller_size_a;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_enable_b = expm1f_memory_controller_enable_b;
	end
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_enable_b = expm1f_memory_controller_enable_b;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_enable_b = expm1f_memory_controller_enable_b;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_enable_b = expm1f_memory_controller_enable_b;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = expm1f_memory_controller_address_b;
	end
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = expm1f_memory_controller_address_b;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = expm1f_memory_controller_address_b;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = expm1f_memory_controller_address_b;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_write_enable_b = expm1f_memory_controller_write_enable_b;
	end
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_write_enable_b = expm1f_memory_controller_write_enable_b;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_write_enable_b = expm1f_memory_controller_write_enable_b;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_write_enable_b = expm1f_memory_controller_write_enable_b;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = expm1f_memory_controller_in_b;
	end
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = expm1f_memory_controller_in_b;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = expm1f_memory_controller_in_b;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = expm1f_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_size_b[1:0] = expm1f_memory_controller_size_b;
	end
	/* tanhf: %21*/
	/*   %23 = call fastcc float @expm1f(float %22) #2*/
	if ((cur_state == LEGUP_function_call_107)) begin
		memory_controller_size_b[1:0] = expm1f_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_size_b[1:0] = expm1f_memory_controller_size_b;
	end
	/* tanhf: %27*/
	/*   %29 = call fastcc float @expm1f(float %28) #2*/
	if ((cur_state == LEGUP_function_call_182)) begin
		memory_controller_size_b[1:0] = expm1f_memory_controller_size_b;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* tanhf: %37*/
	/*   ret float %.0*/
	if ((cur_state == LEGUP_F_tanhf_BB__37_247)) begin
		return_val <= tanhf_37_0_reg;
		if (start == 1'b0 && ^(tanhf_37_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_main_BB_fusionloop_bodydim0_1 = 9'd1;
parameter [8:0] LEGUP_F_main_BB_fusionloop_bodydim0_2 = 9'd2;
parameter [8:0] LEGUP_F_main_BB_fusionloop_bodydim0_3 = 9'd3;
parameter [8:0] LEGUP_F_main_BB_fusionloop_bodydim0_5 = 9'd5;
parameter [8:0] LEGUP_F_main_BB__6_6 = 9'd6;
parameter [8:0] LEGUP_F_main_BB__6_7 = 9'd7;
parameter [8:0] LEGUP_F_main_BB__6_8 = 9'd8;
parameter [8:0] LEGUP_F_main_BB__6_9 = 9'd9;
parameter [8:0] LEGUP_F_main_BB__6_10 = 9'd10;
parameter [8:0] LEGUP_F_main_BB__6_11 = 9'd11;
parameter [8:0] LEGUP_F_main_BB__6_12 = 9'd12;
parameter [8:0] LEGUP_F_main_BB__6_13 = 9'd13;
parameter [8:0] LEGUP_F_main_BB__6_14 = 9'd14;
parameter [8:0] LEGUP_F_main_BB__6_15 = 9'd15;
parameter [8:0] LEGUP_F_main_BB__6_16 = 9'd16;
parameter [8:0] LEGUP_F_main_BB__6_17 = 9'd17;
parameter [8:0] LEGUP_F_main_BB__6_18 = 9'd18;
parameter [8:0] LEGUP_F_main_BB__6_19 = 9'd19;
parameter [8:0] LEGUP_F_main_BB__6_20 = 9'd20;
parameter [8:0] LEGUP_F_main_BB__8_21 = 9'd21;
parameter [8:0] LEGUP_F_main_BB__10_22 = 9'd22;
parameter [8:0] LEGUP_F_main_BB__12_23 = 9'd23;
parameter [8:0] LEGUP_F_main_BB__14_24 = 9'd24;
parameter [8:0] LEGUP_F_main_BB_threadpresplit_25 = 9'd25;
parameter [8:0] LEGUP_F_main_BB__18_26 = 9'd26;
parameter [8:0] LEGUP_F_main_BB__20_27 = 9'd27;
parameter [8:0] LEGUP_F_main_BB__20_28 = 9'd28;
parameter [8:0] LEGUP_F_main_BB__20_29 = 9'd29;
parameter [8:0] LEGUP_F_main_BB__28_30 = 9'd30;
parameter [8:0] LEGUP_F_main_BB__28_31 = 9'd31;
parameter [8:0] LEGUP_F_main_BB__28_32 = 9'd32;
parameter [8:0] LEGUP_F_main_BB__28_33 = 9'd33;
parameter [8:0] LEGUP_F_main_BB__28_34 = 9'd34;
parameter [8:0] LEGUP_F_main_BB__28_35 = 9'd35;
parameter [8:0] LEGUP_F_main_BB__28_36 = 9'd36;
parameter [8:0] LEGUP_F_main_BB__28_37 = 9'd37;
parameter [8:0] LEGUP_F_main_BB__28_38 = 9'd38;
parameter [8:0] LEGUP_F_main_BB__28_39 = 9'd39;
parameter [8:0] LEGUP_F_main_BB__28_40 = 9'd40;
parameter [8:0] LEGUP_F_main_BB__28_41 = 9'd41;
parameter [8:0] LEGUP_F_main_BB__28_42 = 9'd42;
parameter [8:0] LEGUP_F_main_BB__28_43 = 9'd43;
parameter [8:0] LEGUP_F_main_BB__28_44 = 9'd44;
parameter [8:0] LEGUP_F_main_BB__28_45 = 9'd45;
parameter [8:0] LEGUP_F_main_BB__28_46 = 9'd46;
parameter [8:0] LEGUP_F_main_BB__28_47 = 9'd47;
parameter [8:0] LEGUP_F_main_BB__28_48 = 9'd48;
parameter [8:0] LEGUP_F_main_BB__28_49 = 9'd49;
parameter [8:0] LEGUP_F_main_BB__28_50 = 9'd50;
parameter [8:0] LEGUP_F_main_BB__28_51 = 9'd51;
parameter [8:0] LEGUP_F_main_BB__28_52 = 9'd52;
parameter [8:0] LEGUP_F_main_BB__28_53 = 9'd53;
parameter [8:0] LEGUP_F_main_BB__28_54 = 9'd54;
parameter [8:0] LEGUP_F_main_BB__28_55 = 9'd55;
parameter [8:0] LEGUP_F_main_BB__28_56 = 9'd56;
parameter [8:0] LEGUP_F_main_BB__28_57 = 9'd57;
parameter [8:0] LEGUP_F_main_BB__28_58 = 9'd58;
parameter [8:0] LEGUP_F_main_BB__28_59 = 9'd59;
parameter [8:0] LEGUP_F_main_BB__28_60 = 9'd60;
parameter [8:0] LEGUP_F_main_BB__28_61 = 9'd61;
parameter [8:0] LEGUP_F_main_BB__28_62 = 9'd62;
parameter [8:0] LEGUP_F_main_BB__28_63 = 9'd63;
parameter [8:0] LEGUP_F_main_BB__28_64 = 9'd64;
parameter [8:0] LEGUP_F_main_BB__28_65 = 9'd65;
parameter [8:0] LEGUP_F_main_BB__28_66 = 9'd66;
parameter [8:0] LEGUP_F_main_BB__28_67 = 9'd67;
parameter [8:0] LEGUP_F_main_BB__28_68 = 9'd68;
parameter [8:0] LEGUP_F_main_BB__28_69 = 9'd69;
parameter [8:0] LEGUP_F_main_BB__28_70 = 9'd70;
parameter [8:0] LEGUP_F_main_BB__28_71 = 9'd71;
parameter [8:0] LEGUP_F_main_BB__28_72 = 9'd72;
parameter [8:0] LEGUP_F_main_BB__28_73 = 9'd73;
parameter [8:0] LEGUP_F_main_BB__28_74 = 9'd74;
parameter [8:0] LEGUP_F_main_BB__28_75 = 9'd75;
parameter [8:0] LEGUP_F_main_BB__28_76 = 9'd76;
parameter [8:0] LEGUP_F_main_BB__28_77 = 9'd77;
parameter [8:0] LEGUP_F_main_BB__28_78 = 9'd78;
parameter [8:0] LEGUP_F_main_BB__28_79 = 9'd79;
parameter [8:0] LEGUP_F_main_BB__38_80 = 9'd80;
parameter [8:0] LEGUP_F_main_BB__38_81 = 9'd81;
parameter [8:0] LEGUP_F_main_BB__38_82 = 9'd82;
parameter [8:0] LEGUP_F_main_BB__38_83 = 9'd83;
parameter [8:0] LEGUP_F_main_BB__38_84 = 9'd84;
parameter [8:0] LEGUP_F_main_BB__38_85 = 9'd85;
parameter [8:0] LEGUP_F_main_BB__38_86 = 9'd86;
parameter [8:0] LEGUP_F_main_BB__38_87 = 9'd87;
parameter [8:0] LEGUP_F_main_BB__38_88 = 9'd88;
parameter [8:0] LEGUP_F_main_BB__38_89 = 9'd89;
parameter [8:0] LEGUP_F_main_BB__38_90 = 9'd90;
parameter [8:0] LEGUP_F_main_BB__38_91 = 9'd91;
parameter [8:0] LEGUP_F_main_BB__38_92 = 9'd92;
parameter [8:0] LEGUP_F_main_BB__38_93 = 9'd93;
parameter [8:0] LEGUP_F_main_BB__38_94 = 9'd94;
parameter [8:0] LEGUP_F_main_BB__38_95 = 9'd95;
parameter [8:0] LEGUP_F_main_BB__38_96 = 9'd96;
parameter [8:0] LEGUP_F_main_BB__38_97 = 9'd97;
parameter [8:0] LEGUP_F_main_BB__38_98 = 9'd98;
parameter [8:0] LEGUP_F_main_BB__38_99 = 9'd99;
parameter [8:0] LEGUP_F_main_BB__38_100 = 9'd100;
parameter [8:0] LEGUP_F_main_BB__38_101 = 9'd101;
parameter [8:0] LEGUP_F_main_BB__38_102 = 9'd102;
parameter [8:0] LEGUP_F_main_BB__38_103 = 9'd103;
parameter [8:0] LEGUP_F_main_BB__38_104 = 9'd104;
parameter [8:0] LEGUP_F_main_BB__38_105 = 9'd105;
parameter [8:0] LEGUP_F_main_BB__38_106 = 9'd106;
parameter [8:0] LEGUP_F_main_BB__38_107 = 9'd107;
parameter [8:0] LEGUP_F_main_BB__38_108 = 9'd108;
parameter [8:0] LEGUP_F_main_BB__40_109 = 9'd109;
parameter [8:0] LEGUP_F_main_BB__40_110 = 9'd110;
parameter [8:0] LEGUP_F_main_BB__40_111 = 9'd111;
parameter [8:0] LEGUP_F_main_BB__40_112 = 9'd112;
parameter [8:0] LEGUP_F_main_BB__40_113 = 9'd113;
parameter [8:0] LEGUP_F_main_BB__40_114 = 9'd114;
parameter [8:0] LEGUP_F_main_BB__40_115 = 9'd115;
parameter [8:0] LEGUP_F_main_BB__40_116 = 9'd116;
parameter [8:0] LEGUP_F_main_BB__40_117 = 9'd117;
parameter [8:0] LEGUP_F_main_BB__40_118 = 9'd118;
parameter [8:0] LEGUP_F_main_BB__40_119 = 9'd119;
parameter [8:0] LEGUP_F_main_BB__40_120 = 9'd120;
parameter [8:0] LEGUP_F_main_BB__40_121 = 9'd121;
parameter [8:0] LEGUP_F_main_BB__40_122 = 9'd122;
parameter [8:0] LEGUP_F_main_BB__40_123 = 9'd123;
parameter [8:0] LEGUP_F_main_BB__40_124 = 9'd124;
parameter [8:0] LEGUP_F_main_BB__44_125 = 9'd125;
parameter [8:0] LEGUP_F_main_BB__44_126 = 9'd126;
parameter [8:0] LEGUP_F_main_BB__44_127 = 9'd127;
parameter [8:0] LEGUP_F_main_BB__44_128 = 9'd128;
parameter [8:0] LEGUP_F_main_BB__44_129 = 9'd129;
parameter [8:0] LEGUP_F_main_BB__44_130 = 9'd130;
parameter [8:0] LEGUP_F_main_BB__44_131 = 9'd131;
parameter [8:0] LEGUP_F_main_BB__44_132 = 9'd132;
parameter [8:0] LEGUP_F_main_BB__44_133 = 9'd133;
parameter [8:0] LEGUP_F_main_BB__44_134 = 9'd134;
parameter [8:0] LEGUP_F_main_BB__44_135 = 9'd135;
parameter [8:0] LEGUP_F_main_BB__44_136 = 9'd136;
parameter [8:0] LEGUP_F_main_BB__44_137 = 9'd137;
parameter [8:0] LEGUP_F_main_BB__44_138 = 9'd138;
parameter [8:0] LEGUP_F_main_BB__44_139 = 9'd139;
parameter [8:0] LEGUP_F_main_BB__46_140 = 9'd140;
parameter [8:0] LEGUP_F_main_BB__46_141 = 9'd141;
parameter [8:0] LEGUP_F_main_BB__46_142 = 9'd142;
parameter [8:0] LEGUP_F_main_BB__46_143 = 9'd143;
parameter [8:0] LEGUP_F_main_BB__46_144 = 9'd144;
parameter [8:0] LEGUP_F_main_BB__46_145 = 9'd145;
parameter [8:0] LEGUP_F_main_BB__46_146 = 9'd146;
parameter [8:0] LEGUP_F_main_BB__46_147 = 9'd147;
parameter [8:0] LEGUP_F_main_BB__46_148 = 9'd148;
parameter [8:0] LEGUP_F_main_BB__46_149 = 9'd149;
parameter [8:0] LEGUP_F_main_BB__46_150 = 9'd150;
parameter [8:0] LEGUP_F_main_BB__46_151 = 9'd151;
parameter [8:0] LEGUP_F_main_BB__46_152 = 9'd152;
parameter [8:0] LEGUP_F_main_BB__46_153 = 9'd153;
parameter [8:0] LEGUP_F_main_BB__46_154 = 9'd154;
parameter [8:0] LEGUP_F_main_BB__46_155 = 9'd155;
parameter [8:0] LEGUP_F_main_BB__46_156 = 9'd156;
parameter [8:0] LEGUP_F_main_BB__46_157 = 9'd157;
parameter [8:0] LEGUP_F_main_BB__46_158 = 9'd158;
parameter [8:0] LEGUP_F_main_BB__46_159 = 9'd159;
parameter [8:0] LEGUP_F_main_BB__46_160 = 9'd160;
parameter [8:0] LEGUP_F_main_BB__46_161 = 9'd161;
parameter [8:0] LEGUP_F_main_BB__46_162 = 9'd162;
parameter [8:0] LEGUP_F_main_BB__46_163 = 9'd163;
parameter [8:0] LEGUP_F_main_BB__46_164 = 9'd164;
parameter [8:0] LEGUP_F_main_BB__46_165 = 9'd165;
parameter [8:0] LEGUP_F_main_BB__46_166 = 9'd166;
parameter [8:0] LEGUP_F_main_BB__46_167 = 9'd167;
parameter [8:0] LEGUP_F_main_BB__46_168 = 9'd168;
parameter [8:0] LEGUP_F_main_BB__46_169 = 9'd169;
parameter [8:0] LEGUP_F_main_BB__46_170 = 9'd170;
parameter [8:0] LEGUP_F_main_BB__46_171 = 9'd171;
parameter [8:0] LEGUP_F_main_BB__46_172 = 9'd172;
parameter [8:0] LEGUP_F_main_BB__46_173 = 9'd173;
parameter [8:0] LEGUP_F_main_BB__46_174 = 9'd174;
parameter [8:0] LEGUP_F_main_BB__46_175 = 9'd175;
parameter [8:0] LEGUP_F_main_BB__46_176 = 9'd176;
parameter [8:0] LEGUP_F_main_BB__46_177 = 9'd177;
parameter [8:0] LEGUP_F_main_BB__46_178 = 9'd178;
parameter [8:0] LEGUP_F_main_BB__46_179 = 9'd179;
parameter [8:0] LEGUP_F_main_BB__46_180 = 9'd180;
parameter [8:0] LEGUP_F_main_BB__46_181 = 9'd181;
parameter [8:0] LEGUP_F_main_BB__46_182 = 9'd182;
parameter [8:0] LEGUP_F_main_BB__46_183 = 9'd183;
parameter [8:0] LEGUP_F_main_BB__46_184 = 9'd184;
parameter [8:0] LEGUP_F_main_BB__46_185 = 9'd185;
parameter [8:0] LEGUP_F_main_BB__46_186 = 9'd186;
parameter [8:0] LEGUP_F_main_BB__46_187 = 9'd187;
parameter [8:0] LEGUP_F_main_BB__46_188 = 9'd188;
parameter [8:0] LEGUP_F_main_BB__46_189 = 9'd189;
parameter [8:0] LEGUP_F_main_BB__46_190 = 9'd190;
parameter [8:0] LEGUP_F_main_BB__46_191 = 9'd191;
parameter [8:0] LEGUP_F_main_BB__46_192 = 9'd192;
parameter [8:0] LEGUP_F_main_BB__46_193 = 9'd193;
parameter [8:0] LEGUP_F_main_BB__46_194 = 9'd194;
parameter [8:0] LEGUP_F_main_BB__46_195 = 9'd195;
parameter [8:0] LEGUP_F_main_BB__46_196 = 9'd196;
parameter [8:0] LEGUP_F_main_BB__46_197 = 9'd197;
parameter [8:0] LEGUP_F_main_BB__46_198 = 9'd198;
parameter [8:0] LEGUP_F_main_BB__46_199 = 9'd199;
parameter [8:0] LEGUP_F_main_BB__46_200 = 9'd200;
parameter [8:0] LEGUP_F_main_BB__46_201 = 9'd201;
parameter [8:0] LEGUP_F_main_BB__46_202 = 9'd202;
parameter [8:0] LEGUP_F_main_BB__46_203 = 9'd203;
parameter [8:0] LEGUP_F_main_BB__46_204 = 9'd204;
parameter [8:0] LEGUP_F_main_BB__46_205 = 9'd205;
parameter [8:0] LEGUP_F_main_BB__46_206 = 9'd206;
parameter [8:0] LEGUP_F_main_BB__46_207 = 9'd207;
parameter [8:0] LEGUP_F_main_BB__46_208 = 9'd208;
parameter [8:0] LEGUP_F_main_BB__46_209 = 9'd209;
parameter [8:0] LEGUP_F_main_BB__46_210 = 9'd210;
parameter [8:0] LEGUP_F_main_BB__46_211 = 9'd211;
parameter [8:0] LEGUP_F_main_BB__46_212 = 9'd212;
parameter [8:0] LEGUP_F_main_BB__46_213 = 9'd213;
parameter [8:0] LEGUP_F_main_BB__46_214 = 9'd214;
parameter [8:0] LEGUP_F_main_BB__46_215 = 9'd215;
parameter [8:0] LEGUP_F_main_BB__46_216 = 9'd216;
parameter [8:0] LEGUP_F_main_BB__46_217 = 9'd217;
parameter [8:0] LEGUP_F_main_BB__46_218 = 9'd218;
parameter [8:0] LEGUP_F_main_BB__46_219 = 9'd219;
parameter [8:0] LEGUP_F_main_BB__46_220 = 9'd220;
parameter [8:0] LEGUP_F_main_BB__46_221 = 9'd221;
parameter [8:0] LEGUP_F_main_BB__46_222 = 9'd222;
parameter [8:0] LEGUP_F_main_BB__46_223 = 9'd223;
parameter [8:0] LEGUP_F_main_BB__46_224 = 9'd224;
parameter [8:0] LEGUP_F_main_BB__46_225 = 9'd225;
parameter [8:0] LEGUP_F_main_BB__46_226 = 9'd226;
parameter [8:0] LEGUP_F_main_BB__46_227 = 9'd227;
parameter [8:0] LEGUP_F_main_BB__46_228 = 9'd228;
parameter [8:0] LEGUP_F_main_BB__46_229 = 9'd229;
parameter [8:0] LEGUP_F_main_BB__46_230 = 9'd230;
parameter [8:0] LEGUP_F_main_BB__46_231 = 9'd231;
parameter [8:0] LEGUP_F_main_BB__46_232 = 9'd232;
parameter [8:0] LEGUP_F_main_BB__46_233 = 9'd233;
parameter [8:0] LEGUP_F_main_BB__46_234 = 9'd234;
parameter [8:0] LEGUP_F_main_BB__46_235 = 9'd235;
parameter [8:0] LEGUP_F_main_BB__46_236 = 9'd236;
parameter [8:0] LEGUP_F_main_BB__46_237 = 9'd237;
parameter [8:0] LEGUP_F_main_BB__46_238 = 9'd238;
parameter [8:0] LEGUP_F_main_BB__46_239 = 9'd239;
parameter [8:0] LEGUP_F_main_BB__46_240 = 9'd240;
parameter [8:0] LEGUP_F_main_BB__46_241 = 9'd241;
parameter [8:0] LEGUP_F_main_BB__46_242 = 9'd242;
parameter [8:0] LEGUP_F_main_BB__46_243 = 9'd243;
parameter [8:0] LEGUP_F_main_BB__46_244 = 9'd244;
parameter [8:0] LEGUP_F_main_BB__46_245 = 9'd245;
parameter [8:0] LEGUP_F_main_BB__46_246 = 9'd246;
parameter [8:0] LEGUP_F_main_BB__46_247 = 9'd247;
parameter [8:0] LEGUP_F_main_BB__46_248 = 9'd248;
parameter [8:0] LEGUP_F_main_BB__46_249 = 9'd249;
parameter [8:0] LEGUP_F_main_BB__46_250 = 9'd250;
parameter [8:0] LEGUP_F_main_BB__46_251 = 9'd251;
parameter [8:0] LEGUP_F_main_BB__46_252 = 9'd252;
parameter [8:0] LEGUP_F_main_BB__46_253 = 9'd253;
parameter [8:0] LEGUP_F_main_BB__46_254 = 9'd254;
parameter [8:0] LEGUP_F_main_BB__46_255 = 9'd255;
parameter [8:0] LEGUP_F_main_BB__46_256 = 9'd256;
parameter [8:0] LEGUP_F_main_BB__46_257 = 9'd257;
parameter [8:0] LEGUP_F_main_BB__46_258 = 9'd258;
parameter [8:0] LEGUP_F_main_BB__46_259 = 9'd259;
parameter [8:0] LEGUP_F_main_BB__46_260 = 9'd260;
parameter [8:0] LEGUP_F_main_BB__46_261 = 9'd261;
parameter [8:0] LEGUP_F_main_BB__46_262 = 9'd262;
parameter [8:0] LEGUP_F_main_BB__46_263 = 9'd263;
parameter [8:0] LEGUP_F_main_BB__46_264 = 9'd264;
parameter [8:0] LEGUP_F_main_BB__46_265 = 9'd265;
parameter [8:0] LEGUP_F_main_BB__46_266 = 9'd266;
parameter [8:0] LEGUP_F_main_BB__46_267 = 9'd267;
parameter [8:0] LEGUP_F_main_BB__46_268 = 9'd268;
parameter [8:0] LEGUP_F_main_BB__46_269 = 9'd269;
parameter [8:0] LEGUP_F_main_BB__46_270 = 9'd270;
parameter [8:0] LEGUP_F_main_BB__46_271 = 9'd271;
parameter [8:0] LEGUP_F_main_BB__46_272 = 9'd272;
parameter [8:0] LEGUP_F_main_BB__46_273 = 9'd273;
parameter [8:0] LEGUP_F_main_BB__46_274 = 9'd274;
parameter [8:0] LEGUP_F_main_BB__46_275 = 9'd275;
parameter [8:0] LEGUP_F_main_BB__46_276 = 9'd276;
parameter [8:0] LEGUP_F_main_BB__46_277 = 9'd277;
parameter [8:0] LEGUP_F_main_BB__46_278 = 9'd278;
parameter [8:0] LEGUP_F_main_BB__46_279 = 9'd279;
parameter [8:0] LEGUP_F_main_BB__46_280 = 9'd280;
parameter [8:0] LEGUP_F_main_BB__46_281 = 9'd281;
parameter [8:0] LEGUP_F_main_BB__46_282 = 9'd282;
parameter [8:0] LEGUP_F_main_BB__46_283 = 9'd283;
parameter [8:0] LEGUP_F_main_BB__46_284 = 9'd284;
parameter [8:0] LEGUP_F_main_BB__46_285 = 9'd285;
parameter [8:0] LEGUP_F_main_BB__46_286 = 9'd286;
parameter [8:0] LEGUP_F_main_BB__46_287 = 9'd287;
parameter [8:0] LEGUP_F_main_BB__60_288 = 9'd288;
parameter [8:0] LEGUP_F_main_BB__60_289 = 9'd289;
parameter [8:0] LEGUP_F_main_BB__60_290 = 9'd290;
parameter [8:0] LEGUP_F_main_BB__60_291 = 9'd291;
parameter [8:0] LEGUP_F_main_BB__60_292 = 9'd292;
parameter [8:0] LEGUP_F_main_BB__60_293 = 9'd293;
parameter [8:0] LEGUP_F_main_BB__60_294 = 9'd294;
parameter [8:0] LEGUP_F_main_BB__60_295 = 9'd295;
parameter [8:0] LEGUP_F_main_BB__60_296 = 9'd296;
parameter [8:0] LEGUP_F_main_BB__60_297 = 9'd297;
parameter [8:0] LEGUP_F_main_BB__60_298 = 9'd298;
parameter [8:0] LEGUP_F_main_BB__60_299 = 9'd299;
parameter [8:0] LEGUP_F_main_BB__60_300 = 9'd300;
parameter [8:0] LEGUP_F_main_BB__60_301 = 9'd301;
parameter [8:0] LEGUP_F_main_BB__60_302 = 9'd302;
parameter [8:0] LEGUP_F_main_BB__60_303 = 9'd303;
parameter [8:0] LEGUP_F_main_BB__60_304 = 9'd304;
parameter [8:0] LEGUP_F_main_BB__60_305 = 9'd305;
parameter [8:0] LEGUP_F_main_BB__60_306 = 9'd306;
parameter [8:0] LEGUP_F_main_BB__60_307 = 9'd307;
parameter [8:0] LEGUP_F_main_BB__60_308 = 9'd308;
parameter [8:0] LEGUP_F_main_BB__60_309 = 9'd309;
parameter [8:0] LEGUP_F_main_BB__60_310 = 9'd310;
parameter [8:0] LEGUP_F_main_BB__60_311 = 9'd311;
parameter [8:0] LEGUP_F_main_BB__60_312 = 9'd312;
parameter [8:0] LEGUP_F_main_BB__60_313 = 9'd313;
parameter [8:0] LEGUP_F_main_BB__60_314 = 9'd314;
parameter [8:0] LEGUP_F_main_BB__60_315 = 9'd315;
parameter [8:0] LEGUP_F_main_BB__60_316 = 9'd316;
parameter [8:0] LEGUP_F_main_BB__60_317 = 9'd317;
parameter [8:0] LEGUP_F_main_BB__60_318 = 9'd318;
parameter [8:0] LEGUP_F_main_BB__60_319 = 9'd319;
parameter [8:0] LEGUP_F_main_BB__60_320 = 9'd320;
parameter [8:0] LEGUP_F_main_BB__60_321 = 9'd321;
parameter [8:0] LEGUP_F_main_BB__60_322 = 9'd322;
parameter [8:0] LEGUP_F_main_BB__60_323 = 9'd323;
parameter [8:0] LEGUP_F_main_BB__60_324 = 9'd324;
parameter [8:0] LEGUP_F_main_BB__60_325 = 9'd325;
parameter [8:0] LEGUP_F_main_BB__60_326 = 9'd326;
parameter [8:0] LEGUP_F_main_BB__60_327 = 9'd327;
parameter [8:0] LEGUP_F_main_BB__60_328 = 9'd328;
parameter [8:0] LEGUP_F_main_BB__60_329 = 9'd329;
parameter [8:0] LEGUP_F_main_BB__60_330 = 9'd330;
parameter [8:0] LEGUP_F_main_BB__60_331 = 9'd331;
parameter [8:0] LEGUP_F_main_BB__60_332 = 9'd332;
parameter [8:0] LEGUP_F_main_BB__60_333 = 9'd333;
parameter [8:0] LEGUP_F_main_BB__60_334 = 9'd334;
parameter [8:0] LEGUP_F_main_BB__60_335 = 9'd335;
parameter [8:0] LEGUP_F_main_BB__60_336 = 9'd336;
parameter [8:0] LEGUP_F_main_BB__60_337 = 9'd337;
parameter [8:0] LEGUP_F_main_BB__60_338 = 9'd338;
parameter [8:0] LEGUP_F_main_BB__60_339 = 9'd339;
parameter [8:0] LEGUP_F_main_BB__60_340 = 9'd340;
parameter [8:0] LEGUP_F_main_BB__60_341 = 9'd341;
parameter [8:0] LEGUP_F_main_BB__60_342 = 9'd342;
parameter [8:0] LEGUP_F_main_BB__60_343 = 9'd343;
parameter [8:0] LEGUP_F_main_BB__60_344 = 9'd344;
parameter [8:0] LEGUP_F_main_BB__60_345 = 9'd345;
parameter [8:0] LEGUP_F_main_BB__60_346 = 9'd346;
parameter [8:0] LEGUP_F_main_BB__60_347 = 9'd347;
parameter [8:0] LEGUP_F_main_BB__60_348 = 9'd348;
parameter [8:0] LEGUP_F_main_BB__60_349 = 9'd349;
parameter [8:0] LEGUP_F_main_BB__60_350 = 9'd350;
parameter [8:0] LEGUP_F_main_BB__60_351 = 9'd351;
parameter [8:0] LEGUP_F_main_BB__60_352 = 9'd352;
parameter [8:0] LEGUP_F_main_BB__60_353 = 9'd353;
parameter [8:0] LEGUP_F_main_BB__60_354 = 9'd354;
parameter [8:0] LEGUP_F_main_BB__60_355 = 9'd355;
parameter [8:0] LEGUP_F_main_BB__60_356 = 9'd356;
parameter [8:0] LEGUP_F_main_BB__60_357 = 9'd357;
parameter [8:0] LEGUP_F_main_BB__60_358 = 9'd358;
parameter [8:0] LEGUP_F_main_BB__60_359 = 9'd359;
parameter [8:0] LEGUP_F_main_BB__60_360 = 9'd360;
parameter [8:0] LEGUP_F_main_BB__60_361 = 9'd361;
parameter [8:0] LEGUP_F_main_BB__60_362 = 9'd362;
parameter [8:0] LEGUP_F_main_BB__60_363 = 9'd363;
parameter [8:0] LEGUP_F_main_BB__65_364 = 9'd364;
parameter [8:0] LEGUP_F_main_BB__65_365 = 9'd365;
parameter [8:0] LEGUP_F_main_BB__65_366 = 9'd366;
parameter [8:0] LEGUP_F_main_BB__65_367 = 9'd367;
parameter [8:0] LEGUP_F_main_BB__65_368 = 9'd368;
parameter [8:0] LEGUP_F_main_BB__65_369 = 9'd369;
parameter [8:0] LEGUP_F_main_BB__65_370 = 9'd370;
parameter [8:0] LEGUP_F_main_BB__65_371 = 9'd371;
parameter [8:0] LEGUP_F_main_BB__65_372 = 9'd372;
parameter [8:0] LEGUP_F_main_BB__65_373 = 9'd373;
parameter [8:0] LEGUP_F_main_BB__65_374 = 9'd374;
parameter [8:0] LEGUP_F_main_BB__65_375 = 9'd375;
parameter [8:0] LEGUP_F_main_BB__65_376 = 9'd376;
parameter [8:0] LEGUP_F_main_BB__65_377 = 9'd377;
parameter [8:0] LEGUP_F_main_BB__65_378 = 9'd378;
parameter [8:0] LEGUP_F_main_BB__65_379 = 9'd379;
parameter [8:0] LEGUP_F_main_BB__65_380 = 9'd380;
parameter [8:0] LEGUP_F_main_BB__65_381 = 9'd381;
parameter [8:0] LEGUP_F_main_BB__65_382 = 9'd382;
parameter [8:0] LEGUP_F_main_BB__65_383 = 9'd383;
parameter [8:0] LEGUP_F_main_BB__65_384 = 9'd384;
parameter [8:0] LEGUP_F_main_BB__65_385 = 9'd385;
parameter [8:0] LEGUP_F_main_BB__65_386 = 9'd386;
parameter [8:0] LEGUP_F_main_BB__65_387 = 9'd387;
parameter [8:0] LEGUP_F_main_BB__65_388 = 9'd388;
parameter [8:0] LEGUP_F_main_BB__65_389 = 9'd389;
parameter [8:0] LEGUP_F_main_BB__65_390 = 9'd390;
parameter [8:0] LEGUP_F_main_BB__65_391 = 9'd391;
parameter [8:0] LEGUP_F_main_BB__65_392 = 9'd392;
parameter [8:0] LEGUP_F_main_BB__65_393 = 9'd393;
parameter [8:0] LEGUP_F_main_BB__65_394 = 9'd394;
parameter [8:0] LEGUP_F_main_BB__65_395 = 9'd395;
parameter [8:0] LEGUP_F_main_BB__65_396 = 9'd396;
parameter [8:0] LEGUP_F_main_BB__65_397 = 9'd397;
parameter [8:0] LEGUP_F_main_BB__65_398 = 9'd398;
parameter [8:0] LEGUP_F_main_BB__65_399 = 9'd399;
parameter [8:0] LEGUP_F_main_BB__65_400 = 9'd400;
parameter [8:0] LEGUP_F_main_BB__65_401 = 9'd401;
parameter [8:0] LEGUP_F_main_BB__65_402 = 9'd402;
parameter [8:0] LEGUP_F_main_BB__65_403 = 9'd403;
parameter [8:0] LEGUP_F_main_BB__65_404 = 9'd404;
parameter [8:0] LEGUP_F_main_BB__65_405 = 9'd405;
parameter [8:0] LEGUP_F_main_BB__65_406 = 9'd406;
parameter [8:0] LEGUP_F_main_BB__65_407 = 9'd407;
parameter [8:0] LEGUP_F_main_BB__65_408 = 9'd408;
parameter [8:0] LEGUP_F_main_BB__65_409 = 9'd409;
parameter [8:0] LEGUP_F_main_BB__65_410 = 9'd410;
parameter [8:0] LEGUP_F_main_BB__65_411 = 9'd411;
parameter [8:0] LEGUP_F_main_BB__65_412 = 9'd412;
parameter [8:0] LEGUP_F_main_BB__65_413 = 9'd413;
parameter [8:0] LEGUP_F_main_BB__65_414 = 9'd414;
parameter [8:0] LEGUP_F_main_BB__65_415 = 9'd415;
parameter [8:0] LEGUP_F_main_BB__65_416 = 9'd416;
parameter [8:0] LEGUP_F_main_BB__65_417 = 9'd417;
parameter [8:0] LEGUP_F_main_BB__65_418 = 9'd418;
parameter [8:0] LEGUP_F_main_BB__65_419 = 9'd419;
parameter [8:0] LEGUP_F_main_BB__65_420 = 9'd420;
parameter [8:0] LEGUP_F_main_BB__65_421 = 9'd421;
parameter [8:0] LEGUP_F_main_BB__65_422 = 9'd422;
parameter [8:0] LEGUP_F_main_BB__65_423 = 9'd423;
parameter [8:0] LEGUP_F_main_BB__65_424 = 9'd424;
parameter [8:0] LEGUP_F_main_BB__65_425 = 9'd425;
parameter [8:0] LEGUP_F_main_BB__65_426 = 9'd426;
parameter [8:0] LEGUP_F_main_BB__65_427 = 9'd427;
parameter [8:0] LEGUP_F_main_BB__65_428 = 9'd428;
parameter [8:0] LEGUP_F_main_BB__65_429 = 9'd429;
parameter [8:0] LEGUP_F_main_BB__65_430 = 9'd430;
parameter [8:0] LEGUP_F_main_BB__65_431 = 9'd431;
parameter [8:0] LEGUP_F_main_BB__65_432 = 9'd432;
parameter [8:0] LEGUP_F_main_BB__65_433 = 9'd433;
parameter [8:0] LEGUP_F_main_BB__65_434 = 9'd434;
parameter [8:0] LEGUP_F_main_BB__65_435 = 9'd435;
parameter [8:0] LEGUP_F_main_BB__65_436 = 9'd436;
parameter [8:0] LEGUP_F_main_BB__65_437 = 9'd437;
parameter [8:0] LEGUP_F_main_BB__65_438 = 9'd438;
parameter [8:0] LEGUP_F_main_BB__65_439 = 9'd439;
parameter [8:0] LEGUP_F_main_BB__65_440 = 9'd440;
parameter [8:0] LEGUP_F_main_BB__65_441 = 9'd441;
parameter [8:0] LEGUP_F_main_BB__65_442 = 9'd442;
parameter [8:0] LEGUP_F_main_BB__65_443 = 9'd443;
parameter [8:0] LEGUP_F_main_BB__65_444 = 9'd444;
parameter [8:0] LEGUP_F_main_BB__65_445 = 9'd445;
parameter [8:0] LEGUP_F_main_BB__65_446 = 9'd446;
parameter [8:0] LEGUP_F_main_BB__65_447 = 9'd447;
parameter [8:0] LEGUP_F_main_BB__65_448 = 9'd448;
parameter [8:0] LEGUP_F_main_BB__65_449 = 9'd449;
parameter [8:0] LEGUP_F_main_BB__65_450 = 9'd450;
parameter [8:0] LEGUP_F_main_BB__65_451 = 9'd451;
parameter [8:0] LEGUP_F_main_BB__65_452 = 9'd452;
parameter [8:0] LEGUP_F_main_BB__65_453 = 9'd453;
parameter [8:0] LEGUP_F_main_BB__74_454 = 9'd454;
parameter [8:0] LEGUP_F_main_BB__77_455 = 9'd455;
parameter [8:0] LEGUP_F_main_BB__77_456 = 9'd456;
parameter [8:0] LEGUP_F_main_BB__77_457 = 9'd457;
parameter [8:0] LEGUP_F_main_BB__77_458 = 9'd458;
parameter [8:0] LEGUP_F_main_BB__77_459 = 9'd459;
parameter [8:0] LEGUP_F_main_BB__77_460 = 9'd460;
parameter [8:0] LEGUP_F_main_BB__77_461 = 9'd461;
parameter [8:0] LEGUP_F_main_BB__77_462 = 9'd462;
parameter [8:0] LEGUP_F_main_BB__77_463 = 9'd463;
parameter [8:0] LEGUP_F_main_BB__77_464 = 9'd464;
parameter [8:0] LEGUP_F_main_BB__77_465 = 9'd465;
parameter [8:0] LEGUP_F_main_BB__77_466 = 9'd466;
parameter [8:0] LEGUP_F_main_BB_expfexit_467 = 9'd467;
parameter [8:0] LEGUP_F_main_BB_expfexit_468 = 9'd468;
parameter [8:0] LEGUP_F_main_BB_expfexit_469 = 9'd469;
parameter [8:0] LEGUP_F_main_BB_expfexit_470 = 9'd470;
parameter [8:0] LEGUP_F_main_BB_expfexit_471 = 9'd471;
parameter [8:0] LEGUP_F_main_BB_expfexit_472 = 9'd472;
parameter [8:0] LEGUP_F_main_BB_expfexit_473 = 9'd473;
parameter [8:0] LEGUP_F_main_BB_expfexit_474 = 9'd474;
parameter [8:0] LEGUP_F_main_BB_expfexit_475 = 9'd475;
parameter [8:0] LEGUP_F_main_BB_expfexit_476 = 9'd476;
parameter [8:0] LEGUP_F_main_BB_expfexit_477 = 9'd477;
parameter [8:0] LEGUP_F_main_BB_expfexit_478 = 9'd478;
parameter [8:0] LEGUP_F_main_BB_expfexit_480 = 9'd480;
parameter [8:0] LEGUP_F_main_BB_expfexit_481 = 9'd481;
parameter [8:0] LEGUP_F_main_BB_expfexit_482 = 9'd482;
parameter [8:0] LEGUP_F_main_BB_expfexit_483 = 9'd483;
parameter [8:0] LEGUP_F_main_BB_expfexit_484 = 9'd484;
parameter [8:0] LEGUP_F_main_BB_expfexit_485 = 9'd485;
parameter [8:0] LEGUP_F_main_BB_expfexit_486 = 9'd486;
parameter [8:0] LEGUP_F_main_BB_expfexit_487 = 9'd487;
parameter [8:0] LEGUP_F_main_BB_expfexit_488 = 9'd488;
parameter [8:0] LEGUP_F_main_BB_expfexit_489 = 9'd489;
parameter [8:0] LEGUP_F_main_BB_expfexit_490 = 9'd490;
parameter [8:0] LEGUP_F_main_BB_expfexit_491 = 9'd491;
parameter [8:0] LEGUP_F_main_BB_expfexit_492 = 9'd492;
parameter [8:0] LEGUP_F_main_BB_expfexit_493 = 9'd493;
parameter [8:0] LEGUP_F_main_BB_expfexit_494 = 9'd494;
parameter [8:0] LEGUP_F_main_BB_expfexit_495 = 9'd495;
parameter [8:0] LEGUP_F_main_BB_expfexit_496 = 9'd496;
parameter [8:0] LEGUP_F_main_BB_expfexit_497 = 9'd497;
parameter [8:0] LEGUP_F_main_BB_expfexit_498 = 9'd498;
parameter [8:0] LEGUP_F_main_BB_expfexit_499 = 9'd499;
parameter [8:0] LEGUP_F_main_BB_expfexit_500 = 9'd500;
parameter [8:0] LEGUP_F_main_BB_expfexit_501 = 9'd501;
parameter [8:0] LEGUP_F_main_BB_expfexit_502 = 9'd502;
parameter [8:0] LEGUP_F_main_BB_expfexit_503 = 9'd503;
parameter [8:0] LEGUP_F_main_BB_expfexit_504 = 9'd504;
parameter [8:0] LEGUP_F_main_BB_expfexit_505 = 9'd505;
parameter [8:0] LEGUP_F_main_BB_expfexit_506 = 9'd506;
parameter [8:0] LEGUP_F_main_BB_fusionloop_exitdim0_507 = 9'd507;
parameter [8:0] LEGUP_F_main_BB_fusionloop_exitdim0_508 = 9'd508;
parameter [8:0] LEGUP_F_main_BB_fusionloop_exitdim0_509 = 9'd509;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 55'd0};
parameter [8:0] LEGUP_function_call_4 = 9'd4;
parameter [8:0] LEGUP_function_call_479 = 9'd479;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [8:0] cur_state;
reg [8:0] next_state;
reg [31:0] main_fusionloop_bodydim0_loii0;
reg [31:0] main_fusionloop_bodydim0_loii0_reg;
reg [31:0] main_fusionloop_bodydim0_hiii0;
reg [31:0] main_fusionloop_bodydim0_hiii0_reg;
reg [63:0] main_fusionloop_bodydim0_fusionindvardim02;
reg [63:0] main_fusionloop_bodydim0_fusionindvardim02_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fusionloop_bodydim0_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fusionloop_bodydim0_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_fusionloop_bodydim0_scevgep2;
reg [31:0] main_fusionloop_bodydim0_0;
reg [31:0] main_fusionloop_bodydim0_1;
reg [31:0] main_fusionloop_bodydim0_1_reg;
reg [31:0] main_fusionloop_bodydim0_2;
reg [31:0] main_fusionloop_bodydim0_2_reg;
reg [31:0] main_fusionloop_bodydim0_3;
reg [31:0] main_fusionloop_bodydim0_3_reg;
reg [31:0] main_fusionloop_bodydim0_4;
reg [31:0] main_fusionloop_bodydim0_4_reg;
reg  main_fusionloop_bodydim0_5;
reg [31:0] main_6_7;
reg  main_8_9;
reg  main_10_11;
reg [31:0] main_10_;
reg  main_12_13;
reg  main_14_15;
reg  main_14_16;
reg  main_14_orcond;
reg  main_threadpresplit_17;
reg  main_18_19;
reg [63:0] main_20_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_22;
reg [31:0] main_20_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_20_24;
reg [31:0] main_20_25;
reg [31:0] main_20_26;
reg [31:0] main_20_27;
reg [31:0] main_20_27_reg;
reg [31:0] main_28_29;
reg [63:0] main_28_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_31;
reg [31:0] main_28_32;
reg [31:0] main_28_32_reg;
reg [31:0] main_28_33;
reg [31:0] main_28_34;
reg [31:0] main_28_34_reg;
reg [31:0] main_28_35;
reg [31:0] main_28_35_reg;
reg [31:0] main_28_36;
reg [31:0] main_28_36_reg;
reg [31:0] main_28_37;
reg [31:0] main_28_37_reg;
reg [31:0] main_38_kii0;
reg [31:0] main_38_kii0_reg;
reg [31:0] main_38_loii1;
reg [31:0] main_38_loii1_reg;
reg [31:0] main_38_pn;
reg [31:0] main_38_pn_reg;
reg [31:0] main_38_hiii1;
reg [31:0] main_38_hiii1_reg;
reg [31:0] main_38_39;
reg [31:0] main_38_39_reg;
reg  main_40_41;
reg  main_40_41_reg;
reg [31:0] main_40_42;
reg  main_40_43;
reg  main_40_orcond50;
reg [31:0] main_44_45;
reg [31:0] main_46_kii1;
reg [31:0] main_46_kii1_reg;
reg [31:0] main_46_loii2;
reg [31:0] main_46_loii2_reg;
reg [31:0] main_46_hiii2;
reg [31:0] main_46_hiii2_reg;
reg [31:0] main_46_048;
reg [31:0] main_46_048_reg;
reg [31:0] main_46_47;
reg [31:0] main_46_47_reg;
reg [31:0] main_46_48;
reg [31:0] main_46_49;
reg [31:0] main_46_50;
reg [31:0] main_46_51;
reg [31:0] main_46_52;
reg [31:0] main_46_53;
reg [31:0] main_46_54;
reg [31:0] main_46_55;
reg [31:0] main_46_56;
reg [31:0] main_46_57;
reg [31:0] main_46_57_reg;
reg  main_46_58;
reg  main_46_58_reg;
reg [31:0] main_46_59;
reg [31:0] main_46_59_reg;
reg [31:0] main_60_61;
reg [31:0] main_60_62;
reg [31:0] main_60_63;
reg [31:0] main_60_64;
reg [31:0] main_65_66;
reg [31:0] main_65_67;
reg [31:0] main_65_68;
reg [31:0] main_65_69;
reg [31:0] main_65_70;
reg  main_65_71;
reg  main_65_71_reg;
reg [31:0] main_65_72;
reg [31:0] main_65_72_reg;
reg [31:0] main_65_73;
reg [31:0] main_65_73_reg;
reg [31:0] main_74_75;
reg [31:0] main_74_76;
reg [31:0] main_77_78;
reg [31:0] main_77_79;
reg [31:0] main_77_80;
reg [31:0] main_77_81;
reg [31:0] main_expfexit_loii3;
reg [31:0] main_expfexit_loii3_reg;
reg [31:0] main_expfexit_hiii3;
reg [31:0] main_expfexit_hiii3_reg;
reg [31:0] main_expfexit_0;
reg [31:0] main_expfexit_0_reg;
reg  main_expfexit_82;
reg  main_expfexit_82_reg;
reg [31:0] main_expfexit_op;
reg [31:0] main_expfexit_83;
reg [31:0] main_expfexit_84;
reg [31:0] main_expfexit_84_reg;
reg [31:0] main_expfexit_85;
reg [31:0] main_expfexit_86;
reg [63:0] main_expfexit_87;
reg [63:0] main_expfexit_87_reg;
reg  main_expfexit_exitcond1;
reg  main_expfexit_exitcond1_reg;
reg [31:0] main_fusionloop_exitdim0_leflow_retval;
reg  tanhf_start;
reg [31:0] tanhf_arg_x;
wire  tanhf_memory_controller_enable_a;
wire  tanhf_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tanhf_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] tanhf_memory_controller_in_a;
wire [1:0] tanhf_memory_controller_size_a;
wire  tanhf_memory_controller_enable_b;
wire  tanhf_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tanhf_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] tanhf_memory_controller_in_b;
wire [1:0] tanhf_memory_controller_size_b;
reg  tanhf_finish_final;
reg  tanhf_finish_reg;
wire  tanhf_finish;
wire [31:0] tanhf_return_val;
reg [31:0] tanhf_return_val_reg;
reg  legup_function_call;
reg [31:0] main_altfp_subtract_32_0_op0;
reg [31:0] main_altfp_subtract_32_0_op1;
wire [31:0] altfp_subtractor_main_38_39_out;
reg  altfp_main_38_39_en;
reg [31:0] main_altfp_subtract_32_0;
reg [31:0] main_altfp_add_32_0_op0;
reg [31:0] main_altfp_add_32_0_op1;
wire [31:0] altfp_adder_main_40_42_out;
reg  altfp_main_40_42_en;
reg [31:0] main_altfp_add_32_0;
reg [31:0] main_altfp_multiply_32_0_op0;
reg [31:0] main_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_main_46_47_out;
reg  altfp_main_46_47_en;
reg [31:0] main_altfp_multiply_32_0;
reg [31:0] main_altfp_fptosi_32_0_op0;
wire [31:0] altfp_fptosi32_main_28_34_out;
reg  altfp_main_28_34_en;
reg [31:0] main_altfp_fptosi_32_0;
reg [31:0] main_altfp_sitofp_32_0_op0;
wire [31:0] altfp_sitofp32_main_28_35_out;
reg  altfp_main_28_35_en;
reg [31:0] main_altfp_sitofp_32_0;
reg [31:0] main_altfp_divide_32_0_op0;
reg [31:0] main_altfp_divide_32_0_op1;
wire [31:0] altfp_divider_main_60_62_out;
reg  altfp_main_60_62_en;
reg [31:0] main_altfp_divide_32_0;
wire  altfp_compare32_1_main_40_43_out;
reg  altfp_main_40_43_en;
wire  main_40_43_unused;
wire  altfp_compare32_1_main_expfexit_82_out;
reg  altfp_main_expfexit_82_en;
wire  main_expfexit_82_unused;

/*   %39 = fsub float %hi.i.i.1, %lo.i.i.1*/
altfp_subtractor_14 altfp_subtractor_14_main_38_39 (
	.result (altfp_subtractor_main_38_39_out),
	.dataa (main_altfp_subtract_32_0_op0),
	.datab (main_altfp_subtract_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_38_39_en)
);


/*   %42 = fadd float %1, 0x46293E5940000000*/
altfp_adder_14 altfp_adder_14_main_40_42 (
	.result (altfp_adder_main_40_42_out),
	.dataa (main_altfp_add_32_0_op0),
	.datab (main_altfp_add_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_40_42_en)
);


/*   %47 = fmul float %.048, %.048*/
altfp_multiplier_11 altfp_multiplier_11_main_46_47 (
	.result (altfp_multiplier_main_46_47_out),
	.dataa (main_altfp_multiply_32_0_op0),
	.datab (main_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_46_47_en)
);


/*   %34 = fptosi float %33 to i32*/
altfp_fptosi32_6 altfp_fptosi32_6_main_28_34 (
	.result (altfp_fptosi32_main_28_34_out),
	.dataa (main_altfp_fptosi_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_28_34_en)
);


/*   %35 = sitofp i32 %34 to float*/
altfp_sitofp32_6 altfp_sitofp32_6_main_28_35 (
	.result (altfp_sitofp32_main_28_35_out),
	.dataa (main_altfp_sitofp_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_28_35_en)
);


/*   %62 = fdiv float %59, %61*/
altfp_divider_33 altfp_divider_33_main_60_62 (
	.result (altfp_divider_main_60_62_out),
	.dataa (main_altfp_divide_32_0_op0),
	.datab (main_altfp_divide_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_60_62_en)
);


/*   %43 = fcmp ogt float %42, 1.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_40_43 (
	.dataa (main_40_42),
	.datab (32'h3F800000),
	.clock (clk),
	.clk_en (altfp_main_40_43_en),
	.aeb (main_40_43_unused),
	.aneb (main_40_43_unused),
	.alb (main_40_43_unused),
	.aleb (main_40_43_unused),
	.agb (altfp_compare32_1_main_40_43_out),
	.ageb (main_40_43_unused),
	.unordered (main_40_43_unused)
);


/*   %82 = fcmp ole float %.0, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_expfexit_82 (
	.dataa (main_expfexit_0_reg),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_expfexit_82_en),
	.aeb (main_expfexit_82_unused),
	.aneb (main_expfexit_82_unused),
	.alb (main_expfexit_82_unused),
	.aleb (altfp_compare32_1_main_expfexit_82_out),
	.agb (main_expfexit_82_unused),
	.ageb (main_expfexit_82_unused),
	.unordered (main_expfexit_82_unused)
);



tanhf tanhf (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (tanhf_memory_controller_enable_a),
	.memory_controller_address_a (tanhf_memory_controller_address_a),
	.memory_controller_write_enable_a (tanhf_memory_controller_write_enable_a),
	.memory_controller_in_a (tanhf_memory_controller_in_a),
	.memory_controller_size_a (tanhf_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (tanhf_memory_controller_enable_b),
	.memory_controller_address_b (tanhf_memory_controller_address_b),
	.memory_controller_write_enable_b (tanhf_memory_controller_write_enable_b),
	.memory_controller_in_b (tanhf_memory_controller_in_b),
	.memory_controller_size_b (tanhf_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (tanhf_start),
	.finish (tanhf_finish),
	.return_val (tanhf_return_val),
	.arg_x (tanhf_arg_x)
);

defparam
	tanhf.tag_offset = tag_offset;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_1;
LEGUP_F_main_BB__10_22:
		next_state = LEGUP_F_main_BB_expfexit_467;
LEGUP_F_main_BB__12_23:
	if ((main_12_13 == 1'd1))
		next_state = LEGUP_F_main_BB_expfexit_467;
	else if ((main_12_13 == 1'd0))
		next_state = LEGUP_F_main_BB__14_24;
LEGUP_F_main_BB__14_24:
	if ((main_14_orcond == 1'd1))
		next_state = LEGUP_F_main_BB_expfexit_467;
	else if ((main_14_orcond == 1'd0))
		next_state = LEGUP_F_main_BB_threadpresplit_25;
LEGUP_F_main_BB__18_26:
	if ((main_18_19 == 1'd1))
		next_state = LEGUP_F_main_BB__20_27;
	else if ((main_18_19 == 1'd0))
		next_state = LEGUP_F_main_BB__28_30;
LEGUP_F_main_BB__20_27:
		next_state = LEGUP_F_main_BB__20_28;
LEGUP_F_main_BB__20_28:
		next_state = LEGUP_F_main_BB__20_29;
LEGUP_F_main_BB__20_29:
		next_state = LEGUP_F_main_BB__38_80;
LEGUP_F_main_BB__28_30:
		next_state = LEGUP_F_main_BB__28_31;
LEGUP_F_main_BB__28_31:
		next_state = LEGUP_F_main_BB__28_32;
LEGUP_F_main_BB__28_32:
		next_state = LEGUP_F_main_BB__28_33;
LEGUP_F_main_BB__28_33:
		next_state = LEGUP_F_main_BB__28_34;
LEGUP_F_main_BB__28_34:
		next_state = LEGUP_F_main_BB__28_35;
LEGUP_F_main_BB__28_35:
		next_state = LEGUP_F_main_BB__28_36;
LEGUP_F_main_BB__28_36:
		next_state = LEGUP_F_main_BB__28_37;
LEGUP_F_main_BB__28_37:
		next_state = LEGUP_F_main_BB__28_38;
LEGUP_F_main_BB__28_38:
		next_state = LEGUP_F_main_BB__28_39;
LEGUP_F_main_BB__28_39:
		next_state = LEGUP_F_main_BB__28_40;
LEGUP_F_main_BB__28_40:
		next_state = LEGUP_F_main_BB__28_41;
LEGUP_F_main_BB__28_41:
		next_state = LEGUP_F_main_BB__28_42;
LEGUP_F_main_BB__28_42:
		next_state = LEGUP_F_main_BB__28_43;
LEGUP_F_main_BB__28_43:
		next_state = LEGUP_F_main_BB__28_44;
LEGUP_F_main_BB__28_44:
		next_state = LEGUP_F_main_BB__28_45;
LEGUP_F_main_BB__28_45:
		next_state = LEGUP_F_main_BB__28_46;
LEGUP_F_main_BB__28_46:
		next_state = LEGUP_F_main_BB__28_47;
LEGUP_F_main_BB__28_47:
		next_state = LEGUP_F_main_BB__28_48;
LEGUP_F_main_BB__28_48:
		next_state = LEGUP_F_main_BB__28_49;
LEGUP_F_main_BB__28_49:
		next_state = LEGUP_F_main_BB__28_50;
LEGUP_F_main_BB__28_50:
		next_state = LEGUP_F_main_BB__28_51;
LEGUP_F_main_BB__28_51:
		next_state = LEGUP_F_main_BB__28_52;
LEGUP_F_main_BB__28_52:
		next_state = LEGUP_F_main_BB__28_53;
LEGUP_F_main_BB__28_53:
		next_state = LEGUP_F_main_BB__28_54;
LEGUP_F_main_BB__28_54:
		next_state = LEGUP_F_main_BB__28_55;
LEGUP_F_main_BB__28_55:
		next_state = LEGUP_F_main_BB__28_56;
LEGUP_F_main_BB__28_56:
		next_state = LEGUP_F_main_BB__28_57;
LEGUP_F_main_BB__28_57:
		next_state = LEGUP_F_main_BB__28_58;
LEGUP_F_main_BB__28_58:
		next_state = LEGUP_F_main_BB__28_59;
LEGUP_F_main_BB__28_59:
		next_state = LEGUP_F_main_BB__28_60;
LEGUP_F_main_BB__28_60:
		next_state = LEGUP_F_main_BB__28_61;
LEGUP_F_main_BB__28_61:
		next_state = LEGUP_F_main_BB__28_62;
LEGUP_F_main_BB__28_62:
		next_state = LEGUP_F_main_BB__28_63;
LEGUP_F_main_BB__28_63:
		next_state = LEGUP_F_main_BB__28_64;
LEGUP_F_main_BB__28_64:
		next_state = LEGUP_F_main_BB__28_65;
LEGUP_F_main_BB__28_65:
		next_state = LEGUP_F_main_BB__28_66;
LEGUP_F_main_BB__28_66:
		next_state = LEGUP_F_main_BB__28_67;
LEGUP_F_main_BB__28_67:
		next_state = LEGUP_F_main_BB__28_68;
LEGUP_F_main_BB__28_68:
		next_state = LEGUP_F_main_BB__28_69;
LEGUP_F_main_BB__28_69:
		next_state = LEGUP_F_main_BB__28_70;
LEGUP_F_main_BB__28_70:
		next_state = LEGUP_F_main_BB__28_71;
LEGUP_F_main_BB__28_71:
		next_state = LEGUP_F_main_BB__28_72;
LEGUP_F_main_BB__28_72:
		next_state = LEGUP_F_main_BB__28_73;
LEGUP_F_main_BB__28_73:
		next_state = LEGUP_F_main_BB__28_74;
LEGUP_F_main_BB__28_74:
		next_state = LEGUP_F_main_BB__28_75;
LEGUP_F_main_BB__28_75:
		next_state = LEGUP_F_main_BB__28_76;
LEGUP_F_main_BB__28_76:
		next_state = LEGUP_F_main_BB__28_77;
LEGUP_F_main_BB__28_77:
		next_state = LEGUP_F_main_BB__28_78;
LEGUP_F_main_BB__28_78:
		next_state = LEGUP_F_main_BB__28_79;
LEGUP_F_main_BB__28_79:
		next_state = LEGUP_F_main_BB__38_80;
LEGUP_F_main_BB__38_100:
		next_state = LEGUP_F_main_BB__38_101;
LEGUP_F_main_BB__38_101:
		next_state = LEGUP_F_main_BB__38_102;
LEGUP_F_main_BB__38_102:
		next_state = LEGUP_F_main_BB__38_103;
LEGUP_F_main_BB__38_103:
		next_state = LEGUP_F_main_BB__38_104;
LEGUP_F_main_BB__38_104:
		next_state = LEGUP_F_main_BB__38_105;
LEGUP_F_main_BB__38_105:
		next_state = LEGUP_F_main_BB__38_106;
LEGUP_F_main_BB__38_106:
		next_state = LEGUP_F_main_BB__38_107;
LEGUP_F_main_BB__38_107:
		next_state = LEGUP_F_main_BB__38_108;
LEGUP_F_main_BB__38_108:
		next_state = LEGUP_F_main_BB__46_140;
LEGUP_F_main_BB__38_80:
		next_state = LEGUP_F_main_BB__38_81;
LEGUP_F_main_BB__38_81:
		next_state = LEGUP_F_main_BB__38_82;
LEGUP_F_main_BB__38_82:
		next_state = LEGUP_F_main_BB__38_83;
LEGUP_F_main_BB__38_83:
		next_state = LEGUP_F_main_BB__38_84;
LEGUP_F_main_BB__38_84:
		next_state = LEGUP_F_main_BB__38_85;
LEGUP_F_main_BB__38_85:
		next_state = LEGUP_F_main_BB__38_86;
LEGUP_F_main_BB__38_86:
		next_state = LEGUP_F_main_BB__38_87;
LEGUP_F_main_BB__38_87:
		next_state = LEGUP_F_main_BB__38_88;
LEGUP_F_main_BB__38_88:
		next_state = LEGUP_F_main_BB__38_89;
LEGUP_F_main_BB__38_89:
		next_state = LEGUP_F_main_BB__38_90;
LEGUP_F_main_BB__38_90:
		next_state = LEGUP_F_main_BB__38_91;
LEGUP_F_main_BB__38_91:
		next_state = LEGUP_F_main_BB__38_92;
LEGUP_F_main_BB__38_92:
		next_state = LEGUP_F_main_BB__38_93;
LEGUP_F_main_BB__38_93:
		next_state = LEGUP_F_main_BB__38_94;
LEGUP_F_main_BB__38_94:
		next_state = LEGUP_F_main_BB__38_95;
LEGUP_F_main_BB__38_95:
		next_state = LEGUP_F_main_BB__38_96;
LEGUP_F_main_BB__38_96:
		next_state = LEGUP_F_main_BB__38_97;
LEGUP_F_main_BB__38_97:
		next_state = LEGUP_F_main_BB__38_98;
LEGUP_F_main_BB__38_98:
		next_state = LEGUP_F_main_BB__38_99;
LEGUP_F_main_BB__38_99:
		next_state = LEGUP_F_main_BB__38_100;
LEGUP_F_main_BB__40_109:
		next_state = LEGUP_F_main_BB__40_110;
LEGUP_F_main_BB__40_110:
		next_state = LEGUP_F_main_BB__40_111;
LEGUP_F_main_BB__40_111:
		next_state = LEGUP_F_main_BB__40_112;
LEGUP_F_main_BB__40_112:
		next_state = LEGUP_F_main_BB__40_113;
LEGUP_F_main_BB__40_113:
		next_state = LEGUP_F_main_BB__40_114;
LEGUP_F_main_BB__40_114:
		next_state = LEGUP_F_main_BB__40_115;
LEGUP_F_main_BB__40_115:
		next_state = LEGUP_F_main_BB__40_116;
LEGUP_F_main_BB__40_116:
		next_state = LEGUP_F_main_BB__40_117;
LEGUP_F_main_BB__40_117:
		next_state = LEGUP_F_main_BB__40_118;
LEGUP_F_main_BB__40_118:
		next_state = LEGUP_F_main_BB__40_119;
LEGUP_F_main_BB__40_119:
		next_state = LEGUP_F_main_BB__40_120;
LEGUP_F_main_BB__40_120:
		next_state = LEGUP_F_main_BB__40_121;
LEGUP_F_main_BB__40_121:
		next_state = LEGUP_F_main_BB__40_122;
LEGUP_F_main_BB__40_122:
		next_state = LEGUP_F_main_BB__40_123;
LEGUP_F_main_BB__40_123:
		next_state = LEGUP_F_main_BB__40_124;
LEGUP_F_main_BB__40_124:
	if ((main_40_orcond50 == 1'd1))
		next_state = LEGUP_F_main_BB__44_125;
	else if ((main_40_orcond50 == 1'd0))
		next_state = LEGUP_F_main_BB__46_140;
LEGUP_F_main_BB__44_125:
		next_state = LEGUP_F_main_BB__44_126;
LEGUP_F_main_BB__44_126:
		next_state = LEGUP_F_main_BB__44_127;
LEGUP_F_main_BB__44_127:
		next_state = LEGUP_F_main_BB__44_128;
LEGUP_F_main_BB__44_128:
		next_state = LEGUP_F_main_BB__44_129;
LEGUP_F_main_BB__44_129:
		next_state = LEGUP_F_main_BB__44_130;
LEGUP_F_main_BB__44_130:
		next_state = LEGUP_F_main_BB__44_131;
LEGUP_F_main_BB__44_131:
		next_state = LEGUP_F_main_BB__44_132;
LEGUP_F_main_BB__44_132:
		next_state = LEGUP_F_main_BB__44_133;
LEGUP_F_main_BB__44_133:
		next_state = LEGUP_F_main_BB__44_134;
LEGUP_F_main_BB__44_134:
		next_state = LEGUP_F_main_BB__44_135;
LEGUP_F_main_BB__44_135:
		next_state = LEGUP_F_main_BB__44_136;
LEGUP_F_main_BB__44_136:
		next_state = LEGUP_F_main_BB__44_137;
LEGUP_F_main_BB__44_137:
		next_state = LEGUP_F_main_BB__44_138;
LEGUP_F_main_BB__44_138:
		next_state = LEGUP_F_main_BB__44_139;
LEGUP_F_main_BB__44_139:
		next_state = LEGUP_F_main_BB_expfexit_467;
LEGUP_F_main_BB__46_140:
		next_state = LEGUP_F_main_BB__46_141;
LEGUP_F_main_BB__46_141:
		next_state = LEGUP_F_main_BB__46_142;
LEGUP_F_main_BB__46_142:
		next_state = LEGUP_F_main_BB__46_143;
LEGUP_F_main_BB__46_143:
		next_state = LEGUP_F_main_BB__46_144;
LEGUP_F_main_BB__46_144:
		next_state = LEGUP_F_main_BB__46_145;
LEGUP_F_main_BB__46_145:
		next_state = LEGUP_F_main_BB__46_146;
LEGUP_F_main_BB__46_146:
		next_state = LEGUP_F_main_BB__46_147;
LEGUP_F_main_BB__46_147:
		next_state = LEGUP_F_main_BB__46_148;
LEGUP_F_main_BB__46_148:
		next_state = LEGUP_F_main_BB__46_149;
LEGUP_F_main_BB__46_149:
		next_state = LEGUP_F_main_BB__46_150;
LEGUP_F_main_BB__46_150:
		next_state = LEGUP_F_main_BB__46_151;
LEGUP_F_main_BB__46_151:
		next_state = LEGUP_F_main_BB__46_152;
LEGUP_F_main_BB__46_152:
		next_state = LEGUP_F_main_BB__46_153;
LEGUP_F_main_BB__46_153:
		next_state = LEGUP_F_main_BB__46_154;
LEGUP_F_main_BB__46_154:
		next_state = LEGUP_F_main_BB__46_155;
LEGUP_F_main_BB__46_155:
		next_state = LEGUP_F_main_BB__46_156;
LEGUP_F_main_BB__46_156:
		next_state = LEGUP_F_main_BB__46_157;
LEGUP_F_main_BB__46_157:
		next_state = LEGUP_F_main_BB__46_158;
LEGUP_F_main_BB__46_158:
		next_state = LEGUP_F_main_BB__46_159;
LEGUP_F_main_BB__46_159:
		next_state = LEGUP_F_main_BB__46_160;
LEGUP_F_main_BB__46_160:
		next_state = LEGUP_F_main_BB__46_161;
LEGUP_F_main_BB__46_161:
		next_state = LEGUP_F_main_BB__46_162;
LEGUP_F_main_BB__46_162:
		next_state = LEGUP_F_main_BB__46_163;
LEGUP_F_main_BB__46_163:
		next_state = LEGUP_F_main_BB__46_164;
LEGUP_F_main_BB__46_164:
		next_state = LEGUP_F_main_BB__46_165;
LEGUP_F_main_BB__46_165:
		next_state = LEGUP_F_main_BB__46_166;
LEGUP_F_main_BB__46_166:
		next_state = LEGUP_F_main_BB__46_167;
LEGUP_F_main_BB__46_167:
		next_state = LEGUP_F_main_BB__46_168;
LEGUP_F_main_BB__46_168:
		next_state = LEGUP_F_main_BB__46_169;
LEGUP_F_main_BB__46_169:
		next_state = LEGUP_F_main_BB__46_170;
LEGUP_F_main_BB__46_170:
		next_state = LEGUP_F_main_BB__46_171;
LEGUP_F_main_BB__46_171:
		next_state = LEGUP_F_main_BB__46_172;
LEGUP_F_main_BB__46_172:
		next_state = LEGUP_F_main_BB__46_173;
LEGUP_F_main_BB__46_173:
		next_state = LEGUP_F_main_BB__46_174;
LEGUP_F_main_BB__46_174:
		next_state = LEGUP_F_main_BB__46_175;
LEGUP_F_main_BB__46_175:
		next_state = LEGUP_F_main_BB__46_176;
LEGUP_F_main_BB__46_176:
		next_state = LEGUP_F_main_BB__46_177;
LEGUP_F_main_BB__46_177:
		next_state = LEGUP_F_main_BB__46_178;
LEGUP_F_main_BB__46_178:
		next_state = LEGUP_F_main_BB__46_179;
LEGUP_F_main_BB__46_179:
		next_state = LEGUP_F_main_BB__46_180;
LEGUP_F_main_BB__46_180:
		next_state = LEGUP_F_main_BB__46_181;
LEGUP_F_main_BB__46_181:
		next_state = LEGUP_F_main_BB__46_182;
LEGUP_F_main_BB__46_182:
		next_state = LEGUP_F_main_BB__46_183;
LEGUP_F_main_BB__46_183:
		next_state = LEGUP_F_main_BB__46_184;
LEGUP_F_main_BB__46_184:
		next_state = LEGUP_F_main_BB__46_185;
LEGUP_F_main_BB__46_185:
		next_state = LEGUP_F_main_BB__46_186;
LEGUP_F_main_BB__46_186:
		next_state = LEGUP_F_main_BB__46_187;
LEGUP_F_main_BB__46_187:
		next_state = LEGUP_F_main_BB__46_188;
LEGUP_F_main_BB__46_188:
		next_state = LEGUP_F_main_BB__46_189;
LEGUP_F_main_BB__46_189:
		next_state = LEGUP_F_main_BB__46_190;
LEGUP_F_main_BB__46_190:
		next_state = LEGUP_F_main_BB__46_191;
LEGUP_F_main_BB__46_191:
		next_state = LEGUP_F_main_BB__46_192;
LEGUP_F_main_BB__46_192:
		next_state = LEGUP_F_main_BB__46_193;
LEGUP_F_main_BB__46_193:
		next_state = LEGUP_F_main_BB__46_194;
LEGUP_F_main_BB__46_194:
		next_state = LEGUP_F_main_BB__46_195;
LEGUP_F_main_BB__46_195:
		next_state = LEGUP_F_main_BB__46_196;
LEGUP_F_main_BB__46_196:
		next_state = LEGUP_F_main_BB__46_197;
LEGUP_F_main_BB__46_197:
		next_state = LEGUP_F_main_BB__46_198;
LEGUP_F_main_BB__46_198:
		next_state = LEGUP_F_main_BB__46_199;
LEGUP_F_main_BB__46_199:
		next_state = LEGUP_F_main_BB__46_200;
LEGUP_F_main_BB__46_200:
		next_state = LEGUP_F_main_BB__46_201;
LEGUP_F_main_BB__46_201:
		next_state = LEGUP_F_main_BB__46_202;
LEGUP_F_main_BB__46_202:
		next_state = LEGUP_F_main_BB__46_203;
LEGUP_F_main_BB__46_203:
		next_state = LEGUP_F_main_BB__46_204;
LEGUP_F_main_BB__46_204:
		next_state = LEGUP_F_main_BB__46_205;
LEGUP_F_main_BB__46_205:
		next_state = LEGUP_F_main_BB__46_206;
LEGUP_F_main_BB__46_206:
		next_state = LEGUP_F_main_BB__46_207;
LEGUP_F_main_BB__46_207:
		next_state = LEGUP_F_main_BB__46_208;
LEGUP_F_main_BB__46_208:
		next_state = LEGUP_F_main_BB__46_209;
LEGUP_F_main_BB__46_209:
		next_state = LEGUP_F_main_BB__46_210;
LEGUP_F_main_BB__46_210:
		next_state = LEGUP_F_main_BB__46_211;
LEGUP_F_main_BB__46_211:
		next_state = LEGUP_F_main_BB__46_212;
LEGUP_F_main_BB__46_212:
		next_state = LEGUP_F_main_BB__46_213;
LEGUP_F_main_BB__46_213:
		next_state = LEGUP_F_main_BB__46_214;
LEGUP_F_main_BB__46_214:
		next_state = LEGUP_F_main_BB__46_215;
LEGUP_F_main_BB__46_215:
		next_state = LEGUP_F_main_BB__46_216;
LEGUP_F_main_BB__46_216:
		next_state = LEGUP_F_main_BB__46_217;
LEGUP_F_main_BB__46_217:
		next_state = LEGUP_F_main_BB__46_218;
LEGUP_F_main_BB__46_218:
		next_state = LEGUP_F_main_BB__46_219;
LEGUP_F_main_BB__46_219:
		next_state = LEGUP_F_main_BB__46_220;
LEGUP_F_main_BB__46_220:
		next_state = LEGUP_F_main_BB__46_221;
LEGUP_F_main_BB__46_221:
		next_state = LEGUP_F_main_BB__46_222;
LEGUP_F_main_BB__46_222:
		next_state = LEGUP_F_main_BB__46_223;
LEGUP_F_main_BB__46_223:
		next_state = LEGUP_F_main_BB__46_224;
LEGUP_F_main_BB__46_224:
		next_state = LEGUP_F_main_BB__46_225;
LEGUP_F_main_BB__46_225:
		next_state = LEGUP_F_main_BB__46_226;
LEGUP_F_main_BB__46_226:
		next_state = LEGUP_F_main_BB__46_227;
LEGUP_F_main_BB__46_227:
		next_state = LEGUP_F_main_BB__46_228;
LEGUP_F_main_BB__46_228:
		next_state = LEGUP_F_main_BB__46_229;
LEGUP_F_main_BB__46_229:
		next_state = LEGUP_F_main_BB__46_230;
LEGUP_F_main_BB__46_230:
		next_state = LEGUP_F_main_BB__46_231;
LEGUP_F_main_BB__46_231:
		next_state = LEGUP_F_main_BB__46_232;
LEGUP_F_main_BB__46_232:
		next_state = LEGUP_F_main_BB__46_233;
LEGUP_F_main_BB__46_233:
		next_state = LEGUP_F_main_BB__46_234;
LEGUP_F_main_BB__46_234:
		next_state = LEGUP_F_main_BB__46_235;
LEGUP_F_main_BB__46_235:
		next_state = LEGUP_F_main_BB__46_236;
LEGUP_F_main_BB__46_236:
		next_state = LEGUP_F_main_BB__46_237;
LEGUP_F_main_BB__46_237:
		next_state = LEGUP_F_main_BB__46_238;
LEGUP_F_main_BB__46_238:
		next_state = LEGUP_F_main_BB__46_239;
LEGUP_F_main_BB__46_239:
		next_state = LEGUP_F_main_BB__46_240;
LEGUP_F_main_BB__46_240:
		next_state = LEGUP_F_main_BB__46_241;
LEGUP_F_main_BB__46_241:
		next_state = LEGUP_F_main_BB__46_242;
LEGUP_F_main_BB__46_242:
		next_state = LEGUP_F_main_BB__46_243;
LEGUP_F_main_BB__46_243:
		next_state = LEGUP_F_main_BB__46_244;
LEGUP_F_main_BB__46_244:
		next_state = LEGUP_F_main_BB__46_245;
LEGUP_F_main_BB__46_245:
		next_state = LEGUP_F_main_BB__46_246;
LEGUP_F_main_BB__46_246:
		next_state = LEGUP_F_main_BB__46_247;
LEGUP_F_main_BB__46_247:
		next_state = LEGUP_F_main_BB__46_248;
LEGUP_F_main_BB__46_248:
		next_state = LEGUP_F_main_BB__46_249;
LEGUP_F_main_BB__46_249:
		next_state = LEGUP_F_main_BB__46_250;
LEGUP_F_main_BB__46_250:
		next_state = LEGUP_F_main_BB__46_251;
LEGUP_F_main_BB__46_251:
		next_state = LEGUP_F_main_BB__46_252;
LEGUP_F_main_BB__46_252:
		next_state = LEGUP_F_main_BB__46_253;
LEGUP_F_main_BB__46_253:
		next_state = LEGUP_F_main_BB__46_254;
LEGUP_F_main_BB__46_254:
		next_state = LEGUP_F_main_BB__46_255;
LEGUP_F_main_BB__46_255:
		next_state = LEGUP_F_main_BB__46_256;
LEGUP_F_main_BB__46_256:
		next_state = LEGUP_F_main_BB__46_257;
LEGUP_F_main_BB__46_257:
		next_state = LEGUP_F_main_BB__46_258;
LEGUP_F_main_BB__46_258:
		next_state = LEGUP_F_main_BB__46_259;
LEGUP_F_main_BB__46_259:
		next_state = LEGUP_F_main_BB__46_260;
LEGUP_F_main_BB__46_260:
		next_state = LEGUP_F_main_BB__46_261;
LEGUP_F_main_BB__46_261:
		next_state = LEGUP_F_main_BB__46_262;
LEGUP_F_main_BB__46_262:
		next_state = LEGUP_F_main_BB__46_263;
LEGUP_F_main_BB__46_263:
		next_state = LEGUP_F_main_BB__46_264;
LEGUP_F_main_BB__46_264:
		next_state = LEGUP_F_main_BB__46_265;
LEGUP_F_main_BB__46_265:
		next_state = LEGUP_F_main_BB__46_266;
LEGUP_F_main_BB__46_266:
		next_state = LEGUP_F_main_BB__46_267;
LEGUP_F_main_BB__46_267:
		next_state = LEGUP_F_main_BB__46_268;
LEGUP_F_main_BB__46_268:
		next_state = LEGUP_F_main_BB__46_269;
LEGUP_F_main_BB__46_269:
		next_state = LEGUP_F_main_BB__46_270;
LEGUP_F_main_BB__46_270:
		next_state = LEGUP_F_main_BB__46_271;
LEGUP_F_main_BB__46_271:
		next_state = LEGUP_F_main_BB__46_272;
LEGUP_F_main_BB__46_272:
		next_state = LEGUP_F_main_BB__46_273;
LEGUP_F_main_BB__46_273:
		next_state = LEGUP_F_main_BB__46_274;
LEGUP_F_main_BB__46_274:
		next_state = LEGUP_F_main_BB__46_275;
LEGUP_F_main_BB__46_275:
		next_state = LEGUP_F_main_BB__46_276;
LEGUP_F_main_BB__46_276:
		next_state = LEGUP_F_main_BB__46_277;
LEGUP_F_main_BB__46_277:
		next_state = LEGUP_F_main_BB__46_278;
LEGUP_F_main_BB__46_278:
		next_state = LEGUP_F_main_BB__46_279;
LEGUP_F_main_BB__46_279:
		next_state = LEGUP_F_main_BB__46_280;
LEGUP_F_main_BB__46_280:
		next_state = LEGUP_F_main_BB__46_281;
LEGUP_F_main_BB__46_281:
		next_state = LEGUP_F_main_BB__46_282;
LEGUP_F_main_BB__46_282:
		next_state = LEGUP_F_main_BB__46_283;
LEGUP_F_main_BB__46_283:
		next_state = LEGUP_F_main_BB__46_284;
LEGUP_F_main_BB__46_284:
		next_state = LEGUP_F_main_BB__46_285;
LEGUP_F_main_BB__46_285:
		next_state = LEGUP_F_main_BB__46_286;
LEGUP_F_main_BB__46_286:
		next_state = LEGUP_F_main_BB__46_287;
LEGUP_F_main_BB__46_287:
	if ((main_46_58_reg == 1'd1))
		next_state = LEGUP_F_main_BB__60_288;
	else if ((main_46_58_reg == 1'd0))
		next_state = LEGUP_F_main_BB__65_364;
LEGUP_F_main_BB__60_288:
		next_state = LEGUP_F_main_BB__60_289;
LEGUP_F_main_BB__60_289:
		next_state = LEGUP_F_main_BB__60_290;
LEGUP_F_main_BB__60_290:
		next_state = LEGUP_F_main_BB__60_291;
LEGUP_F_main_BB__60_291:
		next_state = LEGUP_F_main_BB__60_292;
LEGUP_F_main_BB__60_292:
		next_state = LEGUP_F_main_BB__60_293;
LEGUP_F_main_BB__60_293:
		next_state = LEGUP_F_main_BB__60_294;
LEGUP_F_main_BB__60_294:
		next_state = LEGUP_F_main_BB__60_295;
LEGUP_F_main_BB__60_295:
		next_state = LEGUP_F_main_BB__60_296;
LEGUP_F_main_BB__60_296:
		next_state = LEGUP_F_main_BB__60_297;
LEGUP_F_main_BB__60_297:
		next_state = LEGUP_F_main_BB__60_298;
LEGUP_F_main_BB__60_298:
		next_state = LEGUP_F_main_BB__60_299;
LEGUP_F_main_BB__60_299:
		next_state = LEGUP_F_main_BB__60_300;
LEGUP_F_main_BB__60_300:
		next_state = LEGUP_F_main_BB__60_301;
LEGUP_F_main_BB__60_301:
		next_state = LEGUP_F_main_BB__60_302;
LEGUP_F_main_BB__60_302:
		next_state = LEGUP_F_main_BB__60_303;
LEGUP_F_main_BB__60_303:
		next_state = LEGUP_F_main_BB__60_304;
LEGUP_F_main_BB__60_304:
		next_state = LEGUP_F_main_BB__60_305;
LEGUP_F_main_BB__60_305:
		next_state = LEGUP_F_main_BB__60_306;
LEGUP_F_main_BB__60_306:
		next_state = LEGUP_F_main_BB__60_307;
LEGUP_F_main_BB__60_307:
		next_state = LEGUP_F_main_BB__60_308;
LEGUP_F_main_BB__60_308:
		next_state = LEGUP_F_main_BB__60_309;
LEGUP_F_main_BB__60_309:
		next_state = LEGUP_F_main_BB__60_310;
LEGUP_F_main_BB__60_310:
		next_state = LEGUP_F_main_BB__60_311;
LEGUP_F_main_BB__60_311:
		next_state = LEGUP_F_main_BB__60_312;
LEGUP_F_main_BB__60_312:
		next_state = LEGUP_F_main_BB__60_313;
LEGUP_F_main_BB__60_313:
		next_state = LEGUP_F_main_BB__60_314;
LEGUP_F_main_BB__60_314:
		next_state = LEGUP_F_main_BB__60_315;
LEGUP_F_main_BB__60_315:
		next_state = LEGUP_F_main_BB__60_316;
LEGUP_F_main_BB__60_316:
		next_state = LEGUP_F_main_BB__60_317;
LEGUP_F_main_BB__60_317:
		next_state = LEGUP_F_main_BB__60_318;
LEGUP_F_main_BB__60_318:
		next_state = LEGUP_F_main_BB__60_319;
LEGUP_F_main_BB__60_319:
		next_state = LEGUP_F_main_BB__60_320;
LEGUP_F_main_BB__60_320:
		next_state = LEGUP_F_main_BB__60_321;
LEGUP_F_main_BB__60_321:
		next_state = LEGUP_F_main_BB__60_322;
LEGUP_F_main_BB__60_322:
		next_state = LEGUP_F_main_BB__60_323;
LEGUP_F_main_BB__60_323:
		next_state = LEGUP_F_main_BB__60_324;
LEGUP_F_main_BB__60_324:
		next_state = LEGUP_F_main_BB__60_325;
LEGUP_F_main_BB__60_325:
		next_state = LEGUP_F_main_BB__60_326;
LEGUP_F_main_BB__60_326:
		next_state = LEGUP_F_main_BB__60_327;
LEGUP_F_main_BB__60_327:
		next_state = LEGUP_F_main_BB__60_328;
LEGUP_F_main_BB__60_328:
		next_state = LEGUP_F_main_BB__60_329;
LEGUP_F_main_BB__60_329:
		next_state = LEGUP_F_main_BB__60_330;
LEGUP_F_main_BB__60_330:
		next_state = LEGUP_F_main_BB__60_331;
LEGUP_F_main_BB__60_331:
		next_state = LEGUP_F_main_BB__60_332;
LEGUP_F_main_BB__60_332:
		next_state = LEGUP_F_main_BB__60_333;
LEGUP_F_main_BB__60_333:
		next_state = LEGUP_F_main_BB__60_334;
LEGUP_F_main_BB__60_334:
		next_state = LEGUP_F_main_BB__60_335;
LEGUP_F_main_BB__60_335:
		next_state = LEGUP_F_main_BB__60_336;
LEGUP_F_main_BB__60_336:
		next_state = LEGUP_F_main_BB__60_337;
LEGUP_F_main_BB__60_337:
		next_state = LEGUP_F_main_BB__60_338;
LEGUP_F_main_BB__60_338:
		next_state = LEGUP_F_main_BB__60_339;
LEGUP_F_main_BB__60_339:
		next_state = LEGUP_F_main_BB__60_340;
LEGUP_F_main_BB__60_340:
		next_state = LEGUP_F_main_BB__60_341;
LEGUP_F_main_BB__60_341:
		next_state = LEGUP_F_main_BB__60_342;
LEGUP_F_main_BB__60_342:
		next_state = LEGUP_F_main_BB__60_343;
LEGUP_F_main_BB__60_343:
		next_state = LEGUP_F_main_BB__60_344;
LEGUP_F_main_BB__60_344:
		next_state = LEGUP_F_main_BB__60_345;
LEGUP_F_main_BB__60_345:
		next_state = LEGUP_F_main_BB__60_346;
LEGUP_F_main_BB__60_346:
		next_state = LEGUP_F_main_BB__60_347;
LEGUP_F_main_BB__60_347:
		next_state = LEGUP_F_main_BB__60_348;
LEGUP_F_main_BB__60_348:
		next_state = LEGUP_F_main_BB__60_349;
LEGUP_F_main_BB__60_349:
		next_state = LEGUP_F_main_BB__60_350;
LEGUP_F_main_BB__60_350:
		next_state = LEGUP_F_main_BB__60_351;
LEGUP_F_main_BB__60_351:
		next_state = LEGUP_F_main_BB__60_352;
LEGUP_F_main_BB__60_352:
		next_state = LEGUP_F_main_BB__60_353;
LEGUP_F_main_BB__60_353:
		next_state = LEGUP_F_main_BB__60_354;
LEGUP_F_main_BB__60_354:
		next_state = LEGUP_F_main_BB__60_355;
LEGUP_F_main_BB__60_355:
		next_state = LEGUP_F_main_BB__60_356;
LEGUP_F_main_BB__60_356:
		next_state = LEGUP_F_main_BB__60_357;
LEGUP_F_main_BB__60_357:
		next_state = LEGUP_F_main_BB__60_358;
LEGUP_F_main_BB__60_358:
		next_state = LEGUP_F_main_BB__60_359;
LEGUP_F_main_BB__60_359:
		next_state = LEGUP_F_main_BB__60_360;
LEGUP_F_main_BB__60_360:
		next_state = LEGUP_F_main_BB__60_361;
LEGUP_F_main_BB__60_361:
		next_state = LEGUP_F_main_BB__60_362;
LEGUP_F_main_BB__60_362:
		next_state = LEGUP_F_main_BB__60_363;
LEGUP_F_main_BB__60_363:
		next_state = LEGUP_F_main_BB_expfexit_467;
LEGUP_F_main_BB__65_364:
		next_state = LEGUP_F_main_BB__65_365;
LEGUP_F_main_BB__65_365:
		next_state = LEGUP_F_main_BB__65_366;
LEGUP_F_main_BB__65_366:
		next_state = LEGUP_F_main_BB__65_367;
LEGUP_F_main_BB__65_367:
		next_state = LEGUP_F_main_BB__65_368;
LEGUP_F_main_BB__65_368:
		next_state = LEGUP_F_main_BB__65_369;
LEGUP_F_main_BB__65_369:
		next_state = LEGUP_F_main_BB__65_370;
LEGUP_F_main_BB__65_370:
		next_state = LEGUP_F_main_BB__65_371;
LEGUP_F_main_BB__65_371:
		next_state = LEGUP_F_main_BB__65_372;
LEGUP_F_main_BB__65_372:
		next_state = LEGUP_F_main_BB__65_373;
LEGUP_F_main_BB__65_373:
		next_state = LEGUP_F_main_BB__65_374;
LEGUP_F_main_BB__65_374:
		next_state = LEGUP_F_main_BB__65_375;
LEGUP_F_main_BB__65_375:
		next_state = LEGUP_F_main_BB__65_376;
LEGUP_F_main_BB__65_376:
		next_state = LEGUP_F_main_BB__65_377;
LEGUP_F_main_BB__65_377:
		next_state = LEGUP_F_main_BB__65_378;
LEGUP_F_main_BB__65_378:
		next_state = LEGUP_F_main_BB__65_379;
LEGUP_F_main_BB__65_379:
		next_state = LEGUP_F_main_BB__65_380;
LEGUP_F_main_BB__65_380:
		next_state = LEGUP_F_main_BB__65_381;
LEGUP_F_main_BB__65_381:
		next_state = LEGUP_F_main_BB__65_382;
LEGUP_F_main_BB__65_382:
		next_state = LEGUP_F_main_BB__65_383;
LEGUP_F_main_BB__65_383:
		next_state = LEGUP_F_main_BB__65_384;
LEGUP_F_main_BB__65_384:
		next_state = LEGUP_F_main_BB__65_385;
LEGUP_F_main_BB__65_385:
		next_state = LEGUP_F_main_BB__65_386;
LEGUP_F_main_BB__65_386:
		next_state = LEGUP_F_main_BB__65_387;
LEGUP_F_main_BB__65_387:
		next_state = LEGUP_F_main_BB__65_388;
LEGUP_F_main_BB__65_388:
		next_state = LEGUP_F_main_BB__65_389;
LEGUP_F_main_BB__65_389:
		next_state = LEGUP_F_main_BB__65_390;
LEGUP_F_main_BB__65_390:
		next_state = LEGUP_F_main_BB__65_391;
LEGUP_F_main_BB__65_391:
		next_state = LEGUP_F_main_BB__65_392;
LEGUP_F_main_BB__65_392:
		next_state = LEGUP_F_main_BB__65_393;
LEGUP_F_main_BB__65_393:
		next_state = LEGUP_F_main_BB__65_394;
LEGUP_F_main_BB__65_394:
		next_state = LEGUP_F_main_BB__65_395;
LEGUP_F_main_BB__65_395:
		next_state = LEGUP_F_main_BB__65_396;
LEGUP_F_main_BB__65_396:
		next_state = LEGUP_F_main_BB__65_397;
LEGUP_F_main_BB__65_397:
		next_state = LEGUP_F_main_BB__65_398;
LEGUP_F_main_BB__65_398:
		next_state = LEGUP_F_main_BB__65_399;
LEGUP_F_main_BB__65_399:
		next_state = LEGUP_F_main_BB__65_400;
LEGUP_F_main_BB__65_400:
		next_state = LEGUP_F_main_BB__65_401;
LEGUP_F_main_BB__65_401:
		next_state = LEGUP_F_main_BB__65_402;
LEGUP_F_main_BB__65_402:
		next_state = LEGUP_F_main_BB__65_403;
LEGUP_F_main_BB__65_403:
		next_state = LEGUP_F_main_BB__65_404;
LEGUP_F_main_BB__65_404:
		next_state = LEGUP_F_main_BB__65_405;
LEGUP_F_main_BB__65_405:
		next_state = LEGUP_F_main_BB__65_406;
LEGUP_F_main_BB__65_406:
		next_state = LEGUP_F_main_BB__65_407;
LEGUP_F_main_BB__65_407:
		next_state = LEGUP_F_main_BB__65_408;
LEGUP_F_main_BB__65_408:
		next_state = LEGUP_F_main_BB__65_409;
LEGUP_F_main_BB__65_409:
		next_state = LEGUP_F_main_BB__65_410;
LEGUP_F_main_BB__65_410:
		next_state = LEGUP_F_main_BB__65_411;
LEGUP_F_main_BB__65_411:
		next_state = LEGUP_F_main_BB__65_412;
LEGUP_F_main_BB__65_412:
		next_state = LEGUP_F_main_BB__65_413;
LEGUP_F_main_BB__65_413:
		next_state = LEGUP_F_main_BB__65_414;
LEGUP_F_main_BB__65_414:
		next_state = LEGUP_F_main_BB__65_415;
LEGUP_F_main_BB__65_415:
		next_state = LEGUP_F_main_BB__65_416;
LEGUP_F_main_BB__65_416:
		next_state = LEGUP_F_main_BB__65_417;
LEGUP_F_main_BB__65_417:
		next_state = LEGUP_F_main_BB__65_418;
LEGUP_F_main_BB__65_418:
		next_state = LEGUP_F_main_BB__65_419;
LEGUP_F_main_BB__65_419:
		next_state = LEGUP_F_main_BB__65_420;
LEGUP_F_main_BB__65_420:
		next_state = LEGUP_F_main_BB__65_421;
LEGUP_F_main_BB__65_421:
		next_state = LEGUP_F_main_BB__65_422;
LEGUP_F_main_BB__65_422:
		next_state = LEGUP_F_main_BB__65_423;
LEGUP_F_main_BB__65_423:
		next_state = LEGUP_F_main_BB__65_424;
LEGUP_F_main_BB__65_424:
		next_state = LEGUP_F_main_BB__65_425;
LEGUP_F_main_BB__65_425:
		next_state = LEGUP_F_main_BB__65_426;
LEGUP_F_main_BB__65_426:
		next_state = LEGUP_F_main_BB__65_427;
LEGUP_F_main_BB__65_427:
		next_state = LEGUP_F_main_BB__65_428;
LEGUP_F_main_BB__65_428:
		next_state = LEGUP_F_main_BB__65_429;
LEGUP_F_main_BB__65_429:
		next_state = LEGUP_F_main_BB__65_430;
LEGUP_F_main_BB__65_430:
		next_state = LEGUP_F_main_BB__65_431;
LEGUP_F_main_BB__65_431:
		next_state = LEGUP_F_main_BB__65_432;
LEGUP_F_main_BB__65_432:
		next_state = LEGUP_F_main_BB__65_433;
LEGUP_F_main_BB__65_433:
		next_state = LEGUP_F_main_BB__65_434;
LEGUP_F_main_BB__65_434:
		next_state = LEGUP_F_main_BB__65_435;
LEGUP_F_main_BB__65_435:
		next_state = LEGUP_F_main_BB__65_436;
LEGUP_F_main_BB__65_436:
		next_state = LEGUP_F_main_BB__65_437;
LEGUP_F_main_BB__65_437:
		next_state = LEGUP_F_main_BB__65_438;
LEGUP_F_main_BB__65_438:
		next_state = LEGUP_F_main_BB__65_439;
LEGUP_F_main_BB__65_439:
		next_state = LEGUP_F_main_BB__65_440;
LEGUP_F_main_BB__65_440:
		next_state = LEGUP_F_main_BB__65_441;
LEGUP_F_main_BB__65_441:
		next_state = LEGUP_F_main_BB__65_442;
LEGUP_F_main_BB__65_442:
		next_state = LEGUP_F_main_BB__65_443;
LEGUP_F_main_BB__65_443:
		next_state = LEGUP_F_main_BB__65_444;
LEGUP_F_main_BB__65_444:
		next_state = LEGUP_F_main_BB__65_445;
LEGUP_F_main_BB__65_445:
		next_state = LEGUP_F_main_BB__65_446;
LEGUP_F_main_BB__65_446:
		next_state = LEGUP_F_main_BB__65_447;
LEGUP_F_main_BB__65_447:
		next_state = LEGUP_F_main_BB__65_448;
LEGUP_F_main_BB__65_448:
		next_state = LEGUP_F_main_BB__65_449;
LEGUP_F_main_BB__65_449:
		next_state = LEGUP_F_main_BB__65_450;
LEGUP_F_main_BB__65_450:
		next_state = LEGUP_F_main_BB__65_451;
LEGUP_F_main_BB__65_451:
		next_state = LEGUP_F_main_BB__65_452;
LEGUP_F_main_BB__65_452:
		next_state = LEGUP_F_main_BB__65_453;
LEGUP_F_main_BB__65_453:
	if ((main_65_71_reg == 1'd1))
		next_state = LEGUP_F_main_BB__74_454;
	else if ((main_65_71_reg == 1'd0))
		next_state = LEGUP_F_main_BB__77_455;
LEGUP_F_main_BB__6_10:
		next_state = LEGUP_F_main_BB__6_11;
LEGUP_F_main_BB__6_11:
		next_state = LEGUP_F_main_BB__6_12;
LEGUP_F_main_BB__6_12:
		next_state = LEGUP_F_main_BB__6_13;
LEGUP_F_main_BB__6_13:
		next_state = LEGUP_F_main_BB__6_14;
LEGUP_F_main_BB__6_14:
		next_state = LEGUP_F_main_BB__6_15;
LEGUP_F_main_BB__6_15:
		next_state = LEGUP_F_main_BB__6_16;
LEGUP_F_main_BB__6_16:
		next_state = LEGUP_F_main_BB__6_17;
LEGUP_F_main_BB__6_17:
		next_state = LEGUP_F_main_BB__6_18;
LEGUP_F_main_BB__6_18:
		next_state = LEGUP_F_main_BB__6_19;
LEGUP_F_main_BB__6_19:
		next_state = LEGUP_F_main_BB__6_20;
LEGUP_F_main_BB__6_20:
		next_state = LEGUP_F_main_BB_expfexit_467;
LEGUP_F_main_BB__6_6:
		next_state = LEGUP_F_main_BB__6_7;
LEGUP_F_main_BB__6_7:
		next_state = LEGUP_F_main_BB__6_8;
LEGUP_F_main_BB__6_8:
		next_state = LEGUP_F_main_BB__6_9;
LEGUP_F_main_BB__6_9:
		next_state = LEGUP_F_main_BB__6_10;
LEGUP_F_main_BB__74_454:
		next_state = LEGUP_F_main_BB_expfexit_467;
LEGUP_F_main_BB__77_455:
		next_state = LEGUP_F_main_BB__77_456;
LEGUP_F_main_BB__77_456:
		next_state = LEGUP_F_main_BB__77_457;
LEGUP_F_main_BB__77_457:
		next_state = LEGUP_F_main_BB__77_458;
LEGUP_F_main_BB__77_458:
		next_state = LEGUP_F_main_BB__77_459;
LEGUP_F_main_BB__77_459:
		next_state = LEGUP_F_main_BB__77_460;
LEGUP_F_main_BB__77_460:
		next_state = LEGUP_F_main_BB__77_461;
LEGUP_F_main_BB__77_461:
		next_state = LEGUP_F_main_BB__77_462;
LEGUP_F_main_BB__77_462:
		next_state = LEGUP_F_main_BB__77_463;
LEGUP_F_main_BB__77_463:
		next_state = LEGUP_F_main_BB__77_464;
LEGUP_F_main_BB__77_464:
		next_state = LEGUP_F_main_BB__77_465;
LEGUP_F_main_BB__77_465:
		next_state = LEGUP_F_main_BB__77_466;
LEGUP_F_main_BB__77_466:
		next_state = LEGUP_F_main_BB_expfexit_467;
LEGUP_F_main_BB__8_21:
	if ((main_8_9 == 1'd1))
		next_state = LEGUP_F_main_BB__10_22;
	else if ((main_8_9 == 1'd0))
		next_state = LEGUP_F_main_BB__12_23;
LEGUP_F_main_BB_expfexit_467:
		next_state = LEGUP_F_main_BB_expfexit_468;
LEGUP_F_main_BB_expfexit_468:
		next_state = LEGUP_F_main_BB_expfexit_469;
LEGUP_F_main_BB_expfexit_469:
		next_state = LEGUP_F_main_BB_expfexit_470;
LEGUP_F_main_BB_expfexit_470:
		next_state = LEGUP_F_main_BB_expfexit_471;
LEGUP_F_main_BB_expfexit_471:
		next_state = LEGUP_F_main_BB_expfexit_472;
LEGUP_F_main_BB_expfexit_472:
		next_state = LEGUP_F_main_BB_expfexit_473;
LEGUP_F_main_BB_expfexit_473:
		next_state = LEGUP_F_main_BB_expfexit_474;
LEGUP_F_main_BB_expfexit_474:
		next_state = LEGUP_F_main_BB_expfexit_475;
LEGUP_F_main_BB_expfexit_475:
		next_state = LEGUP_F_main_BB_expfexit_476;
LEGUP_F_main_BB_expfexit_476:
		next_state = LEGUP_F_main_BB_expfexit_477;
LEGUP_F_main_BB_expfexit_477:
		next_state = LEGUP_F_main_BB_expfexit_478;
LEGUP_F_main_BB_expfexit_478:
		next_state = LEGUP_function_call_479;
LEGUP_F_main_BB_expfexit_480:
		next_state = LEGUP_F_main_BB_expfexit_481;
LEGUP_F_main_BB_expfexit_481:
		next_state = LEGUP_F_main_BB_expfexit_482;
LEGUP_F_main_BB_expfexit_482:
		next_state = LEGUP_F_main_BB_expfexit_483;
LEGUP_F_main_BB_expfexit_483:
		next_state = LEGUP_F_main_BB_expfexit_484;
LEGUP_F_main_BB_expfexit_484:
		next_state = LEGUP_F_main_BB_expfexit_485;
LEGUP_F_main_BB_expfexit_485:
		next_state = LEGUP_F_main_BB_expfexit_486;
LEGUP_F_main_BB_expfexit_486:
		next_state = LEGUP_F_main_BB_expfexit_487;
LEGUP_F_main_BB_expfexit_487:
		next_state = LEGUP_F_main_BB_expfexit_488;
LEGUP_F_main_BB_expfexit_488:
		next_state = LEGUP_F_main_BB_expfexit_489;
LEGUP_F_main_BB_expfexit_489:
		next_state = LEGUP_F_main_BB_expfexit_490;
LEGUP_F_main_BB_expfexit_490:
		next_state = LEGUP_F_main_BB_expfexit_491;
LEGUP_F_main_BB_expfexit_491:
		next_state = LEGUP_F_main_BB_expfexit_492;
LEGUP_F_main_BB_expfexit_492:
		next_state = LEGUP_F_main_BB_expfexit_493;
LEGUP_F_main_BB_expfexit_493:
		next_state = LEGUP_F_main_BB_expfexit_494;
LEGUP_F_main_BB_expfexit_494:
		next_state = LEGUP_F_main_BB_expfexit_495;
LEGUP_F_main_BB_expfexit_495:
		next_state = LEGUP_F_main_BB_expfexit_496;
LEGUP_F_main_BB_expfexit_496:
		next_state = LEGUP_F_main_BB_expfexit_497;
LEGUP_F_main_BB_expfexit_497:
		next_state = LEGUP_F_main_BB_expfexit_498;
LEGUP_F_main_BB_expfexit_498:
		next_state = LEGUP_F_main_BB_expfexit_499;
LEGUP_F_main_BB_expfexit_499:
		next_state = LEGUP_F_main_BB_expfexit_500;
LEGUP_F_main_BB_expfexit_500:
		next_state = LEGUP_F_main_BB_expfexit_501;
LEGUP_F_main_BB_expfexit_501:
		next_state = LEGUP_F_main_BB_expfexit_502;
LEGUP_F_main_BB_expfexit_502:
		next_state = LEGUP_F_main_BB_expfexit_503;
LEGUP_F_main_BB_expfexit_503:
		next_state = LEGUP_F_main_BB_expfexit_504;
LEGUP_F_main_BB_expfexit_504:
		next_state = LEGUP_F_main_BB_expfexit_505;
LEGUP_F_main_BB_expfexit_505:
		next_state = LEGUP_F_main_BB_expfexit_506;
LEGUP_F_main_BB_expfexit_506:
	if ((main_expfexit_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB_fusionloop_exitdim0_507;
	else if ((main_expfexit_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_1;
LEGUP_F_main_BB_fusionloop_bodydim0_1:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_2;
LEGUP_F_main_BB_fusionloop_bodydim0_2:
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_3;
LEGUP_F_main_BB_fusionloop_bodydim0_3:
		next_state = LEGUP_function_call_4;
LEGUP_F_main_BB_fusionloop_bodydim0_5:
	if ((main_fusionloop_bodydim0_5 == 1'd1))
		next_state = LEGUP_F_main_BB__6_6;
	else if ((main_fusionloop_bodydim0_5 == 1'd0))
		next_state = LEGUP_F_main_BB__8_21;
LEGUP_F_main_BB_fusionloop_exitdim0_507:
		next_state = LEGUP_F_main_BB_fusionloop_exitdim0_508;
LEGUP_F_main_BB_fusionloop_exitdim0_508:
		next_state = LEGUP_F_main_BB_fusionloop_exitdim0_509;
LEGUP_F_main_BB_fusionloop_exitdim0_509:
		next_state = LEGUP_0;
LEGUP_F_main_BB_threadpresplit_25:
	if ((main_threadpresplit_17 == 1'd1))
		next_state = LEGUP_F_main_BB__18_26;
	else if ((main_threadpresplit_17 == 1'd0))
		next_state = LEGUP_F_main_BB__40_109;
LEGUP_function_call_4:
	if ((tanhf_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_fusionloop_bodydim0_5;
LEGUP_function_call_479:
	if ((tanhf_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_expfexit_480;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %lo.i.i.0 = phi float [ undef, %fusion.loop_body.dim.0.lr.ph ], [ %lo.i.i.3, %expf.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_fusionloop_bodydim0_loii0 = 0;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %lo.i.i.0 = phi float [ undef, %fusion.loop_body.dim.0.lr.ph ], [ %lo.i.i.3, %expf.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_expfexit_506) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond1_reg == 1'd0))) */ begin
		main_fusionloop_bodydim0_loii0 = main_expfexit_loii3_reg;
	end
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %lo.i.i.0 = phi float [ undef, %fusion.loop_body.dim.0.lr.ph ], [ %lo.i.i.3, %expf.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_fusionloop_bodydim0_loii0_reg <= main_fusionloop_bodydim0_loii0;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_loii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_loii0_reg"); $finish; end
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %lo.i.i.0 = phi float [ undef, %fusion.loop_body.dim.0.lr.ph ], [ %lo.i.i.3, %expf.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_expfexit_506) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond1_reg == 1'd0))) begin
		main_fusionloop_bodydim0_loii0_reg <= main_fusionloop_bodydim0_loii0;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_loii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_loii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %hi.i.i.0 = phi float [ undef, %fusion.loop_body.dim.0.lr.ph ], [ %hi.i.i.3, %expf.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_fusionloop_bodydim0_hiii0 = 0;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %hi.i.i.0 = phi float [ undef, %fusion.loop_body.dim.0.lr.ph ], [ %hi.i.i.3, %expf.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_expfexit_506) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond1_reg == 1'd0))) */ begin
		main_fusionloop_bodydim0_hiii0 = main_expfexit_hiii3_reg;
	end
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %hi.i.i.0 = phi float [ undef, %fusion.loop_body.dim.0.lr.ph ], [ %hi.i.i.3, %expf.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_fusionloop_bodydim0_hiii0_reg <= main_fusionloop_bodydim0_hiii0;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_hiii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_hiii0_reg"); $finish; end
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %hi.i.i.0 = phi float [ undef, %fusion.loop_body.dim.0.lr.ph ], [ %hi.i.i.3, %expf.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_expfexit_506) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond1_reg == 1'd0))) begin
		main_fusionloop_bodydim0_hiii0_reg <= main_fusionloop_bodydim0_hiii0;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_hiii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_hiii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %fusion.indvar.dim.02 = phi i64 [ 0, %fusion.loop_body.dim.0.lr.ph ], [ %87, %expf.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_fusionloop_bodydim0_fusionindvardim02 = 64'd0;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %fusion.indvar.dim.02 = phi i64 [ 0, %fusion.loop_body.dim.0.lr.ph ], [ %87, %expf.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_expfexit_506) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond1_reg == 1'd0))) */ begin
		main_fusionloop_bodydim0_fusionindvardim02 = main_expfexit_87_reg;
	end
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %fusion.indvar.dim.02 = phi i64 [ 0, %fusion.loop_body.dim.0.lr.ph ], [ %87, %expf.exit ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_fusionloop_bodydim0_fusionindvardim02_reg <= main_fusionloop_bodydim0_fusionindvardim02;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_fusionindvardim02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_fusionindvardim02_reg"); $finish; end
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %fusion.indvar.dim.02 = phi i64 [ 0, %fusion.loop_body.dim.0.lr.ph ], [ %87, %expf.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_expfexit_506) & (memory_controller_waitrequest == 1'd0)) & (main_expfexit_exitcond1_reg == 1'd0))) begin
		main_fusionloop_bodydim0_fusionindvardim02_reg <= main_fusionloop_bodydim0_fusionindvardim02;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_fusionindvardim02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_fusionindvardim02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %scevgep = getelementptr [8 x float]* @temp0, i64 0, i64 %fusion.indvar.dim.02*/
		main_fusionloop_bodydim0_scevgep = (`TAG_g_temp0_a + (64'd4 * main_fusionloop_bodydim0_fusionindvardim02_reg));
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %scevgep = getelementptr [8 x float]* @temp0, i64 0, i64 %fusion.indvar.dim.02*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_1)) begin
		main_fusionloop_bodydim0_scevgep_reg <= main_fusionloop_bodydim0_scevgep;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %scevgep2 = getelementptr [8 x float]* @param0, i64 0, i64 %fusion.indvar.dim.02*/
		main_fusionloop_bodydim0_scevgep2 = (`TAG_g_param0_a + (64'd4 * main_fusionloop_bodydim0_fusionindvardim02_reg));
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %0 = load volatile float* %scevgep2, align 4*/
		main_fusionloop_bodydim0_0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
		main_fusionloop_bodydim0_1 = tanhf_return_val_reg;
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		main_fusionloop_bodydim0_1_reg <= main_fusionloop_bodydim0_1;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %2 = bitcast float %1 to i32*/
		main_fusionloop_bodydim0_2 = main_fusionloop_bodydim0_1_reg;
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %2 = bitcast float %1 to i32*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_5)) begin
		main_fusionloop_bodydim0_2_reg <= main_fusionloop_bodydim0_2;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %3 = lshr i32 %2, 31*/
		main_fusionloop_bodydim0_3 = (main_fusionloop_bodydim0_2 >>> (32'd31 % 32));
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %3 = lshr i32 %2, 31*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_5)) begin
		main_fusionloop_bodydim0_3_reg <= main_fusionloop_bodydim0_3;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %4 = and i32 %2, 2147483647*/
		main_fusionloop_bodydim0_4 = (main_fusionloop_bodydim0_2 & 32'd2147483647);
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %4 = and i32 %2, 2147483647*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_5)) begin
		main_fusionloop_bodydim0_4_reg <= main_fusionloop_bodydim0_4;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_fusionloop_bodydim0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %5 = icmp ugt i32 %4, 2139095040*/
		main_fusionloop_bodydim0_5 = (main_fusionloop_bodydim0_4 > 32'd2139095040);
end
always @(*) begin
	main_6_7 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %8*/
	/*   %9 = icmp eq i32 %4, 2139095040*/
		main_8_9 = (main_fusionloop_bodydim0_4_reg == 32'd2139095040);
end
always @(*) begin
	/* main: %10*/
	/*   %11 = icmp eq i32 %3, 0*/
		main_10_11 = (main_fusionloop_bodydim0_3_reg == 32'd0);
end
always @(*) begin
	/* main: %10*/
	/*   %. = select i1 %11, float %1, float 0.000000e+00*/
		main_10_ = (main_10_11 ? main_fusionloop_bodydim0_1_reg : 32'h0);
end
always @(*) begin
	/* main: %12*/
	/*   %13 = icmp sgt i32 %2, 1118925335*/
		main_12_13 = ($signed(main_fusionloop_bodydim0_2_reg) > $signed(32'd1118925335));
end
always @(*) begin
	/* main: %14*/
	/*   %15 = icmp slt i32 %2, 0*/
		main_14_15 = ($signed(main_fusionloop_bodydim0_2_reg) < $signed(32'd0));
end
always @(*) begin
	/* main: %14*/
	/*   %16 = icmp ugt i32 %4, 1120924085*/
		main_14_16 = (main_fusionloop_bodydim0_4_reg > 32'd1120924085);
end
always @(*) begin
	/* main: %14*/
	/*   %or.cond = and i1 %15, %16*/
		main_14_orcond = (main_14_15 & main_14_16);
end
always @(*) begin
	/* main: %thread-pre-split*/
	/*   %17 = icmp ugt i32 %4, 1051816472*/
		main_threadpresplit_17 = (main_fusionloop_bodydim0_4_reg > 32'd1051816472);
end
always @(*) begin
	/* main: %18*/
	/*   %19 = icmp ult i32 %4, 1065686418*/
		main_18_19 = (main_fusionloop_bodydim0_4_reg < 32'd1065686418);
end
always @(*) begin
	/* main: %20*/
	/*   %21 = zext i32 %3 to i64*/
		main_20_21 = main_fusionloop_bodydim0_3_reg;
end
always @(*) begin
	/* main: %20*/
	/*   %22 = getelementptr inbounds [2 x float]* @ln2HI31, i64 0, i64 %21*/
		main_20_22 = (`TAG_g_ln2HI31_a + (64'd4 * main_20_21));
end
always @(*) begin
	/* main: %20*/
	/*   %23 = load float* %22, align 4*/
		main_20_23 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %20*/
	/*   %24 = getelementptr inbounds [2 x float]* @ln2LO32, i64 0, i64 %21*/
		main_20_24 = (`TAG_g_ln2LO32_a + (64'd4 * main_20_21));
end
always @(*) begin
	/* main: %20*/
	/*   %25 = load float* %24, align 4*/
		main_20_25 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %20*/
	/*   %26 = xor i32 %3, 1*/
		main_20_26 = (main_fusionloop_bodydim0_3_reg ^ 32'd1);
end
always @(*) begin
	/* main: %20*/
	/*   %27 = sub nsw i32 %26, %3*/
		main_20_27 = (main_20_26 - main_fusionloop_bodydim0_3_reg);
end
always @(posedge clk) begin
	/* main: %20*/
	/*   %27 = sub nsw i32 %26, %3*/
	if ((cur_state == LEGUP_F_main_BB__20_27)) begin
		main_20_27_reg <= main_20_27;
		if (start == 1'b0 && ^(main_20_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_20_27_reg"); $finish; end
	end
end
always @(*) begin
	main_28_29 = main_altfp_multiply_32_0;
end
always @(*) begin
	/* main: %28*/
	/*   %30 = zext i32 %3 to i64*/
		main_28_30 = main_fusionloop_bodydim0_3_reg;
end
always @(*) begin
	/* main: %28*/
	/*   %31 = getelementptr inbounds [2 x float]* @halF33, i64 0, i64 %30*/
		main_28_31 = (`TAG_g_halF33_a + (64'd4 * main_28_30));
end
always @(*) begin
	/* main: %28*/
	/*   %32 = load float* %31, align 4*/
		main_28_32 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %32 = load float* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__28_32)) begin
		main_28_32_reg <= main_28_32;
		if (start == 1'b0 && ^(main_28_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_32_reg"); $finish; end
	end
end
always @(*) begin
	main_28_33 = main_altfp_add_32_0;
end
always @(*) begin
	main_28_34 = main_altfp_fptosi_32_0;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %34 = fptosi float %33 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_61)) begin
		main_28_34_reg <= main_28_34;
		if (start == 1'b0 && ^(main_28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_34_reg"); $finish; end
	end
	/* main: %28*/
	/*   %34 = fptosi float %33 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_61)) begin
		main_28_34_reg <= main_28_34;
		if (start == 1'b0 && ^(main_28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_34_reg"); $finish; end
	end
end
always @(*) begin
	main_28_35 = main_altfp_sitofp_32_0;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %35 = sitofp i32 %34 to float*/
	if ((cur_state == LEGUP_F_main_BB__28_67)) begin
		main_28_35_reg <= main_28_35;
		if (start == 1'b0 && ^(main_28_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_35_reg"); $finish; end
	end
	/* main: %28*/
	/*   %35 = sitofp i32 %34 to float*/
	if ((cur_state == LEGUP_F_main_BB__28_67)) begin
		main_28_35_reg <= main_28_35;
		if (start == 1'b0 && ^(main_28_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_35_reg"); $finish; end
	end
end
always @(*) begin
	main_28_36 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %36 = fmul float %35, 0x3FE62E3000000000*/
	if ((cur_state == LEGUP_F_main_BB__28_78)) begin
		main_28_36_reg <= main_28_36;
		if (start == 1'b0 && ^(main_28_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_36_reg"); $finish; end
	end
	/* main: %28*/
	/*   %36 = fmul float %35, 0x3FE62E3000000000*/
	if ((cur_state == LEGUP_F_main_BB__28_78)) begin
		main_28_36_reg <= main_28_36;
		if (start == 1'b0 && ^(main_28_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_36_reg"); $finish; end
	end
	/* main: %46*/
	/*   %48 = fmul float %47, 0x3E66376980000000*/
	if ((cur_state == LEGUP_F_main_BB__46_162)) begin
		main_28_36_reg <= main_46_48;
		if (start == 1'b0 && ^(main_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_36_reg"); $finish; end
	end
	/* main: %46*/
	/*   %50 = fmul float %47, %49*/
	if ((cur_state == LEGUP_F_main_BB__46_187)) begin
		main_28_36_reg <= main_46_50;
		if (start == 1'b0 && ^(main_46_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_36_reg"); $finish; end
	end
	/* main: %46*/
	/*   %52 = fmul float %47, %51*/
	if ((cur_state == LEGUP_F_main_BB__46_212)) begin
		main_28_36_reg <= main_46_52;
		if (start == 1'b0 && ^(main_46_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_36_reg"); $finish; end
	end
	/* main: %46*/
	/*   %54 = fmul float %47, %53*/
	if ((cur_state == LEGUP_F_main_BB__46_237)) begin
		main_28_36_reg <= main_46_54;
		if (start == 1'b0 && ^(main_46_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_36_reg"); $finish; end
	end
	/* main: %46*/
	/*   %56 = fmul float %47, %55*/
	if ((cur_state == LEGUP_F_main_BB__46_262)) begin
		main_28_36_reg <= main_46_56;
		if (start == 1'b0 && ^(main_46_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_36_reg"); $finish; end
	end
end
always @(*) begin
	main_28_37 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %37 = fmul float %35, 0x3EE2FEFA20000000*/
	if ((cur_state == LEGUP_F_main_BB__28_79)) begin
		main_28_37_reg <= main_28_37;
		if (start == 1'b0 && ^(main_28_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_37_reg"); $finish; end
	end
	/* main: %28*/
	/*   %37 = fmul float %35, 0x3EE2FEFA20000000*/
	if ((cur_state == LEGUP_F_main_BB__28_79)) begin
		main_28_37_reg <= main_28_37;
		if (start == 1'b0 && ^(main_28_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_37_reg"); $finish; end
	end
	/* main: %46*/
	/*   %59 = fmul float %.048, %57*/
	if ((cur_state == LEGUP_F_main_BB__46_287)) begin
		main_28_37_reg <= main_46_59;
		if (start == 1'b0 && ^(main_46_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %k.i.i.0 = phi i32 [ %27, %20 ], [ %34, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__20_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_kii0 = main_20_27_reg;
	end
	/* main: %38*/
	/*   %k.i.i.0 = phi i32 [ %27, %20 ], [ %34, %28 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__28_79) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_38_kii0 = main_28_34_reg;
	end
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %k.i.i.0 = phi i32 [ %27, %20 ], [ %34, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__20_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_kii0_reg <= main_38_kii0;
		if (start == 1'b0 && ^(main_38_kii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_kii0_reg"); $finish; end
	end
	/* main: %38*/
	/*   %k.i.i.0 = phi i32 [ %27, %20 ], [ %34, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__28_79) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_kii0_reg <= main_38_kii0;
		if (start == 1'b0 && ^(main_38_kii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_kii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %lo.i.i.1 = phi float [ %25, %20 ], [ %37, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__20_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_loii1 = main_20_25;
	end
	/* main: %38*/
	/*   %lo.i.i.1 = phi float [ %25, %20 ], [ %37, %28 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__28_79) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_38_loii1 = main_28_37;
	end
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %lo.i.i.1 = phi float [ %25, %20 ], [ %37, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__20_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_loii1_reg <= main_38_loii1;
		if (start == 1'b0 && ^(main_38_loii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_loii1_reg"); $finish; end
	end
	/* main: %38*/
	/*   %lo.i.i.1 = phi float [ %25, %20 ], [ %37, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__28_79) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_loii1_reg <= main_38_loii1;
		if (start == 1'b0 && ^(main_38_loii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_loii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %38*/
	/*   %.pn = phi float [ %23, %20 ], [ %36, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__20_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_pn = main_20_23;
	end
	/* main: %38*/
	/*   %.pn = phi float [ %23, %20 ], [ %36, %28 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__28_79) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_38_pn = main_28_36_reg;
	end
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %.pn = phi float [ %23, %20 ], [ %36, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__20_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_pn_reg <= main_38_pn;
		if (start == 1'b0 && ^(main_38_pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_pn_reg"); $finish; end
	end
	/* main: %38*/
	/*   %.pn = phi float [ %23, %20 ], [ %36, %28 ]*/
	if (((cur_state == LEGUP_F_main_BB__28_79) & (memory_controller_waitrequest == 1'd0))) begin
		main_38_pn_reg <= main_38_pn;
		if (start == 1'b0 && ^(main_38_pn) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_pn_reg"); $finish; end
	end
end
always @(*) begin
	main_38_hiii1 = main_altfp_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %hi.i.i.1 = fsub float %1, %.pn*/
	if ((cur_state == LEGUP_F_main_BB__38_94)) begin
		main_38_hiii1_reg <= main_38_hiii1;
		if (start == 1'b0 && ^(main_38_hiii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_hiii1_reg"); $finish; end
	end
	/* main: %38*/
	/*   %hi.i.i.1 = fsub float %1, %.pn*/
	if ((cur_state == LEGUP_F_main_BB__38_94)) begin
		main_38_hiii1_reg <= main_38_hiii1;
		if (start == 1'b0 && ^(main_38_hiii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_hiii1_reg"); $finish; end
	end
	/* main: %60*/
	/*   %63 = fsub float %62, %.048*/
	if ((cur_state == LEGUP_F_main_BB__60_349)) begin
		main_38_hiii1_reg <= main_60_63;
		if (start == 1'b0 && ^(main_60_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_hiii1_reg"); $finish; end
	end
	/* main: %65*/
	/*   %66 = fsub float 2.000000e+00, %57*/
	if ((cur_state == LEGUP_F_main_BB__65_378)) begin
		main_38_hiii1_reg <= main_65_66;
		if (start == 1'b0 && ^(main_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_hiii1_reg"); $finish; end
	end
	/* main: %65*/
	/*   %68 = fsub float %lo.i.i.2, %67*/
	if ((cur_state == LEGUP_F_main_BB__65_425)) begin
		main_38_hiii1_reg <= main_65_68;
		if (start == 1'b0 && ^(main_65_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_hiii1_reg"); $finish; end
	end
	/* main: %65*/
	/*   %70 = fsub float 1.000000e+00, %69*/
	if ((cur_state == LEGUP_F_main_BB__65_453)) begin
		main_38_hiii1_reg <= main_65_70;
		if (start == 1'b0 && ^(main_65_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_hiii1_reg"); $finish; end
	end
end
always @(*) begin
	main_38_39 = main_altfp_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %38*/
	/*   %39 = fsub float %hi.i.i.1, %lo.i.i.1*/
	if ((cur_state == LEGUP_F_main_BB__38_108)) begin
		main_38_39_reg <= main_38_39;
		if (start == 1'b0 && ^(main_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_39_reg"); $finish; end
	end
	/* main: %38*/
	/*   %39 = fsub float %hi.i.i.1, %lo.i.i.1*/
	if ((cur_state == LEGUP_F_main_BB__38_108)) begin
		main_38_39_reg <= main_38_39;
		if (start == 1'b0 && ^(main_38_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_39_reg"); $finish; end
	end
	/* main: %46*/
	/*   %57 = fsub float %.048, %56*/
	if ((cur_state == LEGUP_F_main_BB__46_276)) begin
		main_38_39_reg <= main_46_57;
		if (start == 1'b0 && ^(main_46_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_38_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %41 = icmp ult i32 %4, 830472192*/
		main_40_41 = (main_fusionloop_bodydim0_4_reg < 32'd830472192);
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %41 = icmp ult i32 %4, 830472192*/
	if ((cur_state == LEGUP_F_main_BB__40_109)) begin
		main_40_41_reg <= main_40_41;
		if (start == 1'b0 && ^(main_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_41_reg"); $finish; end
	end
end
always @(*) begin
	main_40_42 = main_altfp_add_32_0;
end
always @(*) begin
	main_40_43 = altfp_compare32_1_main_40_43_out;
end
always @(*) begin
	/* main: %40*/
	/*   %or.cond50 = and i1 %41, %43*/
		main_40_orcond50 = (main_40_41_reg & main_40_43);
end
always @(*) begin
	main_44_45 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %46*/
	/*   %k.i.i.1 = phi i32 [ %k.i.i.0, %38 ], [ 0, %40 ]*/
	if (((cur_state == LEGUP_F_main_BB__38_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_46_kii1 = main_38_kii0_reg;
	end
	/* main: %46*/
	/*   %k.i.i.1 = phi i32 [ %k.i.i.0, %38 ], [ 0, %40 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__40_124) & (memory_controller_waitrequest == 1'd0)) & (main_40_orcond50 == 1'd0))) */ begin
		main_46_kii1 = 32'd0;
	end
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %k.i.i.1 = phi i32 [ %k.i.i.0, %38 ], [ 0, %40 ]*/
	if (((cur_state == LEGUP_F_main_BB__38_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_46_kii1_reg <= main_46_kii1;
		if (start == 1'b0 && ^(main_46_kii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_kii1_reg"); $finish; end
	end
	/* main: %46*/
	/*   %k.i.i.1 = phi i32 [ %k.i.i.0, %38 ], [ 0, %40 ]*/
	if ((((cur_state == LEGUP_F_main_BB__40_124) & (memory_controller_waitrequest == 1'd0)) & (main_40_orcond50 == 1'd0))) begin
		main_46_kii1_reg <= main_46_kii1;
		if (start == 1'b0 && ^(main_46_kii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_kii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %lo.i.i.2 = phi float [ %lo.i.i.1, %38 ], [ %lo.i.i.0, %40 ]*/
	if (((cur_state == LEGUP_F_main_BB__38_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_46_loii2 = main_38_loii1_reg;
	end
	/* main: %46*/
	/*   %lo.i.i.2 = phi float [ %lo.i.i.1, %38 ], [ %lo.i.i.0, %40 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__40_124) & (memory_controller_waitrequest == 1'd0)) & (main_40_orcond50 == 1'd0))) */ begin
		main_46_loii2 = main_fusionloop_bodydim0_loii0_reg;
	end
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %lo.i.i.2 = phi float [ %lo.i.i.1, %38 ], [ %lo.i.i.0, %40 ]*/
	if (((cur_state == LEGUP_F_main_BB__38_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_46_loii2_reg <= main_46_loii2;
		if (start == 1'b0 && ^(main_46_loii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_loii2_reg"); $finish; end
	end
	/* main: %46*/
	/*   %lo.i.i.2 = phi float [ %lo.i.i.1, %38 ], [ %lo.i.i.0, %40 ]*/
	if ((((cur_state == LEGUP_F_main_BB__40_124) & (memory_controller_waitrequest == 1'd0)) & (main_40_orcond50 == 1'd0))) begin
		main_46_loii2_reg <= main_46_loii2;
		if (start == 1'b0 && ^(main_46_loii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_loii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %hi.i.i.2 = phi float [ %hi.i.i.1, %38 ], [ %hi.i.i.0, %40 ]*/
	if (((cur_state == LEGUP_F_main_BB__38_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_46_hiii2 = main_38_hiii1_reg;
	end
	/* main: %46*/
	/*   %hi.i.i.2 = phi float [ %hi.i.i.1, %38 ], [ %hi.i.i.0, %40 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__40_124) & (memory_controller_waitrequest == 1'd0)) & (main_40_orcond50 == 1'd0))) */ begin
		main_46_hiii2 = main_fusionloop_bodydim0_hiii0_reg;
	end
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %hi.i.i.2 = phi float [ %hi.i.i.1, %38 ], [ %hi.i.i.0, %40 ]*/
	if (((cur_state == LEGUP_F_main_BB__38_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_46_hiii2_reg <= main_46_hiii2;
		if (start == 1'b0 && ^(main_46_hiii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_hiii2_reg"); $finish; end
	end
	/* main: %46*/
	/*   %hi.i.i.2 = phi float [ %hi.i.i.1, %38 ], [ %hi.i.i.0, %40 ]*/
	if ((((cur_state == LEGUP_F_main_BB__40_124) & (memory_controller_waitrequest == 1'd0)) & (main_40_orcond50 == 1'd0))) begin
		main_46_hiii2_reg <= main_46_hiii2;
		if (start == 1'b0 && ^(main_46_hiii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_hiii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %.048 = phi float [ %39, %38 ], [ %1, %40 ]*/
	if (((cur_state == LEGUP_F_main_BB__38_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_46_048 = main_38_39;
	end
	/* main: %46*/
	/*   %.048 = phi float [ %39, %38 ], [ %1, %40 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__40_124) & (memory_controller_waitrequest == 1'd0)) & (main_40_orcond50 == 1'd0))) */ begin
		main_46_048 = main_fusionloop_bodydim0_1_reg;
	end
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %.048 = phi float [ %39, %38 ], [ %1, %40 ]*/
	if (((cur_state == LEGUP_F_main_BB__38_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_46_048_reg <= main_46_048;
		if (start == 1'b0 && ^(main_46_048) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_048_reg"); $finish; end
	end
	/* main: %46*/
	/*   %.048 = phi float [ %39, %38 ], [ %1, %40 ]*/
	if ((((cur_state == LEGUP_F_main_BB__40_124) & (memory_controller_waitrequest == 1'd0)) & (main_40_orcond50 == 1'd0))) begin
		main_46_048_reg <= main_46_048;
		if (start == 1'b0 && ^(main_46_048) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_048_reg"); $finish; end
	end
end
always @(*) begin
	main_46_47 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %47 = fmul float %.048, %.048*/
	if ((cur_state == LEGUP_F_main_BB__46_151)) begin
		main_46_47_reg <= main_46_47;
		if (start == 1'b0 && ^(main_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_47_reg"); $finish; end
	end
	/* main: %46*/
	/*   %47 = fmul float %.048, %.048*/
	if ((cur_state == LEGUP_F_main_BB__46_151)) begin
		main_46_47_reg <= main_46_47;
		if (start == 1'b0 && ^(main_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_47_reg"); $finish; end
	end
	/* main: %28*/
	/*   %29 = fmul float %1, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_main_BB__28_41)) begin
		main_46_47_reg <= main_28_29;
		if (start == 1'b0 && ^(main_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_47_reg"); $finish; end
	end
	/* main: %77*/
	/*   %81 = fmul float %80, 0x39B0000000000000*/
	if ((cur_state == LEGUP_F_main_BB__77_466)) begin
		main_46_47_reg <= main_77_81;
		if (start == 1'b0 && ^(main_77_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_47_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.op = fmul float %.0, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_478)) begin
		main_46_47_reg <= main_expfexit_op;
		if (start == 1'b0 && ^(main_expfexit_op) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_47_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %85 = fmul float %84, 5.000000e-01*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_491)) begin
		main_46_47_reg <= main_expfexit_85;
		if (start == 1'b0 && ^(main_expfexit_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_47_reg"); $finish; end
	end
end
always @(*) begin
	main_46_48 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_46_49 = main_altfp_add_32_0;
end
always @(*) begin
	main_46_50 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_46_51 = main_altfp_add_32_0;
end
always @(*) begin
	main_46_52 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_46_53 = main_altfp_add_32_0;
end
always @(*) begin
	main_46_54 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_46_55 = main_altfp_add_32_0;
end
always @(*) begin
	main_46_56 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_46_57 = main_altfp_subtract_32_0;
end
always @(*) begin
/* main: %46*/
/*   %57 = fsub float %.048, %56*/
	main_46_57_reg = main_38_39_reg;
end
always @(*) begin
	/* main: %46*/
	/*   %58 = icmp eq i32 %k.i.i.1, 0*/
		main_46_58 = (main_46_kii1_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %58 = icmp eq i32 %k.i.i.1, 0*/
	if ((cur_state == LEGUP_F_main_BB__46_140)) begin
		main_46_58_reg <= main_46_58;
		if (start == 1'b0 && ^(main_46_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_58_reg"); $finish; end
	end
end
always @(*) begin
	main_46_59 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %46*/
/*   %59 = fmul float %.048, %57*/
	main_46_59_reg = main_28_37_reg;
end
always @(*) begin
	main_60_61 = main_altfp_add_32_0;
end
always @(*) begin
	main_60_62 = main_altfp_divide_32_0;
end
always @(*) begin
	main_60_63 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_60_64 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_65_66 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_65_67 = main_altfp_divide_32_0;
end
always @(*) begin
	main_65_68 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_65_69 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_65_70 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %65*/
	/*   %71 = icmp sgt i32 %k.i.i.1, -126*/
		main_65_71 = ($signed(main_46_kii1_reg) > $signed(-32'd126));
end
always @(posedge clk) begin
	/* main: %65*/
	/*   %71 = icmp sgt i32 %k.i.i.1, -126*/
	if ((cur_state == LEGUP_F_main_BB__65_364)) begin
		main_65_71_reg <= main_65_71;
		if (start == 1'b0 && ^(main_65_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_65_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %65*/
	/*   %72 = bitcast float %70 to i32*/
		main_65_72 = main_65_70;
end
always @(posedge clk) begin
	/* main: %65*/
	/*   %72 = bitcast float %70 to i32*/
	if ((cur_state == LEGUP_F_main_BB__65_453)) begin
		main_65_72_reg <= main_65_72;
		if (start == 1'b0 && ^(main_65_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_65_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %65*/
	/*   %73 = shl i32 %k.i.i.1, 23*/
		main_65_73 = (main_46_kii1_reg <<< (32'd23 % 32));
end
always @(posedge clk) begin
	/* main: %65*/
	/*   %73 = shl i32 %k.i.i.1, 23*/
	if ((cur_state == LEGUP_F_main_BB__65_364)) begin
		main_65_73_reg <= main_65_73;
		if (start == 1'b0 && ^(main_65_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_65_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %74*/
	/*   %75 = add i32 %72, %73*/
		main_74_75 = (main_65_72_reg + main_65_73_reg);
end
always @(*) begin
	/* main: %74*/
	/*   %76 = bitcast i32 %75 to float*/
		main_74_76 = main_74_75;
end
always @(*) begin
	/* main: %77*/
	/*   %78 = add i32 %73, 838860800*/
		main_77_78 = (main_65_73_reg + 32'd838860800);
end
always @(*) begin
	/* main: %77*/
	/*   %79 = add i32 %72, %78*/
		main_77_79 = (main_65_72_reg + main_77_78);
end
always @(*) begin
	/* main: %77*/
	/*   %80 = bitcast i32 %79 to float*/
		main_77_80 = main_77_79;
end
always @(*) begin
	main_77_81 = main_altfp_multiply_32_0;
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__6_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3 = main_fusionloop_bodydim0_loii0_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__10_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3 = main_fusionloop_bodydim0_loii0_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__12_23) & (memory_controller_waitrequest == 1'd0)) & (main_12_13 == 1'd1))) begin
		main_expfexit_loii3 = main_fusionloop_bodydim0_loii0_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__14_24) & (memory_controller_waitrequest == 1'd0)) & (main_14_orcond == 1'd1))) begin
		main_expfexit_loii3 = main_fusionloop_bodydim0_loii0_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__44_139) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3 = main_fusionloop_bodydim0_loii0_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__60_363) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3 = main_46_loii2_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__74_454) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3 = main_46_loii2_reg;
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__77_466) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_expfexit_loii3 = main_46_loii2_reg;
	end
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__6_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__10_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__12_23) & (memory_controller_waitrequest == 1'd0)) & (main_12_13 == 1'd1))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__14_24) & (memory_controller_waitrequest == 1'd0)) & (main_14_orcond == 1'd1))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__44_139) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__60_363) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__74_454) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %lo.i.i.3 = phi float [ %lo.i.i.0, %6 ], [ %lo.i.i.2, %60 ], [ %lo.i.i.2, %74 ], [ %lo.i.i.2, %77 ], [ %lo.i.i.0, %44 ], [ %lo.i.i.0, %12 ], [ %lo.i.i.0, %10 ], [ %lo.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_466) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_loii3_reg <= main_expfexit_loii3;
		if (start == 1'b0 && ^(main_expfexit_loii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_loii3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__6_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3 = main_fusionloop_bodydim0_hiii0_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__10_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3 = main_fusionloop_bodydim0_hiii0_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__12_23) & (memory_controller_waitrequest == 1'd0)) & (main_12_13 == 1'd1))) begin
		main_expfexit_hiii3 = main_fusionloop_bodydim0_hiii0_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__14_24) & (memory_controller_waitrequest == 1'd0)) & (main_14_orcond == 1'd1))) begin
		main_expfexit_hiii3 = main_fusionloop_bodydim0_hiii0_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__44_139) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3 = main_fusionloop_bodydim0_hiii0_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__60_363) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3 = main_46_hiii2_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__74_454) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3 = main_46_hiii2_reg;
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__77_466) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_expfexit_hiii3 = main_46_hiii2_reg;
	end
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__6_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__10_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__12_23) & (memory_controller_waitrequest == 1'd0)) & (main_12_13 == 1'd1))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__14_24) & (memory_controller_waitrequest == 1'd0)) & (main_14_orcond == 1'd1))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__44_139) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__60_363) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__74_454) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %hi.i.i.3 = phi float [ %hi.i.i.0, %6 ], [ %hi.i.i.2, %60 ], [ %hi.i.i.2, %74 ], [ %hi.i.i.2, %77 ], [ %hi.i.i.0, %44 ], [ %hi.i.i.0, %12 ], [ %hi.i.i.0, %10 ], [ %hi.i.i.0, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_466) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_hiii3_reg <= main_expfexit_hiii3;
		if (start == 1'b0 && ^(main_expfexit_hiii3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_hiii3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__6_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0 = main_6_7;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__10_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0 = main_10_;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__12_23) & (memory_controller_waitrequest == 1'd0)) & (main_12_13 == 1'd1))) begin
		main_expfexit_0 = 32'h7F800000;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__14_24) & (memory_controller_waitrequest == 1'd0)) & (main_14_orcond == 1'd1))) begin
		main_expfexit_0 = 32'h0;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__44_139) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0 = main_44_45;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__60_363) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0 = main_60_64;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	else if (((cur_state == LEGUP_F_main_BB__74_454) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0 = main_74_76;
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__77_466) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_expfexit_0 = main_77_81;
	end
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__6_20) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__10_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__12_23) & (memory_controller_waitrequest == 1'd0)) & (main_12_13 == 1'd1))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	if ((((cur_state == LEGUP_F_main_BB__14_24) & (memory_controller_waitrequest == 1'd0)) & (main_14_orcond == 1'd1))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__44_139) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__60_363) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__74_454) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %.0 = phi float [ %7, %6 ], [ %64, %60 ], [ %76, %74 ], [ %81, %77 ], [ %45, %44 ], [ 0x7FF0000000000000, %12 ], [ %., %10 ], [ 0.000000e+00, %14 ]*/
	if (((cur_state == LEGUP_F_main_BB__77_466) & (memory_controller_waitrequest == 1'd0))) begin
		main_expfexit_0_reg <= main_expfexit_0;
		if (start == 1'b0 && ^(main_expfexit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_0_reg"); $finish; end
	end
end
always @(*) begin
	main_expfexit_82 = altfp_compare32_1_main_expfexit_82_out;
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %82 = fcmp ole float %.0, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_468)) begin
		main_expfexit_82_reg <= main_expfexit_82;
		if (start == 1'b0 && ^(main_expfexit_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_82_reg"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %82 = fcmp ole float %.0, 0.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_468)) begin
		main_expfexit_82_reg <= main_expfexit_82;
		if (start == 1'b0 && ^(main_expfexit_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_82_reg"); $finish; end
	end
end
always @(*) begin
	main_expfexit_op = main_altfp_multiply_32_0;
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %83 = select i1 %82, float 0.000000e+00, float %.op*/
		main_expfexit_83 = (main_expfexit_82_reg ? 32'h0 : main_expfexit_op);
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
		main_expfexit_84 = tanhf_return_val_reg;
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		main_expfexit_84_reg <= main_expfexit_84;
		if (start == 1'b0 && ^(main_expfexit_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_84_reg"); $finish; end
	end
end
always @(*) begin
	main_expfexit_85 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_expfexit_86 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %87 = add nuw nsw i64 %fusion.indvar.dim.02, 1*/
		main_expfexit_87 = (main_fusionloop_bodydim0_fusionindvardim02_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %87 = add nuw nsw i64 %fusion.indvar.dim.02, 1*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_467)) begin
		main_expfexit_87_reg <= main_expfexit_87;
		if (start == 1'b0 && ^(main_expfexit_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %expf.exit*/
	/*   %exitcond1 = icmp eq i64 %87, 8*/
		main_expfexit_exitcond1 = (main_expfexit_87 == 64'd8);
end
always @(posedge clk) begin
	/* main: %expf.exit*/
	/*   %exitcond1 = icmp eq i64 %87, 8*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_467)) begin
		main_expfexit_exitcond1_reg <= main_expfexit_exitcond1;
		if (start == 1'b0 && ^(main_expfexit_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_expfexit_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %fusion.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([8 x float]* @temp0, i64 0, i64 0), align 8*/
		main_fusionloop_exitdim0_leflow_retval = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_3)) begin
		tanhf_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_4)) begin
		tanhf_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_start"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_478)) begin
		tanhf_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_479)) begin
		tanhf_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_start"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_3)) begin
		tanhf_arg_x <= main_fusionloop_bodydim0_0;
		if (start == 1'b0 && ^(main_fusionloop_bodydim0_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_arg_x"); $finish; end
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_478)) begin
		tanhf_arg_x <= main_expfexit_83;
		if (start == 1'b0 && ^(main_expfexit_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_arg_x"); $finish; end
	end
end
always @(*) begin
	tanhf_finish_final = tanhf_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_3))) begin
		tanhf_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_finish_reg"); $finish; end
	end
	if (tanhf_finish) begin
		tanhf_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_expfexit_478))) begin
		tanhf_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_finish_reg"); $finish; end
	end
	if (tanhf_finish) begin
		tanhf_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_3))) begin
		tanhf_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_return_val_reg"); $finish; end
	end
	if (tanhf_finish) begin
		tanhf_return_val_reg <= tanhf_return_val;
		if (start == 1'b0 && ^(tanhf_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_expfexit_478))) begin
		tanhf_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_return_val_reg"); $finish; end
	end
	if (tanhf_finish) begin
		tanhf_return_val_reg <= tanhf_return_val;
		if (start == 1'b0 && ^(tanhf_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to tanhf_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		legup_function_call = 1'd1;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		legup_function_call = 1'd1;
	end
end
always @(*) begin
	/* main: %38*/
	/*   %hi.i.i.1 = fsub float %1, %.pn*/
	if ((cur_state == LEGUP_F_main_BB__38_80)) begin
		main_altfp_subtract_32_0_op0 = main_fusionloop_bodydim0_1_reg;
	end
	/* main: %38*/
	/*   %39 = fsub float %hi.i.i.1, %lo.i.i.1*/
	else if ((cur_state == LEGUP_F_main_BB__38_94)) begin
		main_altfp_subtract_32_0_op0 = main_38_hiii1;
	end
	/* main: %46*/
	/*   %57 = fsub float %.048, %56*/
	else if ((cur_state == LEGUP_F_main_BB__46_262)) begin
		main_altfp_subtract_32_0_op0 = main_46_048_reg;
	end
	/* main: %60*/
	/*   %63 = fsub float %62, %.048*/
	else if ((cur_state == LEGUP_F_main_BB__60_335)) begin
		main_altfp_subtract_32_0_op0 = main_60_62;
	end
	/* main: %60*/
	/*   %64 = fsub float 1.000000e+00, %63*/
	else if ((cur_state == LEGUP_F_main_BB__60_349)) begin
		main_altfp_subtract_32_0_op0 = 32'h3F800000;
	end
	/* main: %65*/
	/*   %66 = fsub float 2.000000e+00, %57*/
	else if ((cur_state == LEGUP_F_main_BB__65_364)) begin
		main_altfp_subtract_32_0_op0 = 32'h40000000;
	end
	/* main: %65*/
	/*   %68 = fsub float %lo.i.i.2, %67*/
	else if ((cur_state == LEGUP_F_main_BB__65_411)) begin
		main_altfp_subtract_32_0_op0 = main_46_loii2_reg;
	end
	/* main: %65*/
	/*   %69 = fsub float %68, %hi.i.i.2*/
	else if ((cur_state == LEGUP_F_main_BB__65_425)) begin
		main_altfp_subtract_32_0_op0 = main_65_68;
	end
	/* main: %65*/
	/*   %70 = fsub float 1.000000e+00, %69*/
	else /* if ((cur_state == LEGUP_F_main_BB__65_439)) */ begin
		main_altfp_subtract_32_0_op0 = 32'h3F800000;
	end
end
always @(*) begin
	/* main: %38*/
	/*   %hi.i.i.1 = fsub float %1, %.pn*/
	if ((cur_state == LEGUP_F_main_BB__38_80)) begin
		main_altfp_subtract_32_0_op1 = main_38_pn_reg;
	end
	/* main: %38*/
	/*   %39 = fsub float %hi.i.i.1, %lo.i.i.1*/
	else if ((cur_state == LEGUP_F_main_BB__38_94)) begin
		main_altfp_subtract_32_0_op1 = main_38_loii1_reg;
	end
	/* main: %46*/
	/*   %57 = fsub float %.048, %56*/
	else if ((cur_state == LEGUP_F_main_BB__46_262)) begin
		main_altfp_subtract_32_0_op1 = main_46_56;
	end
	/* main: %60*/
	/*   %63 = fsub float %62, %.048*/
	else if ((cur_state == LEGUP_F_main_BB__60_335)) begin
		main_altfp_subtract_32_0_op1 = main_46_048_reg;
	end
	/* main: %60*/
	/*   %64 = fsub float 1.000000e+00, %63*/
	else if ((cur_state == LEGUP_F_main_BB__60_349)) begin
		main_altfp_subtract_32_0_op1 = main_60_63;
	end
	/* main: %65*/
	/*   %66 = fsub float 2.000000e+00, %57*/
	else if ((cur_state == LEGUP_F_main_BB__65_364)) begin
		main_altfp_subtract_32_0_op1 = main_46_57_reg;
	end
	/* main: %65*/
	/*   %68 = fsub float %lo.i.i.2, %67*/
	else if ((cur_state == LEGUP_F_main_BB__65_411)) begin
		main_altfp_subtract_32_0_op1 = main_65_67;
	end
	/* main: %65*/
	/*   %69 = fsub float %68, %hi.i.i.2*/
	else if ((cur_state == LEGUP_F_main_BB__65_425)) begin
		main_altfp_subtract_32_0_op1 = main_46_hiii2_reg;
	end
	/* main: %65*/
	/*   %70 = fsub float 1.000000e+00, %69*/
	else /* if ((cur_state == LEGUP_F_main_BB__65_439)) */ begin
		main_altfp_subtract_32_0_op1 = main_65_69;
	end
end
always @(*) begin
	altfp_main_38_39_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_subtract_32_0 = altfp_subtractor_main_38_39_out;
end
always @(*) begin
	/* main: %6*/
	/*   %7 = fadd float %1, %1*/
	if ((cur_state == LEGUP_F_main_BB__6_6)) begin
		main_altfp_add_32_0_op0 = main_fusionloop_bodydim0_1_reg;
	end
	/* main: %28*/
	/*   %33 = fadd float %29, %32*/
	else if ((cur_state == LEGUP_F_main_BB__28_41)) begin
		main_altfp_add_32_0_op0 = main_28_29;
	end
	/* main: %40*/
	/*   %42 = fadd float %1, 0x46293E5940000000*/
	else if ((cur_state == LEGUP_F_main_BB__40_109)) begin
		main_altfp_add_32_0_op0 = main_fusionloop_bodydim0_1_reg;
	end
	/* main: %44*/
	/*   %45 = fadd float %1, 1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__44_125)) begin
		main_altfp_add_32_0_op0 = main_fusionloop_bodydim0_1_reg;
	end
	/* main: %46*/
	/*   %49 = fadd float %48, 0xBEBBBD41C0000000*/
	else if ((cur_state == LEGUP_F_main_BB__46_162)) begin
		main_altfp_add_32_0_op0 = main_46_48;
	end
	/* main: %46*/
	/*   %51 = fadd float %50, 0x3F11566AA0000000*/
	else if ((cur_state == LEGUP_F_main_BB__46_187)) begin
		main_altfp_add_32_0_op0 = main_46_50;
	end
	/* main: %46*/
	/*   %53 = fadd float %52, 0xBF66C16C20000000*/
	else if ((cur_state == LEGUP_F_main_BB__46_212)) begin
		main_altfp_add_32_0_op0 = main_46_52;
	end
	/* main: %46*/
	/*   %55 = fadd float %54, 0x3FC5555560000000*/
	else if ((cur_state == LEGUP_F_main_BB__46_237)) begin
		main_altfp_add_32_0_op0 = main_46_54;
	end
	/* main: %60*/
	/*   %61 = fadd float %57, -2.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__60_288)) begin
		main_altfp_add_32_0_op0 = main_46_57_reg;
	end
	/* main: %expf.exit*/
	/*   %86 = fadd float %85, 5.000000e-01*/
	else /* if ((cur_state == LEGUP_F_main_BB_expfexit_491)) */ begin
		main_altfp_add_32_0_op0 = main_expfexit_85;
	end
end
always @(*) begin
	/* main: %6*/
	/*   %7 = fadd float %1, %1*/
	if ((cur_state == LEGUP_F_main_BB__6_6)) begin
		main_altfp_add_32_0_op1 = main_fusionloop_bodydim0_1_reg;
	end
	/* main: %28*/
	/*   %33 = fadd float %29, %32*/
	else if ((cur_state == LEGUP_F_main_BB__28_41)) begin
		main_altfp_add_32_0_op1 = main_28_32_reg;
	end
	/* main: %40*/
	/*   %42 = fadd float %1, 0x46293E5940000000*/
	else if ((cur_state == LEGUP_F_main_BB__40_109)) begin
		main_altfp_add_32_0_op1 = 32'h7149F2CA;
	end
	/* main: %44*/
	/*   %45 = fadd float %1, 1.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__44_125)) begin
		main_altfp_add_32_0_op1 = 32'h3F800000;
	end
	/* main: %46*/
	/*   %49 = fadd float %48, 0xBEBBBD41C0000000*/
	else if ((cur_state == LEGUP_F_main_BB__46_162)) begin
		main_altfp_add_32_0_op1 = 32'hB5DDEA0E;
	end
	/* main: %46*/
	/*   %51 = fadd float %50, 0x3F11566AA0000000*/
	else if ((cur_state == LEGUP_F_main_BB__46_187)) begin
		main_altfp_add_32_0_op1 = 32'h388AB355;
	end
	/* main: %46*/
	/*   %53 = fadd float %52, 0xBF66C16C20000000*/
	else if ((cur_state == LEGUP_F_main_BB__46_212)) begin
		main_altfp_add_32_0_op1 = 32'hBB360B61;
	end
	/* main: %46*/
	/*   %55 = fadd float %54, 0x3FC5555560000000*/
	else if ((cur_state == LEGUP_F_main_BB__46_237)) begin
		main_altfp_add_32_0_op1 = 32'h3E2AAAAB;
	end
	/* main: %60*/
	/*   %61 = fadd float %57, -2.000000e+00*/
	else if ((cur_state == LEGUP_F_main_BB__60_288)) begin
		main_altfp_add_32_0_op1 = 32'hC0000000;
	end
	/* main: %expf.exit*/
	/*   %86 = fadd float %85, 5.000000e-01*/
	else /* if ((cur_state == LEGUP_F_main_BB_expfexit_491)) */ begin
		main_altfp_add_32_0_op1 = 32'h3F000000;
	end
end
always @(*) begin
	altfp_main_40_42_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_add_32_0 = altfp_adder_main_40_42_out;
end
always @(*) begin
	/* main: %28*/
	/*   %29 = fmul float %1, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_main_BB__28_30)) begin
		main_altfp_multiply_32_0_op0 = main_fusionloop_bodydim0_1_reg;
	end
	/* main: %28*/
	/*   %36 = fmul float %35, 0x3FE62E3000000000*/
	else if ((cur_state == LEGUP_F_main_BB__28_67)) begin
		main_altfp_multiply_32_0_op0 = main_28_35;
	end
	/* main: %28*/
	/*   %37 = fmul float %35, 0x3EE2FEFA20000000*/
	else if ((cur_state == LEGUP_F_main_BB__28_68)) begin
		main_altfp_multiply_32_0_op0 = main_28_35_reg;
	end
	/* main: %46*/
	/*   %47 = fmul float %.048, %.048*/
	else if ((cur_state == LEGUP_F_main_BB__46_140)) begin
		main_altfp_multiply_32_0_op0 = main_46_048_reg;
	end
	/* main: %46*/
	/*   %48 = fmul float %47, 0x3E66376980000000*/
	else if ((cur_state == LEGUP_F_main_BB__46_151)) begin
		main_altfp_multiply_32_0_op0 = main_46_47;
	end
	/* main: %46*/
	/*   %50 = fmul float %47, %49*/
	else if ((cur_state == LEGUP_F_main_BB__46_176)) begin
		main_altfp_multiply_32_0_op0 = main_46_47_reg;
	end
	/* main: %46*/
	/*   %52 = fmul float %47, %51*/
	else if ((cur_state == LEGUP_F_main_BB__46_201)) begin
		main_altfp_multiply_32_0_op0 = main_46_47_reg;
	end
	/* main: %46*/
	/*   %54 = fmul float %47, %53*/
	else if ((cur_state == LEGUP_F_main_BB__46_226)) begin
		main_altfp_multiply_32_0_op0 = main_46_47_reg;
	end
	/* main: %46*/
	/*   %56 = fmul float %47, %55*/
	else if ((cur_state == LEGUP_F_main_BB__46_251)) begin
		main_altfp_multiply_32_0_op0 = main_46_47_reg;
	end
	/* main: %46*/
	/*   %59 = fmul float %.048, %57*/
	else if ((cur_state == LEGUP_F_main_BB__46_276)) begin
		main_altfp_multiply_32_0_op0 = main_46_048_reg;
	end
	/* main: %77*/
	/*   %81 = fmul float %80, 0x39B0000000000000*/
	else if ((cur_state == LEGUP_F_main_BB__77_455)) begin
		main_altfp_multiply_32_0_op0 = main_77_80;
	end
	/* main: %expf.exit*/
	/*   %.op = fmul float %.0, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB_expfexit_467)) begin
		main_altfp_multiply_32_0_op0 = main_expfexit_0_reg;
	end
	/* main: %expf.exit*/
	/*   %85 = fmul float %84, 5.000000e-01*/
	else /* if ((cur_state == LEGUP_F_main_BB_expfexit_480)) */ begin
		main_altfp_multiply_32_0_op0 = main_expfexit_84_reg;
	end
end
always @(*) begin
	/* main: %28*/
	/*   %29 = fmul float %1, 0x3FF7154760000000*/
	if ((cur_state == LEGUP_F_main_BB__28_30)) begin
		main_altfp_multiply_32_0_op1 = 32'h3FB8AA3B;
	end
	/* main: %28*/
	/*   %36 = fmul float %35, 0x3FE62E3000000000*/
	else if ((cur_state == LEGUP_F_main_BB__28_67)) begin
		main_altfp_multiply_32_0_op1 = 32'h3F317180;
	end
	/* main: %28*/
	/*   %37 = fmul float %35, 0x3EE2FEFA20000000*/
	else if ((cur_state == LEGUP_F_main_BB__28_68)) begin
		main_altfp_multiply_32_0_op1 = 32'h3717F7D1;
	end
	/* main: %46*/
	/*   %47 = fmul float %.048, %.048*/
	else if ((cur_state == LEGUP_F_main_BB__46_140)) begin
		main_altfp_multiply_32_0_op1 = main_46_048_reg;
	end
	/* main: %46*/
	/*   %48 = fmul float %47, 0x3E66376980000000*/
	else if ((cur_state == LEGUP_F_main_BB__46_151)) begin
		main_altfp_multiply_32_0_op1 = 32'h3331BB4C;
	end
	/* main: %46*/
	/*   %50 = fmul float %47, %49*/
	else if ((cur_state == LEGUP_F_main_BB__46_176)) begin
		main_altfp_multiply_32_0_op1 = main_46_49;
	end
	/* main: %46*/
	/*   %52 = fmul float %47, %51*/
	else if ((cur_state == LEGUP_F_main_BB__46_201)) begin
		main_altfp_multiply_32_0_op1 = main_46_51;
	end
	/* main: %46*/
	/*   %54 = fmul float %47, %53*/
	else if ((cur_state == LEGUP_F_main_BB__46_226)) begin
		main_altfp_multiply_32_0_op1 = main_46_53;
	end
	/* main: %46*/
	/*   %56 = fmul float %47, %55*/
	else if ((cur_state == LEGUP_F_main_BB__46_251)) begin
		main_altfp_multiply_32_0_op1 = main_46_55;
	end
	/* main: %46*/
	/*   %59 = fmul float %.048, %57*/
	else if ((cur_state == LEGUP_F_main_BB__46_276)) begin
		main_altfp_multiply_32_0_op1 = main_46_57;
	end
	/* main: %77*/
	/*   %81 = fmul float %80, 0x39B0000000000000*/
	else if ((cur_state == LEGUP_F_main_BB__77_455)) begin
		main_altfp_multiply_32_0_op1 = 32'hD800000;
	end
	/* main: %expf.exit*/
	/*   %.op = fmul float %.0, 5.000000e-01*/
	else if ((cur_state == LEGUP_F_main_BB_expfexit_467)) begin
		main_altfp_multiply_32_0_op1 = 32'h3F000000;
	end
	/* main: %expf.exit*/
	/*   %85 = fmul float %84, 5.000000e-01*/
	else /* if ((cur_state == LEGUP_F_main_BB_expfexit_480)) */ begin
		main_altfp_multiply_32_0_op1 = 32'h3F000000;
	end
end
always @(*) begin
	altfp_main_46_47_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_multiply_32_0 = altfp_multiplier_main_46_47_out;
end
always @(*) begin
	/* main: %28*/
	/*   %34 = fptosi float %33 to i32*/
		main_altfp_fptosi_32_0_op0 = main_28_33;
end
always @(*) begin
	altfp_main_28_34_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_fptosi_32_0 = altfp_fptosi32_main_28_34_out;
end
always @(*) begin
	/* main: %28*/
	/*   %35 = sitofp i32 %34 to float*/
		main_altfp_sitofp_32_0_op0 = main_28_34;
end
always @(*) begin
	altfp_main_28_35_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_sitofp_32_0 = altfp_sitofp32_main_28_35_out;
end
always @(*) begin
	/* main: %60*/
	/*   %62 = fdiv float %59, %61*/
	if ((cur_state == LEGUP_F_main_BB__60_302)) begin
		main_altfp_divide_32_0_op0 = main_46_59_reg;
	end
	/* main: %65*/
	/*   %67 = fdiv float %59, %66*/
	else /* if ((cur_state == LEGUP_F_main_BB__65_378)) */ begin
		main_altfp_divide_32_0_op0 = main_46_59_reg;
	end
end
always @(*) begin
	/* main: %60*/
	/*   %62 = fdiv float %59, %61*/
	if ((cur_state == LEGUP_F_main_BB__60_302)) begin
		main_altfp_divide_32_0_op1 = main_60_61;
	end
	/* main: %65*/
	/*   %67 = fdiv float %59, %66*/
	else /* if ((cur_state == LEGUP_F_main_BB__65_378)) */ begin
		main_altfp_divide_32_0_op1 = main_65_66;
	end
end
always @(*) begin
	altfp_main_60_62_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	main_altfp_divide_32_0 = altfp_divider_main_60_62_out;
end
always @(*) begin
	altfp_main_40_43_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	altfp_main_expfexit_82_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   ret float %leflow_retval*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_509)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = tanhf_memory_controller_enable_a;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_a = tanhf_memory_controller_enable_a;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_enable_a = tanhf_memory_controller_enable_a;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_enable_a = tanhf_memory_controller_enable_a;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %0 = load volatile float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %20*/
	/*   %23 = load float* %22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %expf.exit*/
	/*   store volatile float %86, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_505)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tanhf_memory_controller_address_a;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tanhf_memory_controller_address_a;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tanhf_memory_controller_address_a;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tanhf_memory_controller_address_a;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %0 = load volatile float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_1)) begin
		memory_controller_address_a = main_fusionloop_bodydim0_scevgep2;
	end
	/* main: %20*/
	/*   %23 = load float* %22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_27)) begin
		memory_controller_address_a = main_20_22;
	end
	/* main: %expf.exit*/
	/*   store volatile float %86, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_505)) begin
		memory_controller_address_a = main_fusionloop_bodydim0_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = tanhf_memory_controller_write_enable_a;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_a = tanhf_memory_controller_write_enable_a;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_write_enable_a = tanhf_memory_controller_write_enable_a;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_write_enable_a = tanhf_memory_controller_write_enable_a;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %0 = load volatile float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %20*/
	/*   %23 = load float* %22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_27)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %expf.exit*/
	/*   store volatile float %86, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_505)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tanhf_memory_controller_in_a;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tanhf_memory_controller_in_a;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tanhf_memory_controller_in_a;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tanhf_memory_controller_in_a;
	end
	/* main: %expf.exit*/
	/*   store volatile float %86, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_505)) begin
		memory_controller_in_a = main_expfexit_86;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = tanhf_memory_controller_size_a;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_a[1:0] = tanhf_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_size_a[1:0] = tanhf_memory_controller_size_a;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_size_a[1:0] = tanhf_memory_controller_size_a;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %0 = load volatile float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_bodydim0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %20*/
	/*   %23 = load float* %22, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %expf.exit*/
	/*   store volatile float %86, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_expfexit_505)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = tanhf_memory_controller_enable_b;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_enable_b = tanhf_memory_controller_enable_b;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_enable_b = tanhf_memory_controller_enable_b;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_enable_b = tanhf_memory_controller_enable_b;
	end
	/* main: %20*/
	/*   %25 = load float* %24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %28*/
	/*   %32 = load float* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__28_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([8 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_507)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tanhf_memory_controller_address_b;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tanhf_memory_controller_address_b;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tanhf_memory_controller_address_b;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = tanhf_memory_controller_address_b;
	end
	/* main: %20*/
	/*   %25 = load float* %24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_27)) begin
		memory_controller_address_b = main_20_24;
	end
	/* main: %28*/
	/*   %32 = load float* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__28_30)) begin
		memory_controller_address_b = main_28_31;
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([8 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_507)) begin
		memory_controller_address_b = `TAG_g_temp0_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = tanhf_memory_controller_write_enable_b;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_write_enable_b = tanhf_memory_controller_write_enable_b;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_write_enable_b = tanhf_memory_controller_write_enable_b;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_write_enable_b = tanhf_memory_controller_write_enable_b;
	end
	/* main: %20*/
	/*   %25 = load float* %24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_27)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %28*/
	/*   %32 = load float* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__28_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([8 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_507)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tanhf_memory_controller_in_b;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tanhf_memory_controller_in_b;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tanhf_memory_controller_in_b;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = tanhf_memory_controller_in_b;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = tanhf_memory_controller_size_b;
	end
	/* main: %fusion.loop_body.dim.0*/
	/*   %1 = call fastcc float @tanhf(float %0)*/
	if ((cur_state == LEGUP_function_call_4)) begin
		memory_controller_size_b[1:0] = tanhf_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_size_b[1:0] = tanhf_memory_controller_size_b;
	end
	/* main: %expf.exit*/
	/*   %84 = call fastcc float @tanhf(float %83)*/
	if ((cur_state == LEGUP_function_call_479)) begin
		memory_controller_size_b[1:0] = tanhf_memory_controller_size_b;
	end
	/* main: %20*/
	/*   %25 = load float* %24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__20_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %28*/
	/*   %32 = load float* %31, align 4*/
	if ((cur_state == LEGUP_F_main_BB__28_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([8 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_507)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %fusion.loop_exit.dim.0*/
	/*   ret float %leflow_retval*/
	if ((cur_state == LEGUP_F_main_BB_fusionloop_exitdim0_509)) begin
		return_val <= main_fusionloop_exitdim0_leflow_retval;
		if (start == 1'b0 && ^(main_fusionloop_exitdim0_leflow_retval) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $writememh("memory_dump.txt",top_inst.memory_controller_inst.temp0.ram);
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
