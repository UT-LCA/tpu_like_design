//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Aug 11 21:17:01 2020
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 64
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @param0 = internal global [8 x float] zeroinitializer, align 8
`define TAG_g_param0 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_param0_a {`TAG_g_param0, 55'd0}
// @param1 = internal global [8 x float] zeroinitializer, align 8
`define TAG_g_param1 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_param1_a {`TAG_g_param1, 55'd0}
// @temp0 = internal global [8 x float] zeroinitializer, align 8
`define TAG_g_temp0 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_temp0_a {`TAG_g_temp0, 55'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [2:0] temp0_address_a;
reg [2:0] temp0_address_b;
reg temp0_write_enable_a;
reg temp0_write_enable_b;
reg [31:0] temp0_in_a;
reg [31:0] temp0_in_b;
wire [31:0] temp0_out_a;
wire [31:0] temp0_out_b;

// @temp0 = internal global [8 x float] zeroinitializer, align 8
ram_dual_port temp0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( temp0_address_a ),
	.address_b( temp0_address_b ),
	.wren_a( temp0_write_enable_a ),
	.wren_b( temp0_write_enable_b ),
	.data_a( temp0_in_a ),
	.data_b( temp0_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( temp0_out_a ),
	.q_b( temp0_out_b)
);
defparam temp0.width_a = 32;
defparam temp0.width_b = 32;
defparam temp0.widthad_a = 3;
defparam temp0.widthad_b = 3;
defparam temp0.width_be_a = 1;
defparam temp0.width_be_b = 1;
defparam temp0.numwords_a = 8;
defparam temp0.numwords_b = 8;
defparam temp0.latency = ram_latency;
defparam temp0.init_file = "temp0.mif";

reg [2:0] param1_address_a;
reg [2:0] param1_address_b;
reg param1_write_enable_a;
reg param1_write_enable_b;
reg [31:0] param1_in_a;
reg [31:0] param1_in_b;
wire [31:0] param1_out_a;
wire [31:0] param1_out_b;

// @param1 = internal global [8 x float] zeroinitializer, align 8
ram_dual_port param1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( param1_address_a ),
	.address_b( param1_address_b ),
	.wren_a( param1_write_enable_a ),
	.wren_b( param1_write_enable_b ),
	.data_a( param1_in_a ),
	.data_b( param1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( param1_out_a ),
	.q_b( param1_out_b)
);
defparam param1.width_a = 32;
defparam param1.width_b = 32;
defparam param1.widthad_a = 3;
defparam param1.widthad_b = 3;
defparam param1.width_be_a = 1;
defparam param1.width_be_b = 1;
defparam param1.numwords_a = 8;
defparam param1.numwords_b = 8;
defparam param1.latency = ram_latency;
defparam param1.init_file = "param1.mif";

reg [2:0] param0_address_a;
reg [2:0] param0_address_b;
reg param0_write_enable_a;
reg param0_write_enable_b;
reg [31:0] param0_in_a;
reg [31:0] param0_in_b;
wire [31:0] param0_out_a;
wire [31:0] param0_out_b;

// @param0 = internal global [8 x float] zeroinitializer, align 8
ram_dual_port param0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( param0_address_a ),
	.address_b( param0_address_b ),
	.wren_a( param0_write_enable_a ),
	.wren_b( param0_write_enable_b ),
	.data_a( param0_in_a ),
	.data_b( param0_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( param0_out_a ),
	.q_b( param0_out_b)
);
defparam param0.width_a = 32;
defparam param0.width_b = 32;
defparam param0.widthad_a = 3;
defparam param0.widthad_b = 3;
defparam param0.width_be_a = 1;
defparam param0.width_be_b = 1;
defparam param0.numwords_a = 8;
defparam param0.numwords_b = 8;
defparam param0.latency = ram_latency;
defparam param0.init_file = "param0.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_temp0_a;
assign select_temp0_a = (tag_a == `TAG_g_temp0);
reg [ram_latency:0] select_temp0_reg_a;
wire [31:0] memory_controller_temp0_out_a;
assign memory_controller_temp0_out_a = {32{ select_temp0_reg_a[ram_latency]}} & temp0_out_a;

wire select_param1_a;
assign select_param1_a = (tag_a == `TAG_g_param1);
reg [ram_latency:0] select_param1_reg_a;
wire [31:0] memory_controller_param1_out_a;
assign memory_controller_param1_out_a = {32{ select_param1_reg_a[ram_latency]}} & param1_out_a;

wire select_param0_a;
assign select_param0_a = (tag_a == `TAG_g_param0);
reg [ram_latency:0] select_param0_reg_a;
wire [31:0] memory_controller_param0_out_a;
assign memory_controller_param0_out_a = {32{ select_param0_reg_a[ram_latency]}} & param0_out_a;

always @(*)
begin
	temp0_address_a = memory_controller_address_a [3-1+2:2] & {3{select_temp0_a}};
	temp0_write_enable_a = memory_controller_write_enable_a & select_temp0_a;
	temp0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	param1_address_a = memory_controller_address_a [3-1+2:2] & {3{select_param1_a}};
	param1_write_enable_a = memory_controller_write_enable_a & select_param1_a;
	param1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	param0_address_a = memory_controller_address_a [3-1+2:2] & {3{select_param0_a}};
	param0_write_enable_a = memory_controller_write_enable_a & select_param0_a;
	param0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_temp0_reg_a[ram_latency]}} | {2{select_param1_reg_a[ram_latency]}} | {2{select_param0_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_temp0_out_a | memory_controller_param1_out_a | memory_controller_param0_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_temp0_reg_a[j+1] <= select_temp0_reg_a[j];
select_param1_reg_a[j+1] <= select_param1_reg_a[j];
select_param0_reg_a[j+1] <= select_param0_reg_a[j];
end
always @(*)
begin
select_temp0_reg_a[0] <= select_temp0_a;
select_param1_reg_a[0] <= select_param1_a;
select_param0_reg_a[0] <= select_param0_a;
end

reg [2:0] select_not_struct_b;

wire select_temp0_b;
assign select_temp0_b = (tag_b == `TAG_g_temp0);
reg [ram_latency:0] select_temp0_reg_b;
wire [31:0] memory_controller_temp0_out_b;
assign memory_controller_temp0_out_b = {32{ select_temp0_reg_b[ram_latency]}} & temp0_out_b;

wire select_param1_b;
assign select_param1_b = (tag_b == `TAG_g_param1);
reg [ram_latency:0] select_param1_reg_b;
wire [31:0] memory_controller_param1_out_b;
assign memory_controller_param1_out_b = {32{ select_param1_reg_b[ram_latency]}} & param1_out_b;

wire select_param0_b;
assign select_param0_b = (tag_b == `TAG_g_param0);
reg [ram_latency:0] select_param0_reg_b;
wire [31:0] memory_controller_param0_out_b;
assign memory_controller_param0_out_b = {32{ select_param0_reg_b[ram_latency]}} & param0_out_b;

always @(*)
begin
	temp0_address_b = memory_controller_address_b [3-1+2:2] & {3{select_temp0_b}};
	temp0_write_enable_b = memory_controller_write_enable_b & select_temp0_b;
	temp0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	param1_address_b = memory_controller_address_b [3-1+2:2] & {3{select_param1_b}};
	param1_write_enable_b = memory_controller_write_enable_b & select_param1_b;
	param1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	param0_address_b = memory_controller_address_b [3-1+2:2] & {3{select_param0_b}};
	param0_write_enable_b = memory_controller_write_enable_b & select_param0_b;
	param0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_temp0_reg_b[ram_latency]}} | {2{select_param1_reg_b[ram_latency]}} | {2{select_param0_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_temp0_out_b | memory_controller_param1_out_b | memory_controller_param0_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_temp0_reg_b[j+1] <= select_temp0_reg_b[j];
select_param1_reg_b[j+1] <= select_param1_reg_b[j];
select_param0_reg_b[j+1] <= select_param0_reg_b[j];
end
always @(*)
begin
select_temp0_reg_b[0] <= select_temp0_b;
select_param1_reg_b[0] <= select_param1_b;
select_param0_reg_b[0] <= select_param0_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_1 = 5'd1;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_2 = 5'd2;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_3 = 5'd3;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_4 = 5'd4;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_5 = 5'd5;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_6 = 5'd6;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_7 = 5'd7;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_8 = 5'd8;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_9 = 5'd9;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_10 = 5'd10;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_11 = 5'd11;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_12 = 5'd12;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_13 = 5'd13;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_14 = 5'd14;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_bodydim0_15 = 5'd15;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_exitdim0_16 = 5'd16;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_exitdim0_17 = 5'd17;
parameter [4:0] LEGUP_F_main_BB_multiplyloop_exitdim0_18 = 5'd18;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 55'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [63:0] main_multiplyloop_bodydim0_multiplyindvardim02;
reg [63:0] main_multiplyloop_bodydim0_multiplyindvardim02_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_multiplyloop_bodydim0_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_multiplyloop_bodydim0_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_multiplyloop_bodydim0_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_multiplyloop_bodydim0_scevgep3;
reg [31:0] main_multiplyloop_bodydim0_0;
reg [31:0] main_multiplyloop_bodydim0_1;
reg [31:0] main_multiplyloop_bodydim0_2;
reg [63:0] main_multiplyloop_bodydim0_3;
reg [63:0] main_multiplyloop_bodydim0_3_reg;
reg  main_multiplyloop_bodydim0_exitcond1;
reg  main_multiplyloop_bodydim0_exitcond1_reg;
reg [31:0] main_multiplyloop_exitdim0_leflow_retval;
reg [31:0] main_altfp_multiply_32_0_op0;
reg [31:0] main_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_main_multiplyloop_bodydim0_2_out;
reg  altfp_main_multiplyloop_bodydim0_2_en;
reg [31:0] main_altfp_multiply_32_0;

/*   %2 = fmul float %0, %1*/
altfp_multiplier_11 altfp_multiplier_11_main_multiplyloop_bodydim0_2 (
	.result (altfp_multiplier_main_multiplyloop_bodydim0_2_out),
	.dataa (main_altfp_multiply_32_0_op0),
	.datab (main_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_multiplyloop_bodydim0_2_en)
);



always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_1;
LEGUP_F_main_BB_multiplyloop_bodydim0_1:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_2;
LEGUP_F_main_BB_multiplyloop_bodydim0_10:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_11;
LEGUP_F_main_BB_multiplyloop_bodydim0_11:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_12;
LEGUP_F_main_BB_multiplyloop_bodydim0_12:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_13;
LEGUP_F_main_BB_multiplyloop_bodydim0_13:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_14;
LEGUP_F_main_BB_multiplyloop_bodydim0_14:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_15;
LEGUP_F_main_BB_multiplyloop_bodydim0_15:
	if ((main_multiplyloop_bodydim0_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB_multiplyloop_exitdim0_16;
	else if ((main_multiplyloop_bodydim0_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_1;
LEGUP_F_main_BB_multiplyloop_bodydim0_2:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_3;
LEGUP_F_main_BB_multiplyloop_bodydim0_3:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_4;
LEGUP_F_main_BB_multiplyloop_bodydim0_4:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_5;
LEGUP_F_main_BB_multiplyloop_bodydim0_5:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_6;
LEGUP_F_main_BB_multiplyloop_bodydim0_6:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_7;
LEGUP_F_main_BB_multiplyloop_bodydim0_7:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_8;
LEGUP_F_main_BB_multiplyloop_bodydim0_8:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_9;
LEGUP_F_main_BB_multiplyloop_bodydim0_9:
		next_state = LEGUP_F_main_BB_multiplyloop_bodydim0_10;
LEGUP_F_main_BB_multiplyloop_exitdim0_16:
		next_state = LEGUP_F_main_BB_multiplyloop_exitdim0_17;
LEGUP_F_main_BB_multiplyloop_exitdim0_17:
		next_state = LEGUP_F_main_BB_multiplyloop_exitdim0_18;
LEGUP_F_main_BB_multiplyloop_exitdim0_18:
		next_state = LEGUP_0;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %multiply.indvar.dim.02 = phi i64 [ 0, %multiply.loop_body.dim.0.lr.ph ], [ %3, %multiply.loop_body.dim.0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_multiplyloop_bodydim0_multiplyindvardim02 = 64'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   %multiply.indvar.dim.02 = phi i64 [ 0, %multiply.loop_body.dim.0.lr.ph ], [ %3, %multiply.loop_body.dim.0 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_15) & (memory_controller_waitrequest == 1'd0)) & (main_multiplyloop_bodydim0_exitcond1_reg == 1'd0))) */ begin
		main_multiplyloop_bodydim0_multiplyindvardim02 = main_multiplyloop_bodydim0_3_reg;
	end
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %multiply.indvar.dim.02 = phi i64 [ 0, %multiply.loop_body.dim.0.lr.ph ], [ %3, %multiply.loop_body.dim.0 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_multiplyloop_bodydim0_multiplyindvardim02_reg <= main_multiplyloop_bodydim0_multiplyindvardim02;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0_multiplyindvardim02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0_multiplyindvardim02_reg"); $finish; end
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   %multiply.indvar.dim.02 = phi i64 [ 0, %multiply.loop_body.dim.0.lr.ph ], [ %3, %multiply.loop_body.dim.0 ]*/
	if ((((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_15) & (memory_controller_waitrequest == 1'd0)) & (main_multiplyloop_bodydim0_exitcond1_reg == 1'd0))) begin
		main_multiplyloop_bodydim0_multiplyindvardim02_reg <= main_multiplyloop_bodydim0_multiplyindvardim02;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0_multiplyindvardim02) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0_multiplyindvardim02_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %scevgep = getelementptr [8 x float]* @temp0, i64 0, i64 %multiply.indvar.dim.02*/
		main_multiplyloop_bodydim0_scevgep = (`TAG_g_temp0_a + (64'd4 * main_multiplyloop_bodydim0_multiplyindvardim02_reg));
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %scevgep = getelementptr [8 x float]* @temp0, i64 0, i64 %multiply.indvar.dim.02*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		main_multiplyloop_bodydim0_scevgep_reg <= main_multiplyloop_bodydim0_scevgep;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %scevgep2 = getelementptr [8 x float]* @param0, i64 0, i64 %multiply.indvar.dim.02*/
		main_multiplyloop_bodydim0_scevgep2 = (`TAG_g_param0_a + (64'd4 * main_multiplyloop_bodydim0_multiplyindvardim02_reg));
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %scevgep3 = getelementptr [8 x float]* @param1, i64 0, i64 %multiply.indvar.dim.02*/
		main_multiplyloop_bodydim0_scevgep3 = (`TAG_g_param1_a + (64'd4 * main_multiplyloop_bodydim0_multiplyindvardim02_reg));
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %0 = load volatile float* %scevgep3, align 4*/
		main_multiplyloop_bodydim0_0 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %1 = load volatile float* %scevgep2, align 4*/
		main_multiplyloop_bodydim0_1 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_multiplyloop_bodydim0_2 = main_altfp_multiply_32_0;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %3 = add nuw nsw i64 %multiply.indvar.dim.02, 1*/
		main_multiplyloop_bodydim0_3 = (main_multiplyloop_bodydim0_multiplyindvardim02_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %3 = add nuw nsw i64 %multiply.indvar.dim.02, 1*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		main_multiplyloop_bodydim0_3_reg <= main_multiplyloop_bodydim0_3;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %exitcond1 = icmp eq i64 %3, 8*/
		main_multiplyloop_bodydim0_exitcond1 = (main_multiplyloop_bodydim0_3 == 64'd8);
end
always @(posedge clk) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %exitcond1 = icmp eq i64 %3, 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		main_multiplyloop_bodydim0_exitcond1_reg <= main_multiplyloop_bodydim0_exitcond1;
		if (start == 1'b0 && ^(main_multiplyloop_bodydim0_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_multiplyloop_bodydim0_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %multiply.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([8 x float]* @temp0, i64 0, i64 0), align 8*/
		main_multiplyloop_exitdim0_leflow_retval = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %2 = fmul float %0, %1*/
		main_altfp_multiply_32_0_op0 = main_multiplyloop_bodydim0_0;
end
always @(*) begin
	/* main: %multiply.loop_body.dim.0*/
	/*   %2 = fmul float %0, %1*/
		main_altfp_multiply_32_0_op1 = main_multiplyloop_bodydim0_1;
end
always @(*) begin
	altfp_main_multiplyloop_bodydim0_2_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_multiply_32_0 = altfp_multiplier_main_multiplyloop_bodydim0_2_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %multiply.loop_exit.dim.0*/
	/*   ret float %leflow_retval*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_exitdim0_18)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   %0 = load volatile float* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   store volatile float %2, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   %0 = load volatile float* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		memory_controller_address_a = main_multiplyloop_bodydim0_scevgep3;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   store volatile float %2, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_14)) begin
		memory_controller_address_a = main_multiplyloop_bodydim0_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   %0 = load volatile float* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   store volatile float %2, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   store volatile float %2, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_14)) begin
		memory_controller_in_a = main_multiplyloop_bodydim0_2;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   %0 = load volatile float* %scevgep3, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   store volatile float %2, float* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_14)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   %1 = load volatile float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %multiply.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([8 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_exitdim0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   %1 = load volatile float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		memory_controller_address_b = main_multiplyloop_bodydim0_scevgep2;
	end
	/* main: %multiply.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([8 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_exitdim0_16)) begin
		memory_controller_address_b = `TAG_g_temp0_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   %1 = load volatile float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %multiply.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([8 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_exitdim0_16)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %multiply.loop_body.dim.0*/
	/*   %1 = load volatile float* %scevgep2, align 4*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_bodydim0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %multiply.loop_exit.dim.0*/
	/*   %leflow_retval = load volatile float* getelementptr inbounds ([8 x float]* @temp0, i64 0, i64 0), align 8*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_exitdim0_16)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %multiply.loop_exit.dim.0*/
	/*   ret float %leflow_retval*/
	if ((cur_state == LEGUP_F_main_BB_multiplyloop_exitdim0_18)) begin
		return_val <= main_multiplyloop_exitdim0_leflow_retval;
		if (start == 1'b0 && ^(main_multiplyloop_exitdim0_leflow_retval) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/legup/legup-4.0/examples//../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $writememh("memory_dump.txt",top_inst.memory_controller_inst.temp0.ram);
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
