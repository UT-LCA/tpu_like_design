#-----------------------------------------------------------------------------
# Copyright (c) 2018 Daniel Holanda Noronha, Bahar Salehpour, Steve Wilton
# danielhn<at>ece.ubc.ca
#
# Permission to use, copy, and modify this software and its documentation is
# hereby granted only under the following terms and conditions. Both the
# above copyright notice and this permission notice must appear in all copies
# of the software, derivative works or modified versions, and any portions
# thereof, and both notices must appear in supporting documentation.
# This software may be distributed (but not offered for sale or transferred
# for compensation) to third parties, provided such third parties agree to
# abide by the terms and conditions of this notice.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS, AS WELL AS THE UNIVERSITY
# OF BRITISH COLUMBIA DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO 
# EVENT SHALL THE AUTHORS OR THE UNIVERSITY OF BRITISH COLUMBIA BE LIABLE
# FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
# IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#---------------------------------------------------------------------------


import sys, json, glob, os, shutil, misc

def instrumentTestbench():
    """ Reads the name of the output memory from a file and changes the testbench to dump that memory in a txt file """
    file = open(project_folder+'argsAndTemps.json', 'r')
    data = json.load(file)
    for idx,curr_instr in enumerate(ir):
        if "if (finish == 1) begin" in curr_instr:
            ir.insert(idx+1,"        $writememh(\"memory_dump.txt\",top_inst.memory_controller_inst."+data["return_value"]+".ram);\n")
            break

def copyParams():
    """ Copies memories that were generated by the user to the circuit folder """
    if os.path.exists(project_folder+"tfArgs/"):
        mifFiles = glob.glob(project_folder+"tfArgs/*.mif")
        for m in mifFiles:
            shutil.copy(m,project_folder)

if __name__ == '__main__':
    # Receive input file name 
    verilog_file=sys.argv[1]
    project_folder = misc.getFolder(verilog_file)

    # We will cache all file in an list to make it simpler to move information around
    ir=misc.readIR(verilog_file)

    # Dump output memory in the testbench
    instrumentTestbench()

    # Copying generated memories to the circuit's folder
    copyParams()

    # Writting back the IR into the verilog file
    misc.writeIR(ir,verilog_file)
